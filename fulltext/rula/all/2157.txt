Ryerson University

Digital Commons @ Ryerson
Theses and dissertations

1-1-2011

Hedging and Pricing in Non-probabilistic Models with Transaction Costs
Massoome Rahsepar
Ryerson University

Follow this and additional works at: http://digitalcommons.ryerson.ca/dissertations Part of the Applied Mathematics Commons Recommended Citation
Rahsepar, Massoome, "Hedging and Pricing in Non-probabilistic Models with Transaction Costs" (2011). Theses and dissertations. Paper 1585.

This Thesis is brought to you for free and open access by Digital Commons @ Ryerson. It has been accepted for inclusion in Theses and dissertations by an authorized administrator of Digital Commons @ Ryerson. For more information, please contact bcameron@ryerson.ca.

Hedging and Pricing in Non-probabilistic Models with Transaction Costs.

by

Massoome Rahsepar Master of Science, Isfahan University of Technology , 2004

A thesis presented to Ryerson University

in partial fulfillment of the requirements for the degree of Master of Science in the Program of Applied Mathematics

Toronto, Ontario, Canada, 2011 c Massoome Rahsepar 2011

I hereby declare that I am the sole author of this thesis. I authorize Ryerson University to lend this thesis to other institutions or individuals for the purpose of scholarly research.

I further authorize Ryerson University to reproduce this thesis by photocopying or by other means, in total or in part, at the request of other institutions or individuals for the purpose of scholarly research.

iii

Hedging and Pricing in Non-probabilistic Models with Transaction Costs. Master of Science 2011 Massoome Rahsepar Applied Mathematics Ryerson University

The thesis extends a non probabilistic market model proposed by Britten-Jones and Neuberger by incorporating transaction costs into their model. The original model is of rather general applicability as it incorporates the discrete nature of the market by allowing only a finite number of transactions and discrete jumps and requires few observable parameters to be deployed. Our addition of transaction costs gives the model an even more realistic character and, in this way, allows to use the model as an instrument to look for arbitrage opportunities in the market. The main output of the resulting model is a pair of numbers acting as lower and upper bounds to prices of financial instruments. The thesis does perform a limited search for arbitrage opportunities in market data and finds several interesting phenomena. A detailed analysis of several analytical properties, optimization and computational issues, along with a software implementation, are also fully developed in the thesis.

Keywords: Incomplete market, No-arbitrage bounds, Proportional transaction costs, Fixed transaction costs.

v

Acknowledgements
First and foremost I want to thank my supervisor, Dr. Sebastian Ferrando, who guided me along the way with immense knowledge. It has been an honor to be his student and I appreciate all his contributions of time, ideas, patience, and motivation from the very early stage of this thesis. I am indebted to him more than he knows. Besides my first advisor, I would like to give my deepest gratitude to Dr. Pablo Olivares, for his ideas, guidance, of course, encouragement as my second advisor. Many thanks go to my best friend, Ana, who has always been with me whenever I need her, without her great knowledge of the programming, I was not able to do this part of my thesis. I would like to thank my family for all their love and encouragement. My parents Farkhonde and Hassan who raised me with a love of education and supported me in my whole life. For my little sister Bahar for always being supportive and caring sibling. And most of all for my loving, supportive, encouraging, and patient husband Ali whose faithful support during all this way. Finally, I would like to thank everybody who was important to the successful realization of thesis, as well as expressing my apology that I could not mention personally one by one.

"I have not failed. I have just found 10,000 ways that won't work." --Thomas A. Edison

vii

Dedication
This thesis is dedicated to my wonderful husband Ali who has been a great source of motivation and inspiration. And to my parents Farkhonde and Hassan and my sister Bahar who have supported me all the way since the beginning of my studies.

"To us, family means putting your arms around each other and being there." --Barbara Bush

ix

Contents
1 Introduction 1.1 1.2 Background Material . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Overview of the thesis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1 4 5 5 6 9 9

2 Basic Model 2.1 Framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2.1.1 2.1.2 2.1.3 2.2 2.2.1 2.2.2 2.3 2.3.1 2.3.2 Non-probabilistic Asset Price Models . . . . . . . . . . . . . . . . . . . . . . . . . . Trading Strategy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Profits/Losses of Investor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

Structure of an Optimal Strategy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 Why Minimax Approach? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 Optimal Strategy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 The General Problem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Bellman Equation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 25

Dynamic Programming Formulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19

3 Transaction Costs Models 3.1 3.2 3.1.1 3.2.1 3.2.2 3.3 3.3.1 3.3.2 3.3.3

What are Transaction Costs? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 More Realistic Investment Trading Model . . . . . . . . . . . . . . . . . . . . . . . 26 The Portfolio of the Hedger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 Bellman Equation and Optimal Hedging . . . . . . . . . . . . . . . . . . . . . . . . 29 Hedging Strategies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 No Arbitrage Condition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 Dynamic Programming and Bellman Equation . . . . . . . . . . . . . . . . . . . . 34 37 Fixed Transaction Costs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27

Proportional Transaction Costs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29

4 Numerical Implementation 4.1 4.1.1

Jones-Neuberger Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 The Mesh of the J-N Algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 xi

4.1.2 4.1.3 4.1.4 4.1.5

J-N Discretization for a Special Case . . . . . . . . . . . . . . . . . . . . . . . . . . 40 J-N Discretization for the General Case . . . . . . . . . . . . . . . . . . . . . . . . 40 Option Price at Each Stage in J-N Algorithm . . . . . . . . . . . . . . . . . . . . . 42 Optimal Hedging and Convex Hull . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 49

5 Numerical Analysis 5.1 5.1.1 5.1.2 5.1.3 5.2 5.2.1 5.2.2 5.2.3 Conclusions Bibliography

Artificial Paths and General Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 Comparison to Black-Scholes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 Arbitrage Bounds: Basic Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 Arbitrage Bounds: Transaction Costs Model . . . . . . . . . . . . . . . . . . . . . 55

Market Data and No-Arbitrage Bounds . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 Forecasting the Quadratic Variation . . . . . . . . . . . . . . . . . . . . . . . . . . 61 Investment Strategy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 Smile Quadratic Variation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 73 99

xii

List of Tables
5.1 5.2 5.3 5.4 5.5 5.6 No arbitrage bounds with different the jump units. . . . . . . . . . . . . . . . . . . . . . . 53 No arbitrage bounds with different the jump units for a derivative with a butterfly payoff. 54 No arbitrage bounds with different the jump units for a derivative with a strangle payoff. The convergence behavior of the proportional transaction cost model as the number of trades N2 increases and also the relation between  and round-trip  . . . . . . . . . . . . 59 This table shows the option price with different strike prices. . . . . . . . . . . . . . . . . 62 profits/losses for price path of Yahoo inc! . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 54

xiii

List of Figures
1.1 2.1 2.2 4.1 4.2 4.3 4.4 4.5 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 The boundary region for a call option's prices . . . . . . . . . . . . . . . . . . . . . . . . . Case A: A lazy permissible path . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Case B: A possible permissible path . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 8 8

The sample grid with N = 11 steps tree construction . . . . . . . . . . . . . . . . . . . . . 39 All destination points when n = 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 All destination points for the last two stages . . . . . . . . . . . . . . . . . . . . . . . . . . 42 Multiple destination points from fourth to last step and beyond . . . . . . . . . . . . . . . 43 Convex Hull optimization and the Hull Line . . . . . . . . . . . . . . . . . . . . . . . . . . 45 The minimum upper bound V as a function N2 when
d 

= 1 . . . . . . . . . . . . . . . . . 50

Convergence of V as a function N2 for different values of d  . . . . . . . . . . . . . . . . . . 51 The minimum upper bound and the maximum lower bound for the basic model with different jump units . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 A Butterfly and Long Strangle payoffS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 The upper and lower bounds for a derivative with a Butterfly and Long Strangle payoffS with different jump units . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 Upper and lower bounds for the fixed transaction costs K . . . . . . . . . . . . . . . . . . 55 Upper and lower bounds become wider by increasing the rate K with the fixed jump units
d 

= 3. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56

This plot shows the option bounds when the fixed transaction cost is $10 by assuming 1000 call options. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 The minimum upper bound V as a function of the quadratic variation in both case, with and without transaction costs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58

5.10 The minimum upper and the maximum lower bounds for the proportional transaction costs. 60 5.11 Time Series: The sequence of closing price between May 2009-May 2011 for the chosen stock is shown in this figure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 5.12 This figure shows the quadratic variation for different windows 1, .., 16 which start at times ts such that S0 = S (ts )  16.69 and all window's sizes are N2 = 43 . . . . . . . . . . . . . 61 xv

5.13 The minimum upper bound for the maximum quadratic variation 0.0326, in the case of no jump occurs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 5.14 The minimum upper bound with no jumps and maximum jump units equal to 6 compared with the real option value show in this figure. . . . . . . . . . . . . . . . . . . . . . . . . . 63 5.15 This plot shows the upper bound with the minimum fixed transaction K = 0.045 which can remove the arbitrage in this market for all strike price. . . . . . . . . . . . . . . . . . 64 5.16 In the case of proportional transaction costs, we are not able to remove the gap, because of limitation on  < 0.027. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 5.17 Yahoo! Inc.path price and The J-N price path . . . . . . . . . . . . . . . . . . . . . . . . . 67 5.18 Yahoo! Inc.path price and The J-N price path . . . . . . . . . . . . . . . . . . . . . . . . . 68 5.19 Yahoo! Inc.path price and The J-N price path when N2 = 80 and v0 = Qvmax . . . . . . . 69 5.20 Yahoo! Inc.path price and The J-N price path . . . . . . . . . . . . . . . . . . . . . . . . . 69 5.21 The behavior of the quadratic variation as the strike price increases with fixed transaction costs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 5.22 The behavior of the quadratic variation as the strike price increases with proportional transaction cost. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72

xvi

List of Appendices
A Some Basic Concepts in Finance B Binomial Tree Model C Dynamic Programming C.2 Analytical Concepts in DP 75 77 81 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81

C.1 What Is Dynamic Programming? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 C.2.1 Utility or payoff Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 C.2.2 Control and State Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 C.2.3 Policy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 C.2.4 Basic Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 D The Optimal Hedging 87

D.1 Basic Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 D.2 Proportional Transaction Costs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 E MATLAB Code 91

xvii

Chapter 1

Introduction
1.1 Background Material

A fundamental question in finance is to determine the value of a financial option today1 Black and Scholes [Black and Scholes, 1973] studied this question in a path breaking paper which showed how one can replicate the payoff of an option using a dynamic trading strategy. Based on this results they provided a unique value of the option. Their approach uses a no arbitrage condition and is based on the assumption that the logarithm of the stock price follows a certain continuous time version of a random walk. They also assume that the stock and the risk free bond can be traded continuously. The Black-Scholes model provides the unique price of a contingent claim in an ideal, complete and unconstrained market based on the fundamental principle of absence of arbitrage opportunities. In other words, this price is the unique one for which there are no arbitrage opportunities by taking either a short or long position in the claim and investing wisely in the market. The Black-Scholes model also provides a single hedging portfolio which one can use to exactly duplicate the claim. However, the assumptions of the model may not be closely met in practice. This could be because markets are incomplete. Market incompleteness generally comes from two main resources [Hao, 2008]: 1. There are not enough assets in the market to span the uncertainty. 2. Trading strategies are limited or not ideal because of discrete trading, jumps or transaction costs, short selling constraints, etc. In incomplete markets, instead of a single arbitrage-free price there appears an arbitrage-free interval [V , V ] which contains a spectrum of market prices. Here, V is the greatest price the buyer can afford to pay without risk and V represents the least price the seller can accept without risk. This interval has the following properties:
1 For the reader's convenience, Appendix A provides a brief introduction to the basic finance concepts which are used in this thesis.

1

1.1. BACKGROUND MATERIAL

CHAPTER 1. INTRODUCTION

· Every price level outside the interval leads to an arbitrage opportunity. · There are no arbitrage opportunities for price level in the interior of the interval. There is no single widely accepted method to calculate bounds prices in an incomplete market. One approach is to find a super-replicating strategy which is a portfolio whose payoffs are always at least as big as the payoff of the option being hedged. The value of the option is then bounded by the value of the super-replicating portfolio. The super-replication price is the minimal initial wealth needed to hedge without risk the contingent claim. A second approach is the utility-based valuation; in this case the investor of the contingent claim assumes unhedgable risk, which will affect the probability distribution of his/her consumption and final wealth level, and his/her utility function. Pricing bounds are useful in many situations in which a relative pricing approach is appropriate but perfect replication is not possible. A few examples follow [Hao, 2008]: 1. A trader can use the bounds as buy and sell points in the search for good deals in asset markets. 2. A bank or other institution that markets or synthesizes non traded securities can use bounds as bid and ask prices. 3. Bounds can be used as economic measure of the accuracy of an option pricing formula. 4. Option pricing formulas are often used in risk assessments to quantify the exposure of a position to various risk factors. It is useful to assess such risks when perfect replication is impossible and to quantify the importance of the market price of risk assumptions. Obtaining bounds for option prices can be traced all the way back to Merton's paper [Merton, 1973] on option pricing in 1973. The reference addresses this question by asking what can be said about the value of a call option without making any additional assumptions about the price path. The answer is that a European call option on a risky asset with zero interest rate, the price V0 of this option must satisfy: max [S - K, 0]  V0  S, where S is the spot price of the underlying. Figure 1.1 shows the boundary as the 45 degree line from the origin. Along this line, the call option is worth the same as the stock. The lower bound is the value of the call option at expiration by using a European call option. Recall that the above bound is based on an arbitrage condition; if the price of the call option is outside this range then one can construct an arbitrage strategy that is guaranteed to make money without risk. (1.1)

2

CHAPTER 1. INTRODUCTION

1.1. BACKGROUND MATERIAL

Figure 1.1: The boundary region for a call option's prices

On the mathematics and financial assumptions on the standard Merton bounds, there are two things one can consider. First, the Merton bounds (1.1) requires no knowledge of the underlying asset's terminal price distribution or investor's behavior that will produce increasingly tighter bounds on option prices if additional assumptions are placed on investor preferences. Second, a crucial simplification in Merton's work is the absence of transaction costs. In such idealized model the investor would optimally maintain a proportion of wealth in the stock by trading continuously. Such continuous strategies are no longer admissible once the transaction costs are introduced. The investor must then determine when the stock position is sufficiently out of line to make the trading worthwhile. The present thesis builds on the approach from [Britten and Neuberger, 1996] (and expanded in [Rebonato, 2004]). An specific objective of the study is to add two types of transaction costs to the basic model from [Britten and Neuberger, 1996]. The approach in [Britten and Neuberger, 1996] manages to obtain tighter bounds in an incomplete market model by introducing realistic restrictions on the set of values taken by the underlying process. That reference develop this approach in a non probabilistic setting. The most important constraint of this model is that the (sampled) quadratic log variation of the prices of the underlying is known. They also assume that trading will take place at a finite number of occasions but it is not necessary to occur in equally spaced time intervals. An upper bound restriction on jumps size is also imposed. As indicated, as a main goal of our thesis, we introduce transaction costs in the framework from [Britten and Neuberger, 1996]. As a result, we propose an approach to the pricing and hedging of contingent claims in the presence of transaction costs, under a general incomplete market in discrete time with special reference to the models introduced in [Bensaid and Scheinkman, 1992] and 3

1.2. OVERVIEW OF THE THESIS

CHAPTER 1. INTRODUCTION

[Avellaneda and Par´ as, 1995], based on the framework described in [Britten and Neuberger, 1996].

1.2

Overview of the thesis

This work is structured as follows. Chapter 2 introduces some of the notation to be used in the remainding of the thesis. We assume that there is a forward market in the asset S where the forward price for delivery of stock at time tn will be denoted by Sn 2 . No probability structure is imposed at the outset. We also introduce the basic model from [Britten and Neuberger, 1996], the lower and upper bounds for the derivative's prices are also introduced. Section 2.3 uses the dynamic programming optimization methodology to make the problem computationally tractable. Chapter 3 formulates two models for transaction costs in the basic framework of [Britten and Neuberger, 1996]. The investor's portfolio model in this chapter consists of one risky and one risk-free asset. Whenever the investor re-balances his/her portfolio in favor for one or the other asset class, he/she faces transaction costs. Transaction costs are either assumed to be of a fixed value or proportional to the volume of the risky asset traded. Section 3.1 provides a review of the transaction costs models. Fixed costs are described in Section 3.2, there it is shown how to compute the minimum upper bound. The dynamic programming formulation of the problem is also introduced. Section 3.3 develops the proportional transaction cost model, this means that transaction costs are proportional to the wealth transferred. This extends the basic framework from [Britten and Neuberger, 1996]. We also encode the optimization problem in terms of dynamic programming. Chapter 4 describes the construction of the pricing algorithm, which is referred as the J-N algorithm and presents the mathematical setup of this algorithm. Chapter 5 discusses numerical tests of the methods which were introduced in Chapter 2 and Chapter 3. We also study the approach in real market data, one interesting aspect of this investigation is to analyze the effects of the transaction costs on removing any available arbitrage opportunities. Appendix A presents a very short introduction to financial concepts , Appendices B and C contain an introduction to the Binomial Model and the dynamic programming respectively. Appendix D contains analytical derivations of the optimal hedging ratios for the different models, these are not needed in the rest of the thesis. Finally all Matlab code is available in Appendix E.

2 We

will assume zero interest rates, this implies that we will end up dealing directly with the stock value Sn .

4

Chapter 2

Basic Model
A central question in finance consists in finding the price of an option given information on the underlying asset. The approach which is taken here is not a traditional approach as it does not rely on a probability model. We also allow for some market imperfections. More precisely, we are interested in determining the price of an option using a non probabilistic approach with a no-arbitrage condition. Since our model is incomplete because jumps are allowed, one cannot use an exact pricing rule. Independently of this state of affairs, one can always search for a bounding principle for the price of an option. BrittenJones and Neuberger [Britten and Neuberger, 1996] (in some instances, during the following pages, these reference/authors are abbreviated by J-N) introduced an interesting way of looking at option pricing by assuming that the (sampled) log quadratic variation of price changes over the option's life is known. This chapter contains a review of this arbitrage-free approach to the pricing of derivatives.

2.1

Framework

The objective of this section is to model an incomplete financial market with a non probabilistic approach in a market containing one risk-free (bank account) and a risky assets (stock). In order to simplify our formulas and developments, we assume: 1. There are no taxes and transactions costs. 2. The riskless borrowing and lending rats are zero. We discuss a more general framework in Chapter 3. According to Merton's bound,1 discussed in the previous chapter, the option is not more valuable than the underlying asset. This is a very weak bound but it is tight in the case that no extra restrictions are placed on the price path of the risky asset. In this work, we show through computer experimentation,
1 Merton's bound is based on an arbitrage condition; if the price of the call option is outside this range then one can construct an arbitrage strategy that is guaranteed to make money without risk.

5

2.1. FRAMEWORK

CHAPTER 2. BASIC MODEL

that practical bounds are obtained by assuming a known (log) quadratic variation and a bound on the jump size as constraints on allowed paths for the risky asset.

2.1.1

Non-probabilistic Asset Price Models

Assume a finite discrete model such that trading will take place at a finite number of occasions which is not fixed in number or necessarily equally spaced in time. There is a risky asset (e.g. stock) with S (0) being today's price, and its value at tn  T is denoted by Sn . Moreover, at any trading position tn  T , we have an amount of cash Bn in a bank account with zero interest rate. Definition 1. Assume Si is the price of the underlying at trading position i, an asset price path  is any finite sequence of positive numbers {Si }N i=0 , where N is not set a priori but may equal to any finite positive integer and at maturity SN is equal to ST (ST  S (T )). In addition, we consider a European contingent claim, V , a security whose payoff at time T is only dependent on ST . It means that the forward price path {Si }N i=0 has a payoff at T which depends only on ST , written as V (ST ). For example, a European call option payoff is given by: V (ST ) = max(ST - K, 0), where K is the strike price. Now, we provide constraints on path's prices {Si }N i=0 which will allow us to calculate no arbitrage price bounds which will be tighter that the Merton's bounds in the case of an incomplete market. In order to reach our goal, we make two assumptions regarding the price path. We assume that the (sampled log) quadratic variation of the risky asset is constant (i.e. it does not depend on the specific path) and we have a jump restriction between tradings. Definition 2. For a given constant v > 0, d > 0, and S (0), a price sequence  = {S0 , S1 , ...SN }, where S0 = S (0), belongs to the set of permissible price sequences P (S0 , v, d) if and only if 1. S0 = S (0), 2. |ln Si+1 - ln Si |  d,
N -1

0  i  N - 1,

3.
i=0

(ln Si+1 - ln Si )2 = v.

The first condition simply requires that, for a price sequence to be permissible, its first value should be equal to the price of the underlying asset today. The second condition implies that the jump in the log of the prices between any two steps should not be larger than the given value d.
N -1

As far as the last condition is concerned, it is easy to recognize that
i=0

(ln Si+1 - ln Si )2 is the sampled

(log) quadratic variation generated by the price sequence. This sampled quadratic variation should be known and be exactly equal to v . 6

CHAPTER 2. BASIC MODEL Definition 3. For a given price sequence   P (S0 , v, d) at step i, define: 1. v0 = v , 2. vi+1 = vi - (ln Si+1 - ln Si )2 ,
N

2.1. FRAMEWORK

0  i  N - 1.

{vi }i=0 is called a sequence of remaining (sampled) quadratic variations. The second condition shows that every price move uses up the fraction (ln Si+1 - ln Si )2 of the total quadratic variation, until finally at option expiry T , the given value v is all exactly depleted. Note that by using items 1. and 2. from Definition 3, we have
i-1

vi = v0 -
k=0

(ln Sk+1 - ln Sk )2 .

(2.1)

Hence, the vi gives information about how much of the quadratic variation is available to consume in each trading occasion i. In Figures 2.1 and 2.2, one can see a time series path of prices for two different trading strategies. In both cases, the trader will trade to re-balance her/his hedging portfolio; note that there is no presumption that trading takes place at constant time intervals and the number of trades can be as small or large as the trader requires. Example A: In the case A, assume that maximum jump size is d, the quadratic variation is equal to v and in addition assume the trader is very lazy to trade more often or he/she expects larger gains. As a result he/she trades whenever: |ln Si+1 - ln Si | = d, 0  i  N - 1.

As displayed in Figure (2.1), the trader has traded N = 24 times and has used up all of the quadratic variation v . Example B: In this case, Figure 2.2, for the same fixed maximum jump size d, the quadratic variation v , the trader re-balances his/her portfolio more often and at any time he/she wishes as far as the log of price changes is less or equal max jump d. Therefore at expiration T , he ends up with a permissible path {Si }45 i=0 .

7

2.1. FRAMEWORK

CHAPTER 2. BASIC MODEL

Figure 2.1: Case A: A lazy permissible path for the given maximum jump size d and the quadratic variation v .

Figure 2.2: Case B: A possible permissible path which trader can trade any time as far as log return is less or equal maximum jump size d

8

CHAPTER 2. BASIC MODEL

2.1. FRAMEWORK

2.1.2

Trading Strategy

The most important tool that a trader uses to make money is undoubtedly her/his trading strategies. A trading strategy, may mean different things to different people. At any given point in time, for any given security, a trading strategy should first tell a trader whether to buy, sell or hold; it then should provide the optimal trading size under the given market price. In finance, a trading strategy is a predefined set of rules for making trading decisions. An investment strategy on the stock is given by a function H (., .) that depends on the spot Si and the remaining volatility vi and it represents the number of shares in the holding portfolio when S (ti ) = Si and the the remaining quadratic variation is equal to vi . We will restrict the investment strategies H (., .) to belong to a given set H, whenever required this set H will satisfy the following definition. Definition 4. H is called an admissible class if it satisfies
N -1 H H

inf

sup
 P (S0 ,v0 ,d)

-
i=0

H (Si , vi )(Si+1 - Si )

= 0.

(2.2)

The holdings in the bank account will be denoted by BSi ,vi , hence, a portfolio can be define as a vector valued function (Si , vi ) = (H (Si , vi ), BSi ,vi ). Sometimes for simplicity we set hi  H (Si , vi ) and Bi = BSi ,vi .

2.1.3

Profits/Losses of Investor

We assume that, at time zero, the investor has V0 dollars and invests this money in a portfolio containing H (S0 , v0 ) shares and deposits B0 = V0 - H (S0 , v0 )S0 in a bank account with zero interest rate. The initial value V0 of this portfolio is given by: V0 = H (S0 , v0 )S0 + B0 . In general, the value of the portfolio Vn at n-th trade, after adjustment, may be written as; Vn = H (Sn , vn )Sn + Bn , (2.4) (2.3)

where H (Sn , vn ) is the number of shares of the underlying asset and Bn is the amount of cash in the account. The investor holds this portfolio until n + 1. To proceed further, we need an equation governing the dynamics of the self-financing hedging portfolio. At stage n + 1 and before adjusting the portfolio under the self-financing constraint, the portfolio's value 9

2.2. STRUCTURE OF AN OPTIMAL STRATEGY equals (recall that we assume interest rates r = 0): Vn+1 = H (Sn , vn )Sn+1 + Bn .

CHAPTER 2. BASIC MODEL

Then, using the self-financing trading strategy condition, the portfolio becomes H (Sn , vn )Sn+1 + Bn = H (Sn+1 , vn+1 )Sn+1 + Bn+1 . So at (n + 1)
th

(2.5)

trading position after re-balancing, the value of the investor's portfolio is: Vn+1 = H (Sn+1 , vn+1 )Sn+1 + Bn+1 . (2.6)

By using (2.4) and (2.6) and then applying the self-financing equation (2.5) we can find the variation of the portfolio at two successive moments of trading in the form; Vn = Vn+1 - H (Sn , vn )(Sn+1 - Sn ). By applying (2.7) recursively; at maturity T , we have VN -1 = VN - H (SN -1 , vN -1 )(SN - SN -1 ). Hence; by the self financing property of the constructed portfolio:
N -1

(2.7)

H (SN -1 , vN -1 )ST + BT  V (S0 , v0 ) +
i=0

H (Si , vi )(Si+1 - Si ),

where the initial value V (S0 , v0 ) = H (S0 , v0 )S0 + B0 will also be denoted V0 . An important remark, to be used below, is that once H (., .) is fixed, the self financing constraint on the portfolio  determines Bk for k = 1, . . . , N - 1 and only, either V0 or B0 , can be set arbitrarily. Definition 5. Assume a derivative with payoff V (ST ), for a given hedging strategy H (., .) and price path   P (S0 , v0 , d), we denote the total balance of hedging (profit or loss) as follows:
N -1

H ( ) = V0 - V (ST ) +
i=0

H (Si , vi )(Si+1 - Si ).

(2.8)

2.2

Structure of an Optimal Strategy

We show next how the above introduced framework can be used to provide the upper and the lower bounds for the value of an option.

10

CHAPTER 2. BASIC MODEL

2.2. STRUCTURE OF AN OPTIMAL STRATEGY

2.2.1

Why Minimax Approach?

Mathematical finance theory is devoted to the modeling of stock prices and devising investment strategies that maximize wealth gain, minimize risk while doing so, and so on. Typically, this is done by estimating the parameters in a probabilistic model of stock prices returns. One of the most popular probabilistic models is known as the Geometric Brownian Motion. Even though, empirically the Geometric Brownian Motion [Osborne, 1959] has enjoyed great predictive success and every year trillions of dollars are traded assuming this model 2 ; in reality, several decisions fall into the non-probabilistic category. While there maybe insufficient quantitative information to establish probabilistic criteria, the decision-maker can still apply qualitative judgment and experience to the situation. It would be a very unusual problem indeed that would leave a decision-maker bereft of ideas! For cases where probabilities cannot be specified, the main decision criteria are maximin, maximax, and minimax. · The maximax rule, A risk-seeking decision-maker will choose the adventurous maximax decision rule. He takes an optimistic view that everything will turn out right regardless of what decision is taken. It looks only at the highest possible gain and ignores the opportunities that other alternatives might present. In monetary terms, a maximax decision looks for the best of the best by evaluating the largest possible profit that each alternative can produce and then choosing the alternative with the highest profit. An organization that adopts a maximax approach perceives a business opportunity and takes a gamble in trying to achieve its goal. It may become very profitable or it may go broke. · The maximin rule, A risk-averse decision-maker will use the conservative maximin criterion which often leads to a decision to do nothing. An organization that adopts a maximin attitude is noncompetitive and will soon be overtaken by more innovative risk-taking competitors. The maximin criterion essentially takes a pessimistic view and considers the results of taking the wrong alternative. It evaluates the worst outcome for each alternative and then chooses the alternative which leads to the best of these worst outcomes. In monetary terms, a maximin decision looks for the best of the worst by choosing the alternative that yields the maximum profit from all minimum possible returns hence the name maximin. · The minimax rule can be considered as another conservative or pessimistic decision rule. In this case, a minimax decision looks for the minimum of the maximums by evaluating the largest possible opportunity loss that each alternative would produce and then choosing the alternative with the smallest loss. Thus, the minimax rule chooses the alternative with the smallest (or minimum) maximum regret hence the name minimax.
2 Black-Scholes

used this same model in their work on pricing options on stocks.

11

2.2. STRUCTURE OF AN OPTIMAL STRATEGY

CHAPTER 2. BASIC MODEL

2.2.2

Optimal Strategy
3

Consider an investor who sold a derivative

with payoff V (ST ) and option's price of V0 , and also who

uses the trading strategy H (., .) to hedge the derivative.

Remark 1. Note that we use the amount V0 to set up the portfolio as an initial value in order to find a suitable upper bound for this amount. ~ (., .) and according to (2.8), the investor's profit which depends on Let us to fix a hedging strategy H permissible path  is
N -1

H ~ ( ) = V0 - V (ST ) +
i=0

~ (Si , vi )(Si+1 - Si ). H

The second term (appearing with a minus sign) represents the payoff of the derivative at time of expiry T and the last term represents the gains/losses from trading. Definition 6. A strategy H (., .) is an arbitrage strategy if ·   p(S0 , v0 , d), H ( )  0 & V0 = H (S0 , v0 )S0 + B0 = 0,

·    p(S0 , v0 , d) such that H (  ) > 0. ~ (., .) is not an arbitrage if there exists   P (S0 , v0 , d) Therefore a given trading strategy H
N -1

H ~ ( ) = V0 - V (ST ) +
i=0

~ (Si , vi )(Si+1 - Si ) < 0. H

or V0 < V (ST ) -

N -1

~ (Si , vi )(Si+1 - Si ). H
i=0

Therefore,
N -1

V0 <

sup
 P (S0 ,v0 ,d)

V (ST ) -
i=0

~ (Si , vi )(Si+1 - Si ) . H

~ (., .) being arbitrary, we obtain: The trading strategy H
N -1

V0  inf
H
3 The

sup
 P (S0 ,v0 ,d)

V (ST ) -
i=0

H (Si , vi )(Si+1 - Si )

.

(2.9)

derivative here is an European path-independent derivative.

12

CHAPTER 2. BASIC MODEL

2.2. STRUCTURE OF AN OPTIMAL STRATEGY

Let us denote the minimum upper bound (2.9) as V (S0 , v0 )
N -1

V (S0 , v0 )  inf
H

sup
 P (S0 ,v0 ,d)

V (ST ) -
i=0

H (Si , vi )(Si+1 - Si )

.

(2.10)

In Proposition 3, we show that V (S0 , v0 ) can be interpreted as the maximum price a trader can charge by selling the derivative asset: nobody (who acknowledges only future paths with the quadratic variation v and maximum jumps d) will buy the option for more than V (S0 , v0 ). According to Proposition 7, the maximum lower bound can be calculated as the negative value of the minimum upper bound V (S0 , v0 ) with the negative payoff (short position). So from a financial point of view, in the short position, the upper bound on this position can be interpreted as the lower bound on the long position.
N -1

V (S0 , v0 ) = sup
H

 P (S0 ,v0 ,d)

inf

V (ST ) +
i=0

H (Si , vi )(Si+1 - Si )
N -1

(2.11)

= -inf
H

sup
 P (S0 ,v0 ,d)

-V (ST ) -
i=0

H (Si , vi )(Si+1 - Si )

V (S0 , v0 ) can be interpreted as the minimum price a trader will have to pay for the derivative. Nobody will sell it for less than V (S0 , v0 ). Before proceeding any further, let us introduce some basic properties of the minimum upper bound V (S0 , v0 ). Remark 2. For given a contingent claim with payoff V (ST ), the minimum upper bound
N -1

V (S0 , v0 ) = inf
H

sup
 P (S0 ,v0 ,d)

V (ST ) -
i=0

H (Si , vi )(Si+1 - Si )

from a mathematical point of view, means that for all  > 0, there exist a trading strategy H such that
N -1

0  V (ST ) -
i=0

H (Si , vi ) (Si+1 - Si ) - V (S0 , v0 )  .

(2.12)

The following propositions show that by means of V (S0 , v0 ) and V (S0 , v0 ) one has an upper-hedging and under-hedging portfolio for a derivative with payoff V (ST ). Proposition 1. Fix a payoff V (ST ), then for all > 0 there exists a portfolio (., .) = (H (., .), B.,. ),

depending on , with V (S0 , v0 )  V (S0 , v0 ) such that the following bound holds for all permissible paths 13

2.2. STRUCTURE OF AN OPTIMAL STRATEGY {S0 , ..., SN }:
N -1

CHAPTER 2. BASIC MODEL

V (ST )  V (S0 , v0 ) +
i=0

H (Si , vi ) (Si+1 - Si ) + .

(2.13)

Proof. For an arbitrary

> 0 select H (., .) satisfying:
N -1

0  V (ST ) -
i=0

H (Si , vi ) (Si+1 - Si ) - V (S0 , v0 )  ,

(2.14)

for all permissible paths {S0 , ..., SN }. Then, by defining B0  V (S0 , v0 ) - H (S0 , v0 )S0 , the portfolio defined by (., .) = (H (., ), B.,. ) satisfies V (S0 , v0 ) = V (S0 , v0 ). A re-writing of (2.14) gives then (2.13)
N -1

V (ST )  V (S0 , v0 ) +
i=0

H (Si , vi ) (Si+1 - Si ) + .

Proposition 2. Fix a payoff V (ST ), assume H is closed under multiplication by -1, then for all following bound holds for all permissible paths {S0 , ..., SN }:
N -1

> 0,

there exists a portfolio (., .) = (H (., .), B.,. ), depending on , with V (S0 , v0 )  V (S0 , v0 ) such that the

V (ST )  V (S0 , v0 ) +
i=0

H (Si , vi ) (Si+1 - Si ) - .

(2.15)

Proof. For an arbitrary

> 0 select H (., .) satisfying:
N -1

0  V (S0 , v0 ) -

V (ST ) +
i=0

H (Si , vi ) (Si+1 - Si )

 ,

(2.16)

for all permissible paths {S0 , ..., SN }. Then, by defining B0  V (S0 , v0 ) - H (S0 , v0 )S0 , the portfolio defined by (., .) = (H (., .), B.,. ) satisfies V (S0 , v0 ) = V (S0 , v0 ). So by taking H (., .)  -H (., .) we obtain: V (ST )  V (S0 , v0 ) +
i=0 N -1

H (Si , vi ) (Si+1 - Si ) - .

The following shows that superhedge for the minimum upper bound and underhedge for the maximum lower bound are tight. Proposition 3. Consider contingent claim with a payoff V (ST ) and an arbitrary H (., .)  H. · If V0 = H (S0 , v0 )S0 + B0 < V (S0 , v0 ) then,
N -1

V0 +
i=0

^i+1 - S ^i ) < V (S ^T ) for some permissible price sequence {S ^i }. H (Si , vi )(S 14

(2.17)

CHAPTER 2. BASIC MODEL · If V0 = H (S0 , v0 )S0 + B0 > V (S0 , v0 ) then,
N -1

2.2. STRUCTURE OF AN OPTIMAL STRATEGY

V0 +
i=0

^i+1 - S ^i ) > V (S ^T ) for some permissible price sequence {S ^i }. H (Si , vi )(S

(2.18)

Proof. We prove only (2.17); assume there exists H (., .)  H satisfying V0 = H (S0 , v0 )S0 + B0 < V (S0 , v0 ), also assume that (2.17) does not hold. Therefore,
N -1

V0 

sup

[V (ST ) -
i=0

H (Si , vi )(Si+1 - Si )].

 P (S0 ,v0 ,d)

This implies V0  V (S0 , v0 ). For the lower bound, the process is the same just one can use inf rather than sup. Proposition 4. Consider a contingent claim with payoff V3 (ST ) that is a convex combination of the payoffs on two other claims, i.e. V3 (ST ) = V1 (ST ) + (1 - )V2 (ST ), where 0    1. Also assume H is closed under convex combinations. Then the minimum upper bound V 3 (S0 , v0 ) satisfies V 3 (S0 , v0 )  V 1 (S0 , v0 ) + (1 - )V 2 (S0 , v0 ) . Proof. For any   (0, 1), the payoff V3 (ST ) is defined by: V3 (ST ) = V1 (ST ) + (1 - )V2 (ST ). (2.19)

Assume V 1 (S0 , v0 ) be the minimum upper bound which has the payoff V1 (ST ). Then for any arbitrary  > 0 and all   P (S0 , v0 , d), there is a H (., .)  H such that
N -1

V 1 (S0 , v0 )  sup V1 (ST ) - 
 i=0

H (Si , vi )(Si+1 - Si )

 - . 2

(2.20)

Similarly there exist L(., .)  H
N -1

(1 - )V 2 (S0 , v0 )  sup (1 - )V2 (ST ) - (1 - )
 i=0

L(Si , vi )(Si+1 - Si )

 - . 2

(2.21)

By adding (2.20) and (2.21), we obtain
N -1

V 1 (S0 , v0 ) + (1 - )V 2 (S0 , v0 )  sup V1 (ST ) - 
 i=0

H (Si , vi )(Si+1 - Si )
N -1

-

 2 -  2

+ sup (1 - )V2 (ST ) - (1 - )
 i=0

L(Si , vi )(Si+1 - Si )

15

2.2. STRUCTURE OF AN OPTIMAL STRATEGY So, by using (2.19)
N -1

CHAPTER 2. BASIC MODEL

V 1 (S0 , v0 ) + (1 - )V 2 (S0 , v0 )  sup V3 (ST ) -
 i=0

(H (Si , vi ) - (1 - )L(Si , vi ))(Si+1 - Si )

- ,

Set Y (Si , vi )  H (Si , vi ) - (1 - )L(Si , vi ) 4 , so the trading strategy Y (., .)  H. Hence;
N -1

V 1 (S0 , v0 ) + (1 - )V 2 (S0 , v0 )  Since

sup
 P (S0 ,v0 ,d)

V3 (ST ) -
i=0

Y (Si , vi )(Si+1 - Si )

-

> 0 is arbitrary, we can choose it small enough such that V 1 (S0 , v0 ) + (1 - )V 2 (S0 , v0 )  V 3 (S0 , v0 ).

Proposition 5. Given two contingent claims with payoff V1 (ST ) and V2 (ST ) such that V2 (ST ) = aV1 (ST ) + b. where a, b are arbitrary real numbers, and also assume H is close under multiplication, then V 2 (S0 , v0 ) = |a|V 1 (S0 , v0 ) + b, Proof. assume a > 0 (when a = 0 the result holds trivially) by definition:
N -1

V 2 (S0 , v0 ) = inf
H

sup
 P (S0 ,v0 ,d)

a V1 (ST ) -
i=0

H (Si , vi )(Si+1 - Si )

+ b.

Now, it is enough to pull out a as common factor so,
N -1

V 2 (S0 , v0 ) = a inf
H

sup
 P (S0 ,v0 ,d)

V1 (ST ) -
i=0

1 H (Si , vi )(Si+1 - Si ) a

+ b.

So let us call

1 a H (Si , vi )

as a new strategy H (Si , vi ). Hence V 2 (S0 , v0 ) = a V 1 (S0 , v0 ) + b. (2.22)

When a < 0, then -a > 0. To use the same argument, equation (2.22) can be written as V 2 (S0 , v0 ) = -a V 1 (S0 , v0 ) + b.
4 Recall

H (., .), L(., .)  H, and H is assumed to be closed under convex combinations

16

CHAPTER 2. BASIC MODEL Therefore

2.2. STRUCTURE OF AN OPTIMAL STRATEGY

V 2 (S0 , v0 ) = |a|V 1 (S0 , v0 ) + b.

Proposition 6. Assume a derivative with payoff V (ST ), and also H is an admissible class, then the minimum upper bound
N -1

V (S0 , v0 ) = inf
H

sup
 P (S0 ,v0 ,d)

V (ST ) -
i=0

H (Si , vi )(Si+1 - Si )

.

(2.23)

satisfies the following properties: 1. If V (ST ) = 0 then V (S0 , v0 ) = 0. 2. If V (ST ) = k then V (S0 , v0 ) = k . 3. If V (ST ) = kST and H is closed under multiplication by (-1) and shifts by a constant k then V (S0 , v0 ) = kS (0). Proof. 1. Suppose that V (ST ) = 0 because H is an admissible class, then according to equation (2.2),    
N -1

V (S0 , v0 ) = inf
H

V (ST ) - sup P (S0 ,v0 ,d) 
0

H (Si , vi )(Si+1 - Si )
i=0

  

=0

Therefore, V (S0 , v0 ) = 0. ~ (S0 , v0 ) = 0, ~ (ST )  V (ST ) - k = 0, so from Property 1 we obtain V 2. Assume that V (ST ) = k , and let V on the other hand
N -1

~ (S0 , v0 ) = inf V
H

sup
 P (S0 ,v0 ,d)

~ (ST ) - V
i=0 N -1

H (Si , vi )(Si+1 - Si ) H (Si , vi )(Si+1 - Si )
i=0

= inf
H

sup
 P (S0 ,v0 ,d)

V (ST ) -

-k

= V (S0 , v0 ) - k = 0. Hence, V (S0 , v0 ) = k . 3. Consider the payoff V (ST ) = kST where k is a fixed real number, recall that ST = SN and   17

2.2. STRUCTURE OF AN OPTIMAL STRATEGY P (S0 , v0 , d) then:
N -1

CHAPTER 2. BASIC MODEL

V (S0 , v0 ) = inf
H

sup kST -
 i=0

H (Si , vi )(Si+1 - Si )
N -2

= inf
H

sup k SN - H (SN -1 , vN -1 )SN + H (SN -1 , vN -1 )SN -1 -
 i=0

H (Si , vi )(Si+1 - Si )

N -2

= inf
H

sup (k - H (SN -1 , vN -1 )SN + (H (SN -1 , vN -1 ) + k - k )SN -1 -
 N -2 i=0

H (Si , vi )(Si+1 - Si )

= inf
H

sup -H (SN -1 , vN -1 ) - k )(SN - SN -1 ) + kSN -1 -
 N -2 i=0

H (Si , vi )(Si+1 - Si )

= ...

= inf
H

sup kS0 -
 i=0

(k - H (SN -1 , vN -1 ))(Si+1 - Si )

,

since kS0 is constant and H is an admissible class, so by equation (2.2) we obtain:  0     N -2  (k - H (Si , vi ))(Si+1 - Si ) V (S0 , v0 ) = inf sup - H    i=0              

+ kS0 = kS0 .

The following proposition gives the relationship between the bound on the long position and the bound on a short position on the same claim. Proposition 7. Given two contingent claims with payoff V1 (ST ) and V2 (ST ) such that V2 (ST ) = -V1 (ST ), assume H is closed under convex combination, then 1. V 1 (S0 , v0 ) + V 2 (S0 , v0 )  2 V 3 (0), where, allowing for some abuse of notation, V 3 (0) denotes the minimum upper bound for a continent claim with payoff V3 (ST ) = 0. 2. If H is an admissible class, then V 1 (S0 , v0 ) + V 2 (S0 , v0 )  0. Proof. 1. By assumption, we have two contingent claims with payoff V1 (ST ), and V2 (ST ) such that V1 (ST ) + V2 (ST ) = 0, or equally 1 1 V1 (ST ) + V2 (ST ) = V3 (ST ) = 0. 2 2 18

CHAPTER 2. BASIC MODEL Then from Proposition 4

2.3. DYNAMIC PROGRAMMING FORMULATION

V 1 (S0 , v0 ) + V 2 (S0 , v0 )  2 V 3 (S0 , v0 ) = 2 V 3 (0). 2.If H is an admissible class, then by Proposition 6, since V 3 (ST ) = 0 when V 3 (S0 , v0 ) = 0. Hence V 1 (S0 , v0 ) + V 2 (S0 , v0 )  0.

As a result of Proposition 7, since V (ST ) + (-V (ST )) = 1 1 V (ST ) - V (ST ) = 0. 2 2

If H is an admissible class, it follows from Proposition 7, item 2, that: V (S0 , v0 )  V (S0 , v0 ). (2.24)

These arbitrage bounds mean that investors would not pay more than V (S0 , v0 ) and would not sell it for less than V (S0 , v0 ).

2.3

Dynamic Programming Formulation

The solution to the problem (2.10) is a strategy H (., .) such that minimizes total payout in the worst-case scenario. Therefore, potentially, this is a hard problem because involves a search over all permissible paths and over all hedging strategies. The beauty of dynamic programming (see Appendix C for more details about dynamic programming) is to convert the sequential problem into a collection of two-period problems which is easy to solve.

2.3.1

The General Problem

Let us clarify up the assumptions which are necessary to convert the sequential problem (2.10) into a dynamic programming problem, first we need to detect state variables and control variables (Appendix C). Assume Si and vi , where 0  i  N , be two of state variables of the system which summarize the past information that is relevant for future optimization and ci is a control variables which can be chosen in every period of trading by the decision-maker. We define ci as control variable which is equal the continuously compounded growth (rate of return) between the adjusted prices: ln Si+1 = ci . Si 19

2.3. DYNAMIC PROGRAMMING FORMULATION So Si+1 = Si eci . The other state variable is the volatility vi which evolves as; vi+1 = vi - (ln Si+1 - ln Si )2 = vi - c i 2 . Now, we have following optimization problem:
N -1

CHAPTER 2. BASIC MODEL

V (S0 , v0 ) = where hi = H (Si , vi ). Subject to

-1 {hi }N i=0

inf

sup
-1 {Si }N i=0

V (ST ) -
i=0

hi (Si+1 - Si )

,

(2.25)

· Si+1 = Si eci & vi+1 = vi - ci 2  0.
2 · ci  R & c2 i d

where i = 0, ..., N - 1.

· S0 = S (0) and v0 = v are given. · SN = ST  0 and vN = 0. V (ST ) is called a "scrap" value function at the end of the program where no further decisions are made.
N -1 i=0

hi (Si+1 - Si ) is separable after the start trading and Si+1 = Si eci is separable by following structure: S1 = S0 ec0 , S2 = S1 ec1 , . . . SN = SN -1 ec N -1 .

These equations are called transition equations. This problem can be solved by using the standard constrained optimization technique of Lagrange multipliers. This is a perfectly good approach, but dynamic programming is an alternative that is sometimes more convenient. As we consider in Appendix C, as more convenient method to use is Bellman's Principle of Optimality which guarantees that if we convert the original sequential problem into a collection of small problems, the optimal choice in each of the two-period problem must be globally optimal to justify the transformation.

20

CHAPTER 2. BASIC MODEL Bellman's Method: Consider the problem at time zero: Problem I:

2.3. DYNAMIC PROGRAMMING FORMULATION

N -1

V (S0 , v0 ) = Subject to

-1 {hi }N i=0

inf

sup
-1 {ci }N i=0

V (ST ) -
i=0

hi (Si+1 - Si )

.

· Si+1 = Si eci , & vi+1 = vi - ci 2  0.
2 · ci  R & c2 i d

where i = 0, ..., N - 1.

· S0 = S (0) and v0 = v are given. Now consider the same problem, starting at some n0 > 0: Problem II  
0

N -1

V (Sn0 , vn0 ) = Subject to · Si+1 = Si eci .
2 · ci  R & c2 i d

-1 {hi }N i=n

inf

sup {ci }N -1

V (ST ) -
i=0

hi (Si+1 - Si )

  

.

i=n0

where i = n0 , ..., N - 1.

· Sn0 is given. According to Bellman's Principle of Optimality asserts [Bellman, 1957], any solution to Problem I (i.e. on the range i = 0, ..., T ) which yields to S0 = S (0) and an optimal strategy also must solve Problem II (i.e.: on the range i = n0 , ..., T ). Remark 3. This result depends on additive time separability, since otherwise we could not "break" the solution at n0 . Additive separability is sufficient for Bellman's principle of optimality. Bellman's principle of optimality allows us to use the trick of solving large Problem I by solving the smaller Problem II, sequentially. Also, since n0 is arbitrary, we can choose to solve the problem n0 = N - 1 first, which is a simple 2-period problem, and then work backwards as follows. Step 1: Set n0 = N - 1, so that Problem II is simply: V (SN -1 , vN -1 ) = inf sup {-hN -1 (SN - SN -1 ) + V (ST )} .
{c N - 1 }

{hN -1 }

21

2.3. DYNAMIC PROGRAMMING FORMULATION Subject to · SN = SN -1 ecN -1 , vN = 0. · SN -1 is given. Step 2: Set n0 = N - 2, so that Problem II is:  

CHAPTER 2. BASIC MODEL

V (SN -2 , vN -2 ) =

-1 {hi }N i=N -2

inf

sup {-hN -2 (SN -1 - SN -2 ) - hN -1 (SN - SN -1 ) + V (ST )} {ci }N -1 
i=N -2

 

(2.26) Subject to · SN = SN -1 ecN -1 , v N = v N -1 - c 2 N -1  0

· SN -1 = SN -2 ecN -2 , vN -1 = vN -2 - c2 N -2  0 · SN -2 , SN -1 are given. According to [Bertsekas, 1976], we can rewrite this as : inf sup - hN -2 (SN -1 - SN -2 ) + sup {-hN -1 (SN - SN -1 ) + V (ST )}
{cN -1 } {c N - 1 }

{hN -2 ,hN -1 }

=

{hN -2 }

inf

sup - hN -2 (SN -1 - SN -2 ) +
{cN -2 }

{hN -1 }{cN -1 }

inf

sup {-hN -1 (SN - SN -1 ) + V (ST )}

(2.26) has already given us the solution to the inside maximization problem, so that we can re-write Step 2 as: inf sup
{c N - 2 }

{hN -2 }

-hN -2 (SN -1 - SN -2 ) + V (SN -1 , vN -1 )

Subject to · SN -1 = SN -2 ecN -2 , vN -1 = vN -2 - c2 N -2  0
2 · SN -2 is given and c2 N -2  d .

Step 3: Using an argument analogous Step 2, in general, the problem in period i can be written as: V (Si , vi ) = inf Subject to: · Si+1 = Si eci , vi+1 = vi - c2 i  0. 22 sup -hi (Si - Si+1 ) + V (Si+1 , vi+1 )
{ci }

{h i }

.

CHAPTER 2. BASIC MODEL · Si is given. Step 4:

2.3. DYNAMIC PROGRAMMING FORMULATION

After going through the successive rounds of single period optimization problems, eventually one reaches the problem in time zero: V0 (S, v ) = inf
2 · S1 = S0 ec0 and c2 0 d .

{h 0 }

sup V (S1 , v1 ) - h0 (S0 - S1 )
{c0 }

.

· S0 = S , v0 = v is given.

2.3.2

Bellman Equation

Therefore, the Bellman Equation can be written as V (Si , vi ) = inf sup V (Si+1 , vi+1 ) - hi (Si+1 - Si )
hi ci

(2.27)

Subject to the conditions
2 · (ln Si+1 - ln Si )2 = c2 i d .

· vi+1 = vi - c2 i  0. The initial boundary conditions are given by the initial values of the state variables, S0 , v0 . Obviously, at the boundary v = 0, we have V (ST , 0) = V (ST ). Note that the terminal price ST is free, as is the number of price moves N . In chapter 4 we will developed a numerical solution for above optimization based on the BrittenNeuberger model.

23

2.3. DYNAMIC PROGRAMMING FORMULATION

CHAPTER 2. BASIC MODEL

24

Chapter 3

Transaction Costs Models
In the analysis of the Britten and Neuberger's model, described in the previous chapter, we have assumed that trading, by buying and selling the underlying, is costless in the sense that we can buy or sell any amount at the given market price without paying an intermediary or affecting the price. In order to have a more realist model, we extend the previous setup to include models with transaction costs. This will allow us to study how several of the model's features are affected by the introduction of transaction costs. One way of introducing transaction costs in the basic model is to interpret the sequence of prices in a permissible price path as bid or ask prices; this point of view is suggested in [Britten and Neuberger, 1996] and [Rebonato, 2004]. In this work, we propose more direct ways to approach the pricing and hedging of contingent claims under transaction costs with the same general assumptions on price paths and the quadratic variation as in the previous chapter. After a short review of how transaction costs appear in financial practice, we proceed to describe two reasonable models of them which fit with our basic model. More precisely, we present an original extension of the basic framework for pricing derivatives in [Britten and Neuberger, 1996] by introducung two models of transaction costs and we show how we can find the option's price bounds in these cases.

3.1

What are Transaction Costs?

Over the past decades, trading has increasingly been regarded as an area for cutting costs. Several alternatives have evolved for placing orders, and models for transaction costs have become increasingly important as a means for evaluating them. Also, the option pricing in the presence of transaction costs has recently become a very popular subject for research; in particular, it represents one way of removing arbitrages in real markets as well as in some models. In financial economics, transaction costs are generally understood as all costs associated with trading 25

3.1. WHAT ARE TRANSACTION COSTS?

CHAPTER 3. TRANSACTION COSTS MODELS

and are categorized according to three groups [Harris, 2003]; explicit costs, implicit costs, and missed trade opportunity costs. · Explicit transaction costs : are costs that are observable and known upfront and directly related to trading such as commissions paid to brokers, fees paid to exchanges, and other transaction based taxes, and also, as in the case of larger trading organizations, the internal costs such as salaries of traders, software, and accounting. · Implicit transaction costs: are also referred to as unobservable transaction costs and include such elements as price impact
1

and the bid/ask spread2 .

· Missed trade opportunity costs: are costs that arise when a trader acts in a suboptimal manner and as a consequence forgoes an opportunity to execute a trade, for example by waiting for the market to move in a favorable direction before sending an order to the market, only to see the market to move in the opposite direction.

3.1.1

More Realistic Investment Trading Model

To render our model more realistic let us assume that moving our wealth from one position to another incurs into some cost. The problem can be formulated in terms of an agent that buys and sells options on the stock of a company. At some point in time, he/she decides to hedge the book or options portfolio against future price fluctuations. The agent would like to determine the least costly strategy taking into account the projected transaction costs due to dynamic hedging. The initial cost of such strategy can be interpreted as the minimal capital reserve needed to protect the portfolio against future market moves. For the sake of simplicity, we will assume that the investor pays the same transaction costs either if he/she buys or sells a given volume of the risky asset. As we have assumed in the previous chapter, we consider a market in which there are two assets available for investment: one risky asset S which pays no dividends and one risk-free asset (bank account) B with zero interest rate. We consider hedging a simple portfolio composed of a path independent European option with maturity T . In addition, we assume the same model as in Chapter 2 which, in particular, allows for a finite, but arbitrarily large, number of trades to occur which are not necessarily equally spaced in time. We then use a no-arbitrage argument to establish an upper and lower bound by means of approximate dynamic hedging strategies in the presence of transaction costs. Two types of transaction costs are considered: · Fixed cost per-trading.
impact is the effect the execution of a sizable order has on the market. While a trader may be able to transact a small order without materially affecting the market price, the larger the order the greater the impact is on the market. This effect is variable in terms of the liquidity conditions of the specific market and depends on factors such as the time-of-day. 2 The bid/ask spread is the difference between the bid price, the price where market participants are willing to buy a financial instrument, and the ask price, the price where market participants are willing to sell a financial instrument.
1 Price

26

CHAPTER 3. TRANSACTION COSTS MODELS · Proportional to the volume of the trading.

3.2. FIXED TRANSACTION COSTS

Both types of transactions costs are very common in markets and, hence, the results we report will be directly applicable to common investors.

3.2

Fixed Transaction Costs

To motivate the subsequent definition of the cost of a strategy under transaction costs, it is helpful to first explain how it is implemented in our model.

3.2.1

The Portfolio of the Hedger

In this section, we are going to find the optimal investment strategy when only fixed transaction costs are present. The main method is similar as the one we introduced in Chapter 2.

Remark 4. The positive fixed transaction cost paid if trading has occurred in the risky security. We assume that re-balancing of the bank account is costless (besides assuming r = 0). If agents do not trade, then we assume that they do not incur in any transaction cost. First, in order to construct the portfolio, assume that at time t = 0, the investor starts his business by having H (S0 , v0 ) units of stock and B0 in the bank account, so the value portfolio including the effect of the transaction cost K can be written as V0 = B0 + H (S0 , v0 )S0 + K, (3.1)

where K is the transaction cost and is a fixed positive number and V0 is a given constant, representing the initial wealth. At time n, the agent's portfolio value is: Vn = Bn-1 + H (Sn-1 , vn-1 )Sn , 0 < n  N.

where Bn-1 is the dollar amounts in the bank account and H (Sn-1 , vn-1 ) is the number of shares held in the portfolio at time n before trading. Then the investor needs to balance his portfolio by using a self-financing strategy, so Bn-1 + H (Sn-1 , vn-1 )Sn = Bn + H (Sn , vn )Sn + K, 27 0 < n  N. (3.2)

3.2. FIXED TRANSACTION COSTS

CHAPTER 3. TRANSACTION COSTS MODELS

By using (3.1) and applying (3.2), recursively, we obtain the total cost of a strategy. V0 = B0 + H (S0 , v0 )S0 + K = B1 + H (S1 , v1 )S1 - H (S0 , v0 )(S1 - S0 ) + 2K
2 1

= B2 + H (S2 , v2 )S2 -
i=0

H (Si , vi )(Si+1 - Si ) +
i=0 N -1

K = ...
N -1

= BN -1 + H (SN -1 , vN -1 )SN -1 -
i=0

H (Si , vi )(Si+1 - Si ) +
i=0

K,

For simplicity assume the investor's payoff at T is V (ST ) = H (SN -1 , vN -1 )SN + BN . This assumes no liquidation costs (see Section 3.2.2 for more dissuasion).

Then the investor's profit/loss for a fixed trading strategy H (., .) becomes:
N -1 N -1

H (, K) = V0 - V (ST ) +
i=0 N -1

H (Si , vi )(Si+1 - Si ) -
i=0

K

= V0 - V (ST ) +
i=0

H (Si , vi )(Si+1 - Si ) - N K.

(3.3)

Remark 5. For simplicity, in this thesis, we assume for all 0 < n  N , H (Sn , vn ) = H (Sn-1 , vn-1 ). In the general case, one should work with K 1H (Sn ,vn )=H (Sn-1 ,vn-1 ) . This could substantially change later optimization developments.

Equation (3.3 helps us to build an inequality which by solving it, one can obtain the optimal strategy. In order to find the no arbitrage interval, we use Definition 6 and apply the same approach as in the previous chapter.

Therefore, in the model with fixed trading costs if there is no arbitrage, we have;
N -1

V0  inf {
H

sup

{V (ST ) -
i=0

H (Si , vi )(Si+1 - Si ) + N K}}.

 P (S0 ,v0 ,d)

Definition 7. For a given fixed transaction K, then
N -1

V (S0 , v0 , K)  inf {
H

sup

{V (ST ) -
i=0

H (Si , vi )(Si+1 - Si ) + N K}}.

(3.4)

 P (S0 ,v0 ,d)

is called the minimum upper bound for the fixed transaction cost K. 28

CHAPTER 3. TRANSACTION COSTS MODELS 3.3. PROPORTIONAL TRANSACTION COSTS Similarly,
N -1

V (S0 , v0 , K)  sup{
H

 P (S0 ,v0 ,d)

inf

{V (ST ) +
i=0

H (Si , vi )(Si+1 - Si ) + N K}}.

(3.5)

is called the maximum lower bound for the fixed transaction cost. Remark 6. The minimum upper bound has the following simple property, which is straightforward to prove. · It is clear that by increasing transaction cost, the upper bound V (S0 , v0 , K) is increasing i.e. if K1  K2 then
3

V (S0 , v0 , K1 )  V (S0 , v0 , K2 ).

3.2.2

Bellman Equation and Optimal Hedging

Even though, the minimum upper bound V (S0 , v0 , K) could be found by a search over paths and strategies, the formulation in equation (3.4) is impracticable. By means of similar arguments as in Chapter 2, the portfolio optimization problem (3.4) can be solved by applying a dynamic programming technique. Towards this end, we define the value function in a recursive way, i.e we can write the problem as the following Bellman equation: V (Si , vi , K) = inf {sup{V (Si+1 , vi+1 , K) - hi (Si+1 - Si ) + K}},
hi ci

(3.6)

where hi = H (Si , vi ). With two state variables Si+1 = Si eci , vi+1 = vi - ci 2 , where ci is the control variable, and we set V (SN , 0, K) = V (ST ). How the computation of V (S0 , v0 , K) is accomplished in practice is shown in the next chapter.

3.3

Proportional Transaction Costs

In this section, we study optimal hedging strategies and bounds on option prices when there are proportional transactions costs on the stock. Namely, if we want to invest 1 dollar, we will have to pay  × 1 dollars as transaction costs. That is, when at the end of the day we want to re-balance our portfolio,
3 Note that everything changes when fixed transaction costs enter the scene. Paying the same fixed amount of money for every transaction, the investor clearly goes to bankruptcy if he/she chooses a continuum of trades. Now he/she has to trade at a carefully chosen discrete sequence of instances.

29

3.3. PROPORTIONAL TRANSACTION COSTS CHAPTER 3. TRANSACTION COSTS MODELS the amount of money obtained from liquidating one position (in order to enter into a new position) from the stock can not all be invested again but part of it has to be used to cover the transaction costs. We look at the re-balancing process in detail in the following.

3.3.1

Hedging Strategies

In this section, we assume that the proportional transaction costs are incurred when shares of the risky asset are traded and on the other hand, it is admitted that trading in the riskless asset is cost-free. Also for simplicity assume that no transaction costs are incurred when a portfolio is established at time 0. But the liquidation costs
4

are incurred when a portfolio is liquidated at the terminal date T .

Remark 7. A trading strategy is defined, as in the previous chapter, as a function H (., .) that determines the number of shares that are held as a function of the price Si and the remaining volatility vi during each position i = 0, ..., N - 1 and in addition to our portfolio, we have Bi = BSi ,vi as a balance of a money market in order to have a self-financing strategy. First, assume V0 is a given constant, representing the initial value of the portfolio which is the investor's initial capital spent at time 0 to have H (S0 , v0 ) units of stock and B0 in the bank account, so that the amount of money spent for this portfolio including the effect of the transaction costs can be written as V0 = B0 + H (S0 , v0 )S0 + |H (S0 , v0 )|S0 = B0 + H (S0 , v0 )S0 , (3.7)

where |H (S0 , v0 )|S0 is the transaction cost is at time 0 which is zero by our first assumption, and 0   < 1 is called a round-trip transaction. At nth trading position, but before readjusting, the portfolio is composed of H (Sn-1 , vn-1 ) shares and Bn-1 in cash. We denote the value of the portfolio before revision at n by
- Vn := Bn-1 + H (Sn-1 , vn-1 )Sn ,

0 < n  N.

(3.8)

For re-balancing purposes, the investor requires H (Sn , vn ) number of shares; therefore, a number of H (Sn , vn ) - H (Sn-1 , vn-1 ) shares need to be traded. In the presence of the proportional transaction costs, the net total dollars exchanged of this operation (the volume of transactions plus the cost of that transaction) is: C (H (Sn , vn ) - H (Sn-1 , vn-1 )) Sn  (H (Sn , vn ) - H (Sn-1 , vn-1 ))Sn +  |H (Sn , vn ) - H (Sn-1 , vn-1 )| Sn . (3.9) An additional term |H (Sn , vn ) - H (Sn-1 , vn-1 )|Sn where 0   < 1, on the right-hand side represents
4 Liquidation

is the process of taking a business' real assets and turning them into cash.

30

CHAPTER 3. TRANSACTION COSTS MODELS 3.3. PROPORTIONAL TRANSACTION COSTS the cost incurred when H (Sn , vn ) - H (Sn-1 , vn-1 ) shares are transacted at n by the purchase (or sell)5 of the asset Sn . Clearly, it reduces the amount of money intended for the riskless position. The case without transaction costs is recovered by letting  = 0.

Remark 8. For a given trading strategy H (., .), the total cost of the investor for one success trading at stage n, using equation (3.9), is given by:  (1 + )H (S , v )S , n n n C (H (Sn , vn ))Sn = (1 - )H (S , v )S ,
n n n

if if

H (Sn , vn )  0, H (Sn , vn ) < 0.

where H (Sn , vn ) is the number of shares bought/sold, with 0   < 1. The above expression satisfies the following properties: · C (H (Sn , vn ))Sn = C (H (Sn , vn ))Sn . · C (H (Sn , vn ) + L(Sn , vn )Sn  C (H (Sn , vn ))Sn + C (L(Sn , vn ))Sn , where H (Sn , vn ) and L(Sn , vn ) are the number of shares bought/sold. · C (H (Sn , vn ))Sn is non-decreasing as a function of H (Sn , vn ). · C (H (Sn , vn ))Sn  H (Sn , vn )Sn and C (0) = 0 6 . Then, right after the nth trading occasion, the investor balances the portfolio by using a self-financing strategy, and the balance of the operation including transaction costs is added to the money-market account and according to the preceding notation for total cost (3.9). The bank account investment at stage n can be written as Bn = Bn-1 - Cn (H (Sn , vn ) - H (Sn-1 , vn-1 )) Sn , or Bn-1 + H (Sn-1 , vn-1 )Sn = Bn + H (Sn , vn )Sn + |H (Sn , vn ) - H (Sn-1 , vn-1 )|Sn , 0 < n  N. (3.10) By using (3.8) and (3.10), we have
- Vn = Bn-1 + H (Sn-1 , vn-1 )Sn

0 < n  N.

= Bn + H (Sn , vn )Sn + |H (Sn , vn ) - H (Sn-1 , vn-1 )|Sn
+ = Vn + |H (Sn , vn ) - H (Sn-1 , vn-1 )|Sn .
5 H (S , v ) - H (S n n n-1 , vn-1 ) is the number of shares bought when H (Sn , vn ) - H (Sn-1 , vn-1 ) > 0 or sold when H (Sn , vn ) - H (Sn-1 , vn-1 ) < 0. 6 0  C (0) = C (H (S , v ) - H (S , v ))S  C (H (S , v ))S - C (H (S , v ))S = 0 so C (0) = 0. n n n n n n n n n n n

31

3.3. PROPORTIONAL TRANSACTION COSTS CHAPTER 3. TRANSACTION COSTS MODELS
+ Note that, Vn is the value of the portfolio after rebalancing. Clearly if H (Sn , vn ) = H (Sn-1 , vn-1 ), + - then Vn = Vn .

By applying (3.10) recursively, we obtain the total cost of a strategy. V0 = B0 + H (S0 , v0 )S0 = B1 + H (S1 , v1 )S1 - H (S0 , v0 )(S1 - S0 ) + |H (S1 , v1 ) - H (S0 , v0 )|S1
1 1

= B2 + H (S2 , v2 )S2 -
i=0

H (Si , vi )(Si+1 - Si ) +
i=0 N -2

|H (Si , vi ) - H (Si+1 , vi+1 )|Si+1 = ...
N -2

= BN -1 + H (SN -1 , vN -1 )SN -1 -
i=0

H (Si , vi )(Si+1 - Si ) +
i=0

|H (Si , vi ) - H (Si+1 , vi+1 )|Si+1 .

Now assume a European path independent option with cash settlement (liquidation), so the writer who delivers the payoff with liquidation receives V (ST ) including liquidation costs in cash at maturity T = N BN -1 + H (SN -1 , vN -1 )SN = VN + |H (SN -1 , vN -1 )|SN . So
N -2 N -2

(3.11)

V0 = BN -1 + H (SN -1 , vN -1 )SN -1 -
i=0

H (Si , vi )(Si+1 - Si ) +
i=0

|H (Si , vi ) - H (Si+1 , vi+1 )|Si+1

= VN - H (SN -1 , vN -1 )SN + H (SN -1 , vN -1 )SN -1 + |H (SN -1 , vN -1 )|SN
N -2 N -2

-
i=0

H (Si , vi )(Si+1 - Si ) +
i=0 N -1

|H (Si , vi ) - H (Si+1 , vi+1 )|Si+1
N -1

= V (ST ) -
i=0

H (Si , vi )(Si+1 - Si ) +
i=0

|H (Si , vi ) - H (Si+1 , vi+1 )|Si+1 .

- + Note that at maturity VN = VN = V (ST ) and H (SN , vN ) = 0.

Definition 8. For a given trading strategy H (., .), the profit/loss of trading in the presence of the proportional transaction costs is
N -1 N -1

H (, ) = V0 - V (ST ) +
i=0

H (Si , vi )(Si+1 - Si ) - 
i=0

|H (Si+1 , vi+1 ) - H (Si , vi )|Si+1 .

(3.12)

3.3.2

No Arbitrage Condition

In this section, again we consider an investor who uses a trading strategy H (., .) to hedge the derivative. Assume that some strategy H (., .) has been fixed, according to (3.12), the investor's profit/loss which 32

CHAPTER 3. TRANSACTION COSTS MODELS 3.3. PROPORTIONAL TRANSACTION COSTS depends on permissible path  is
N -1 N -1

H (, ) = V0 - V (ST ) +
i=0

H (Si , vi )(Si+1 - Si ) -
i=0

|H (Si+1 , vi+1 ) - H (Si , vi )|Si+1 ,

where V0 is the price received for issuing the contingent claim (a positive number) and V (ST ) is the payout of the derivative which appears with a minus sign as the above expression reflects the balances of the seller of the option. The third term is the hedging profit/loss and it could be negative or positive and the last term is the cost of transactions. As we defined (Definition 6), if there is an arbitrage then
N -1 N -1

H (, ) = V0 - V (ST ) +
i=0

H (Si , vi )(Si+1 - Si ) -
i=0

|H (Si+1 , vi+1 ) - H (Si , vi )|Si+1  0. (3.13)

where the inequality is strict for at least one permissible path.

Remark 9. If the condition in equation (3.13) is satisfied, the seller of the option would certainly receive
N -1

at least as much, and sometimes more than what he has to pay at the end, V (ST )+
i=0

|H (Si+1 , vi+1 ) -

H (Si , vi )|. Now we set up the arbitrage bound by assuming a fixed trading strategy, say H  (., .). This trading will be a deterministic function of all the possible values of the remaining volatility and stock price. Since we do not want to allow arbitrage strategies, it follows that the price that we obtain today, V0 , cannot be larger than the maximum cost incurred in paying the final payoff of the claim, and accumulating the hedging profits/losses for the chosen strategy over all the permissible paths,  :
N -1 N -1

V0 <

sup

{V (ST ) -
i=0

H  (Si , vi )(Si+1 - Si ) +
i=0

|H  (Si+1 , vi+1 ) - H  (Si , vi )|Si+1 }. (3.14)

 P (S0 ,v0 ,d)

For the next step, we want equation (3.14) to hold for all trading strategies. Therefore, the price we receive from the sale of the option today must be no greater than even the lowest possible value of the quantity over all the possible trading strategies:
N -1 N -1

V0  inf {
H

sup

{V (ST ) -
i=0

H (Si , vi )(Si+1 - Si ) +
i=0

|H (Si+1 , vi+1 ) - H (Si , vi )|Si+1 }},

 P (S0 ,v0 ,d)

where the right hand side of the equation is the minimum upper bound for the option price V0 and we 33

3.3. PROPORTIONAL TRANSACTION COSTS CHAPTER 3. TRANSACTION COSTS MODELS denote it as V (S0 , v0 , ).

N -1

N -1

V (S0 , v0 , )  inf {
H

sup

{V (ST )-
i=0

H (Si , vi )(Si+1 -Si )+
i=0

|H (Si+1 , vi+1 )-H (Si , vi )|Si+1 }}. (3.15)

 P (S0 ,v0 ,d)

3.3.3

Dynamic Programming and Bellman Equation

The minimum upper bound in Equation (3.15) could in principle be found by a search over paths and strategies. While conceptually correct, this approach is computationally expensive and impracticable, because it requires a search over all possible paths and hedging strategies. In order to make the problem more tractable, as we mentioned in Chapter 2, we can apply dynamic programming. Note that, since the current price of the asset, S (0), and the quadratic variation v0 , determine both the permissible price sequences, P (S0 , v0 , d), and the trading strategies, H (., .), the function V (S0 , v0 , ) defined in (3.15) provides the minimum upper bound as a function S0 and v0 . More precisely, V (S0 , v0 , ) is a function with domain given by all the possible values of S (0) and v0 . By following the same processes as in the previous chapter, we can transform equation (3.15) into: V (Si , vi , ) = inf {sup{V (Si+1 , vi+1 , ) - hi (Si+1 - Si ) + |hi+1 - hi |Si+1 }},
hi ci

(3.16)

where hi+1 = H (Si+1 , vi+1 ) is known, and V (SN , 0, ) = V (ST ).

Remark 10. To move from Equation (3.15) to the Bellman Equation (3.16) several small but important changes have taken place. a) The sup is no longer taken over paths, it is over at the next step, i.e. Si+1 and vi+1 . b) For a given (Si , vi ) we have a finite number of possible terminal destinations (Si+1 , vi+1 ) to keep track of, instead of a multitude of connecting paths. c) The sum over time-steps of the transaction costs terms and the cost of the hedging have disappeared, since we are now dealing with a single time-step. d) The term V (Si+1 , vi+1 , ) no longer indicates the terminal pay-out, but simply the value of the minimum upper bound itself at the next time-step. Let us now implicitly define a variable ci by the relationship: Si+1 = Si eci , vi+1 = vi - c2 i. 34

CHAPTER 3. TRANSACTION COSTS MODELS 3.3. PROPORTIONAL TRANSACTION COSTS Therefore Equation (3.16) can be rewritten as
ci ci V (Si , vi , ) = inf {sup{V (Si eci , vi - c2 i , ) - hi Si (e - 1) + |hi+1 - hi |Si e }} hi ci

Subject to the conditions: c2 i  vi ,
2 c2 i d .

The initial boundary condition are given by the initial values of the state variable, S0 and v0 . The terminal boundary condition is V (Si , 0, ) = V (ST ) without including the liquidations costs. Note that the terminal price ST is free, as is the number of price moves N . The above implementation can be developed as a numerical approach for valuing European options, in the following chapter we will describe an interesting algorithm for this purpose introduced by Britten-Neuberger.

35

3.3. PROPORTIONAL TRANSACTION COSTS CHAPTER 3. TRANSACTION COSTS MODELS

36

Chapter 4

Numerical Implementation
In Chapter 2, we described how the price of the option can be found by solving recursively the following dynamic optimization problem:
ci V (Si , vi ) = inf {sup{V (Si eci , vi - c2 i ) - hi Si (e - 1)}}. hi ci

As we mentioned, even though we cannot solve for V (Si , vi ) analytically, we can compute this quantity numerically. In this chapter, we describe a numerical implementation to evaluate the bounds described in previous chapters. The numerical approach is based on the method described in [Britten and Neuberger, 1996]. We investigate the upper bound and the lower bound by using a kind of multinomial tree that allows us to introduce the necessary constraints of the price path. We also briefly describe the optimization methods that we use in this thesis.

4.1

Jones-Neuberger Algorithm

We will refer to the numerical algorithm to compute the minimum upper bound V (S0 , v0 )1 , which is proposed by Britten-Jones and Neuberger, as the J-N Algorithm (Jones-Neuberger Algorithm). In the present chapter, we provide implementation details as well as a conceptual analysis of the computations being performed. The J-N algorithm that computes V (S0 , v0 ) in both instances, with and without transaction costs, makes use of the Bellman's equation. Let us first consider the problem in the case of no transaction costs. In the general case, namely the case with transaction costs, the algorithm remains the same with only small
1 In the case of V (S , v ), the algorithm remains the same, we can evaluate the maximum lower bound by using 0 0 V (Z ) = -V (-Z ) where Z is the given payoff.

37

4.1. JONES-NEUBERGER ALGORITHM changes in the optimization constraint.

CHAPTER 4. NUMERICAL IMPLEMENTATION

To see how we can implement the bound V (Si , vi ), we need to recall Bellman's equation,
ci V (Si , vi ) = min{max{V (Si eci , vi - c2 i ) - hi Si (e - 1)}}. hi ci

We use backward induction as one method of solving the above dynamic optimization (Appendix D). If we are working from i = T to today's i = 0, V (Si , vi ) is the new value of the option that we have to determine. V (Si eci , vi - c2 i ) are option's values that have been already calculated, note that we use the fact that V (ST ) at T is known2 . Since at each stage, we are holding a position hi ; therefore, the change in the value of the portfolio,
ci V (Si eci , vj - c2 i ) - hi Si (e - 1),

(4.1)

is a linear combination of the stock price Si and V (Si eci , vj - c2 i ). So it seems that we have a piecewise linear optimization where decision variable is hi . What we do not know is the value of hi in (4.1), i.e. the amount of stock to be held at i. But we do know that V (Si , vi ) must be an upper bound. So, an optimization possibility is to find the slope of the line which is hi , such that V (Si , vi ) attains a maximum. Before providing the method of optimization, we have to construct the discretization of the permissible
N path {Si }N i=0 and the remaining quadratic variation {vi }i=0 . In sections (4.1.1)-(4.1.4), we provide the

necessary details to build the multinomial tree which is going to be used for our optimization problem.

4.1.1

The Mesh of the J-N Algorithm

As a first introduction to the methodology, we will build a tree which is slightly different than the traditional binomial tree. Recall that in the traditional binomial tree (Appendix B), one normally builds the tree by specifying a time-step, t, and volatility  for a given S0 . There are two possibilities for the next stock price,  Sup = S0 exp  t,  Sdown = S0 exp -  t.

and

According to the J-N algorithm, the remaining quadratic variation vj , where j is a positive integer, is mapped onto the x-axis. This should be contrasted with the usual approach where the time variable is the one mapped onto the x-axis. Then, we set up the grid similarly to the traditional binomial in the following way.
2 The set up is quite similar to the usual Block-Scholes framework where the initial and boundary conditions allow to solve the second order partial differential equation, the J-N numerical method is very similar to a binomial tree.

38

CHAPTER 4. NUMERICAL IMPLEMENTATION

4.1. JONES-NEUBERGER ALGORITHM

We consider a grid of points of the form (i, j ), j represents the label of the remaining volatility vj and is non-negative and i is the label of the price path Si and can be positive or negative. If we use N steps in the tree, the domain of j is [0, N ] while the domain of i is [-N, N ]. In figure (4.1), a 11-step tree is displayed.

Figure 4.1: The sample grid with N = 11 steps in the tree construction, in this case for any pair (i, j ), i  [-11, 11] and j  [0, 11]. Starting from (0, 0) and end up to (i, 11) where i = -11, ..., 11. The following shows a Matlab function to create the grid 3 . The Matlab Code to Create the Grid function [i] = matrixI(N) i = (2*N+1)ones(N+1,N+1); i(:,1) = (-N:2:N)'; for c = 2:N+1 a = 1; I(c) = (N-(c-1)); for e = -I(c):2:I(c) i(a,c)= e; a = a+1; end end
3 In

this thesis, we make use of Matlab for the computer implementation.

39

4.1. JONES-NEUBERGER ALGORITHM

CHAPTER 4. NUMERICAL IMPLEMENTATION

4.1.2

J-N Discretization for a Special Case
th

After building the grid, we construct the basic building block for our tree. Assume we are working in the (i - 1) step where the price stock is denoted by Si-1 ; what are the possible successors of Si ?

In Chapter 2, we introduced the control variable ci such that Si = Si-1 exp (ci-1 ).
N -1 To discretize {Si }N i=0 , we assume all control variables {ci }i=0 are equal to some arbitrary step size  .

The discrete grid of stock values is given by: Si = S0 exp (i ), where i can be positive or negative. In order to define the discrete set of values for the variables vj , we use the definition of the remaining quadratic variation (Definition 3). First, we set vN2 = 0 and use backward induction, the discretization for the quadratic variation is given by vj = (N2 - j ) 2 where j  0 and at maturity T , j = N2 . & v 0 = N2  2 , (4.3) (4.2)

4.1.3

J-N Discretization for the General Case

In a binomial tree, starting from any point (i, j ), the next point reached must be (i + 1, j - 1) or (i - 1, j - 1). The value of the claim at (i, j ) is then computed from the value at (., j - 1). In the J-N tree, the same procedure applies but with one difference that is related to the following question: how far the investor can wait until the next trading? To answer this question, recall that from Chapter 2, the investor can trade whenever the following condition is satisfied; |ln Si+1 - ln Si |  d. If the trader is in the lattice point (i, j ), i is the next point for the price path  such that |ln Si - ln Si | = ln S0 e(i ) - ln S0 ei = |(i - i) |  d. It then follows that -d  n  d where i - i = n and n = ±1, .., ± d  . Therefore we have the first 40

CHAPTER 4. NUMERICAL IMPLEMENTATION constraint given by; n2  d2 . 2

4.1. JONES-NEUBERGER ALGORITHM

(4.4)


In addition to the condition (4.4), by making use of Si = Si en

and vj = (N - j ) 2 we have
2

vj = vj - (ln Si - ln Si ) vj = vj - (n )
2

(N2 - j ) 2 = (N2 - j - n2 ) 2  0. So, we arrive at a second constraint, which is imposed to maintain the non-negative character of the remaining quadratic variation, n2  N2 - j. The above results (4.5) and (4.4) correspond to n2  min(N2 - j, where n is a non-zero integer. The length N of the discretized trajectories satisfies N1  N  N2 , where N1 is the largest integer such that N1 d2  v0 . Therefore, in order to account for the possibility of jumps d, from a given parent node (i, j ), we modify the possible children nodes as (i + n, j + n2 ), with n a positive or negative (but not zero) integer which satisfies (4.6). Figure 4.2 illustrates all possible children nodes for parent node (Si , vj ) when n = 3. d2 ), 2 (4.6) (4.5)

Figure 4.2: This figure displays a very simple example for all destination points form node (i, j ) when n = 3.

41

4.1. JONES-NEUBERGER ALGORITHM

CHAPTER 4. NUMERICAL IMPLEMENTATION

4.1.4

Option Price at Each Stage in J-N Algorithm

In this section, we explain how one can obtain the option price at each stage j . Option Price At Maturity j = N2 : According to Definition 3, at expiration, there is no quadratic variation left. Therefore, because of the construction of the price path, we will not be able to move up any more. So, we must simply have the terminal payoff condition and it is not dependent on which node we might have arrived from; V (ST , 0) = V (ST ) = max (ST - K, 0). Option Price At j = N2 - 1: In the second to last step which is labeled by j = N2 - 1 in the grid, everything must also look exactly the same as in the simple binomial tree; because on any node (., N2 - 1), we only have one unit of quadratic variation  2 left to play before consuming the total quadratic variation v (Figure 4.3). This allows us to only move either to node (i + 1, N2 ) or (i - 1, N2 ). In this stage, the option price of the node (., N2 - 1) can be found as a linear combination of its value (the same as in the usual binomial tree) at nodes V (Si+1 ) and V (Si-1 ). (4.7)

Figure 4.3: In stage 1, we can find the value of payoff V (ST , 0) simply as max(ST - K, 0), then, in stage 2, we can find the value by using the information from stage 1. 42

CHAPTER 4. NUMERICAL IMPLEMENTATION

4.1. JONES-NEUBERGER ALGORITHM

Remark 11. Note that, we might have arrived at a node (i, N2 - 1) directly either from the root (i - n, (N2 - 1) - n2 ), if such big jumps had been allowed by the d constraint, or from third stage to the last (i - 1, N2 - 2).

Option Price At j > N2 - 3:

In the last three steps, the possible values of the option are acting exactly the same as in the simple binomial case because the unit of quadratic variation that is left does not allow jumps. According to (4.5), we need at least n2 = 4 to have a big jump (i + 4, 0) (Figure 4.3).

The procedure of the optimization truly becomes different when we move to the fourth to last step and beyond until we reach the root. Because for any given node (i, j ), there are a multiplicity of possible arrival points (i + n, j + n2 ) (Figure 4.4).

Figure 4.4: This figure shows, when j  (N2 - 4), there are multiple destination points.

In general, one can use the following Matlab code in order to find all destination nodes from a certain node (i, j ).

43

4.1. JONES-NEUBERGER ALGORITHM

CHAPTER 4. NUMERICAL IMPLEMENTATION

The Matlab Function to Find all Destination Nodes function [Value1, Stock1] = destpoint(n1,time,h,Stock0,Value,delta,i) for n=-n1:n1 if n=0 if time-1>=n ^2 [tf, index] = ismember(i(h,time)+n,i(:,time-n 2)); Value1(p) = Value(index,time-n 2); Stock1(p) = Stock0*exp((i(h,time)+n)delta); p = p+1; end end end

4.1.5

Optimal Hedging and Convex Hull

With a multiplicity of possible destination nodes, we can not value V (Si , vj , .) as a linear combination of its values at the destination nodes. We need to find a hedge ratio which minimizes the maximum possible loss. At this point we need to perform a minimax optimization. d V (Si , vi ) = min{max{V (Si en , vi - (n )2 ) - hSi (en - 1)}}, n = ±1, .., ± , n h  where h = hi . V (Si en , vi - (n )2 ) are known option values (that have already been calculated), so the optimization is a linear optimization. We use two methods of optimization in this thesis, Convex Hull and Piecewise linear optimization.

Convex Hull In order to solve the above optimization numerically, Britten-Neuberger used a method which they called Convex Hull : ~ is the optimal hedge, then If h ~ i (ek - 1), V k (Si , vi ) = V (Si ek , vi - (k )2 ) - hS k = ±1, ±2, ... ± n. (4.8)

We do know V (Si , vi ) must be the upper bound, so there is a k such that V k (Si , vi )  V k (Si , vi ), 44 k = ±1, ±2, ... ± n.

CHAPTER 4. NUMERICAL IMPLEMENTATION This implies that

4.1. JONES-NEUBERGER ALGORITHM

k  2 k 2 ~  V (Si e , vi - (k ) ) - V (Si e , vi - (k ) ) h k  k  Si e - Si e V (Si+k , vi-k 2 ) - V (Si+k , vi-k2 ) = . Si+k - Si+k

If we draw all the destination asset prices Si+k with respect to their values V (Si+k , .) and find a line which passes through two distinct (destination) points such that all (destination) points lie at this line or below of this line (this line is called the Hull line in [Britten and Neuberger, 1996]), then the slope  of the Hull line is the desired optimal hedge (see the dash line in Figure 4.5). Assume that this line is the line that passes through the points (V m , Sm ) and (V m , Sm ), (Figure 4.5). So, = V (Si+k , vi-k 2 ) - V (Si+k , vi-k2 ) V (Sm ) - V (Sm )  . Sm - Sm Si+k - Si+k (4.9)

Figure 4.5: The slope of the dashed line is the optimal hedge hi and V  (Si ) is the optimal value of the option at Si at node (i,.). The following lemma guarantees that the optimal value of the function V (i, j ) is the value of V  (Figure 4.5), where the Hull line crosses the vertical line through the current price Si . Then as indicated above, the hedging ration , which is the value of the slope of the hull line at that point, is the optimal hedging strategy according to (4.9). So in order to find the optimal hedging, it is enough to find the hull line, the slope of the line at that point (Si , V (Si , vi )) is the hedging hi . This method is called convex hull optimization 4 .

4 The

computer code is provided in an Appendix.

45

4.1. JONES-NEUBERGER ALGORITHM Lemma 1. Let g (.) be a convex function then

CHAPTER 4. NUMERICAL IMPLEMENTATION

g (x) = min {max{g (y ) - h (y - x)}},
h R y

(4.10)

where y  [xe-d , xed ]. Proof. We obviously have
h Rxe-d y xed

min

max

{g (y ) - h (y - x)}  g (x).

(4.11)

for all h, since the value at the right hand side is achieved at the left hand side for y = x. So to complete the proof it suffices to show that there exists h such that g (y ) - h(y - x)  g (x), for all y . Clearly, any sub gradient
g (y )-g (x) y -x

(4.12)

of g at x can serve as such.

Piecewise Linear Although the convex hull method is a very fast and efficient way to solve the previous optimization we have not used it for the case when we include transaction costs. The reason for this is mainly due that some of the numerical results were not quite as good as we expected; moreover, we were not able to extend the technique to the case of transaction costs in a nice and convenient way. All in all, we ended up using the piecewise linear optimization method. In general we have the following problem to be optimized [Tsitsiklis, 1997]: V (Si , vi ) = min{max{V (Si ek , vi - (k )2 ) - hSi (ek - 1)}}, k = ±1, ±2, ... ± n
h k

(4.13)

~ i (ek - 1)} is equal to the smallest number z that satisfies: Note that max{V (Si ek , vi - (k )2 ) - hS
k

z  V (Si ek , vi - (k )2 ) - hSi (ek - 1), for all

k = ±1, ±2, ... ± n.

For this reason, the optimization problem is equivalent to the linear programming problem minimize z Subject to z  V (Si ek , vi - (k )2 ) - hSi (ek - 1), for all where the decision variables are z and h. The following Matlab function shows the code of above constraint. 46 k = ±1, ±2, ... ± n, (4.14)

CHAPTER 4. NUMERICAL IMPLEMENTATION The Matlab function for optimization Equation 4.13

4.1. JONES-NEUBERGER ALGORITHM

function [V,Vh] = opthedge(Value1,Stock1,Stockhtime) f1 = [1; 0]; b=cat(2,-Value1); col1 =cat(2,-ones(1,l(Value1))); col2 = cat(2,-(Stock1-Stockhtime)); A=cat(2,col1',col2'); lb = [-10 4;-10 4]; ub =[10 4;10 4]; [x,fval] = linprog(f1,A,b,[],[],lb,ub); Vh = x(2); V = x(1); % optimization % optimal hedging % optimal value
   

%f1 is z % response for Ax<b as the constraint

% response for Ax<b as the constraint % lb and ub are upper and lower for outputs

In the presence of transaction costs the approach is the same as above (4.13) V (Si , vi , ) = min{max{V (Si ek , vi - (k )2 ) - hSi (ek - 1) + |h - gk |Si+1 }}.
h k

(4.15)

gk is known (it is calculated in the previous stage, i - 1). Let |h - gk | = yk , our first reformulation yields V (Si , vj , ) = min{max{V (Si ek , vj - (k )2 ) - hSi (ek - 1) +  .yk .Si+1 }}.
h k

Subject to h - gk  yk , -h + gk  yk . And, by the same process we applied in (4.13), minimum z Subject to V (Si ek , vj - (k )2 ) - hSi (ek - 1) + yk Si+1  z, h - gk  yk , -h + gk  yk .

47

4.1. JONES-NEUBERGER ALGORITHM

CHAPTER 4. NUMERICAL IMPLEMENTATION

The Matlab Codes to Create Necessary Condition for Optimization function[V,Vh] = opthedgetrans(Value1,Stock1,xi1,alpha,Stockhtime) K1 = length(Value1); f1 = cat(2,1 ,0,zeros(1,K1)); b = cat(2,-Value1,xi1,-xi1); A2 = cat(2,zeros(K1,1),ones(K1,1),-eye(K1)); A3 = cat(2,zeros(K1,1),-ones(K1,1),-eye(K1)); A = cat(1,A1,A2,A3); lb = cat(2,-10 4,-10 4,zeros(1,K1)); ub = cat(2,10 4,10 4,104ones(1,K1)); [x,fval] = linprog(f1,A,b,[],[],lb,ub); Vh = x(2); V = fval; % optimization % optimal hedging % optimal value % A for Ax<b, included the absolute condition %f1 is z % b for Ax<b, included the absolute condition

A1 = cat(2,-ones(K1,1),(-(Stock1-Stockhtime))',alpha.*diag(Stock1));

We used a Matlab optimization from the optimization toolbox by the name of linprog. There are three types of algorithms that are being implemented in the linprog.m; a simplex algorithm, an active-set algorithm, a primal-dual interior point method [Geletu, 2007]. We make use of linprog along the destination points V (i + n, j + n2 ), we can then move backwards the same procedure all the way to the root. In the next chapter, we present some numerical results obtained by using the algorithms described in the present chapter.

48

Chapter 5

Numerical Analysis
In this chapter, we implement two numerical tests of the J-N algorithm to show some practical aspects of it. First, we compute the arbitrage bounds of the option price on the stock in some artificial permissible paths with the J-N algorithm and then we study the effects of transaction costs in both cases with fixed and proportional transaction costs. In the second part, by means of the J-N algorithm, we find the option's price for a real data set by somehow forecasting the quadratic variation from historical data and then comparing the results with actual market prices.

5.1

Artificial Paths and General Results

As a first step, we compute numerical arbitrage bounds for a two-month European call option with strike of $1 on a stock that pays no dividends, with current price $1 and the volatility of the stock is taken to be equal to  = 20% per year, so the quadratic variation is v0 =  2 T = 0.04  2/12. We apply the numerical algorithm described in the previous chapter to our base case model when no transaction costs exist. Recall that for a given N2 which is the maximum number of steps taken in the J-N tree, the minimum return  = min | ln(Si+1 ) - ln(Si )| can be obtained by
0iN 1

=

v0 = N2

0.0067 . N2

Remark 12. The values, which are taken in this section, such as the current price and the strike price, are for illustrative purposes only and they do not reflect actual values in the real markets. Remark 13. Option value in figures means the minimum upper bound price V or the maximum lower bound price V of an option.
1 According

to Section 4.1.2 Chapter 4, v0 = N2  2 where  is the minimum step size that one can take.

49

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS

CHAPTER 5. NUMERICAL ANALYSIS

5.1.1
2

Comparison to Black-Scholes
d 

If no jumps are allowed, i.e.

= 1 (we call this ratio: the jump units) then the Black-Scholes price

is $0.033 when S0 = K = 1 with  = 0.2. Figure 5.1 displays the minimum upper bound price of

the option as a function of N2 . As we see, the option price converges to the Black-Scholes price as N2 increases. According to equation (4.3), by increasing N2 , we are reducing  . So as a clear result, when  decreases, the value of the option increases and tends to the Black-Scholes price.

Figure 5.1: The figure shows the model's price, when the jump unit ( d  ) = 1, approaches to the BlackScholes price as the number of steps N2 increases. One may wonder what happens if when
d  d 

> 1. Figure 5.2 shows the convergence behavior of the option price

= 3, 5 with N2 ranging from 10 to 200. When the jump units is greater than one, it seems that

we have convergence if N2 increases but the value of the option does not converge to Black-Scholes price due to jumps. Also, for a given v0 and a fixed number of steps N2 in the J-N tree, by increasing d  , due to the fact that  is fixed, we are increasing the maximum jump size d, and we can see that the value of the option increases (Figure 5.2). As we can see, when N2 = 10, in the case of the jump units are 3 and 5, the minimum upper bounds are  equal, because according to equation (4.5), the maximum jump that the algorithm can take is N2  3. Therefore, although we can run the program for the jump unit 5, this jump does not really take into
2 Formally the Black-Scholes model is not nested in our model. This is due to the fact that Black and Scholes is a continuous time model while we consider a discrete time model. Nevertheless one can overcome this technical difference using the fact the Black-Scholes model is a limit of discrete time models.

50

CHAPTER 5. NUMERICAL ANALYSIS

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS

account and thus does not affect the price of the option in the J-N algorithm.

Figure 5.2: Convergence of V as a function N2 for different values of d .

5.1.2

Arbitrage Bounds: Basic Model

In our empirical work, we shall use the J-N algorithm to find numerically the arbitrage bounds of the option price. First, we derive arbitrage bounds in the basic model (Chapter 2) for different jump units with the same set up as above i.e. K = 1,  = 20% per year. We calculate the option values for different starting levels of the stock price S0 , with N2 = 100 steps in the tree (trading around twice a day). Figure 5.3 displays the arbitrage bounds for different jump units
3 d 

= 3, 7 and apparently as the

maximum jump is decreasing, we can see that the upper and lower bounds are shrinking to the case without jumps. Also we notice that the arbitrage bounds are very narrow for the higher starting level S0 . Therefore it seems that the jumps have less of an effect on the bound of the option's prices for the higher stock values. Again, for a fixed S0 , V (S0 , v0 ) increases as
d 

increases (Figure 5.3).

Table 5.1 illustrates no arbitrage interval with different jump units as the level of starting S0 changes.

3 Recall

that ( d ) is representing the jump units. 

51

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS

CHAPTER 5. NUMERICAL ANALYSIS

Figure 5.3: The upper and lower bounds for the basic model: the plot shows that by reducing the jump units, for example, from 7 to 1, the option price bounds are shrinking to the Black-Schoes price.

Although, most of the analysis in this thesis was done for a European payoff max(ST - K, 0), the general approach clearly applies to derivatives with different payoffs, Figure 5.5 shows the results for some known combinations of calls and puts. First, we use a call Butterfly payoff [Hull, 1997], which is a combination of long call with strike K1 = 0.958 and one long put with K2 = 1.066. Its payoff is:  max(S - K , 0), T 1 Vb = max(K - S , 0),
2 T

if ST  if ST >

K2 +K1 , 2 K2 +K1 . 2

(5.1)

Also we consider a Long Strangle [Hull, 1997], which is long one put option with a lower strike K1 = 0.958 price and long one call option at a higher strike price K2 = 1.066 to calculate the minimum upper bound.  max(K - S , 0), 1 T Vl = max(S - K , 0),
T 2

if ST  if ST >

K2 +K1 , 2 K2 +K1 . 2

(5.2)

As it can be observed in Figure 5.5, the shape of bounds are very similar to their payoff at maturity T (Figure 5.4) in both cases. The area between two strikes K1 = 0.958 and K2 = 1.066 becomes bigger for an option with payoff Vl and Vb . And again by increasing the jump units, the arbitrage bounds of 52

CHAPTER 5. NUMERICAL ANALYSIS
d 

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS 5 [V , V ] [0.0002,0.0044] [0.0110,0.0199] [0.0272,0.0376] [0.0554,0.0647] [0.0723,0.0811] [0.1620,0.1654] 7 [V , V ] [0,0.0055] [0.0100,0.0215] [0.0277,0.0392] [0.0544,0.0664] [0.0713,0.0827] [0.1619,0.1666] 9 [V , V ] [0,0.0067] [0.0082,0.0232] [0.0268,0.0407] [0.0525,0.0681] [0.0690,0.0844] [0.1618,0.1677]

S0 0.879 0.958 1 1.044 1.066 1.162

1 [V , V ] 0.0019 0.0151 0.0327 0.0598 0.0764 0.1631

3 [V , V ] [0.0008,0.0032] [0.0129,0.0178] [0.0305,0.0354] [0.0574,0.0683] [0.0492,0.0790] [0.1623,0.1642]

Table 5.1: This table shows no arbitrage intervals for different jump units when the staring level S0 increases.

the option price become wider (Figure 5.5)).

Figure 5.4: Left-hand side figure shows the payoff for a call butterfly and right-hand side figure shows the payoff for a long strangle with a lower strike K1 = 0.958 and a higher strike price K2 = 1.066. Table 5.2 and 5.3 show no arbitrage intervals (upper and lower bounds) with jump units 1,3,5 and 7 for a derivative with payoff 5.1 and 5.2 respectively.

53

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS

CHAPTER 5. NUMERICAL ANALYSIS

Figure 5.5: Left-hand side graph shows the arbitrage bounds for the basic model with a call butterfly payoff (equation (5.1)) with a lower strike K1 = 0.958 and higher strike K2 = 1.066. Right-hand side plot shows the arbitrage bounds for a long strangle (equation (5.2)) with a long position in strike K1 = 0.958 and one long put at strike K2 = 1.066.

d 

S0 0.879 0.958 1 1.044 1.066 1.162

1 [V , V ] 0.0848 0.0348 0.0257 0.0306 0.0383 0.1030

3 [V , V ] [0.0829,0.0870] [0.0320,0.0378] [0.0233,0.1677] [0.0278,0.0336] [0.0354,0.0414] [0.1007,0.1056]

5 [V , V ] [0.0815,0.0889] [0.0295,0.0400] [0.0209,0.0307] [0.0254,0.0365] [0.0327,0.0441] [0.0991,0.1285]

7 [V , V ] [0.0805,0.0961] [0.0273,0.0416] [0.0196,0.0314] [0.0157,0.0370] [0.0304,0.0452] [0.0978,0.1092]

9 [V , V ] [0.0462,0.0998] [0.0264,0.0424] [0.0192,0.0315] [0.0227,0.0373] [0.0293,0.0459] [0.0969,0.1114]

Table 5.2: This table shows no arbitrage interval for different jump units when the staring level S0 increases in the case of a butterfly payoff (5.1)

d 

S0 0.879 0.958 1 1.044 1.066 1.162

1 [V , V ] 0.0032 0.0107 0.0134 0.0128 0.0115 0.0038

3 [V , V ] [0.0015,0.0054] [0.0059,0.0296] [0.0079,0.0189] [0.0072,0.0185] [0.0062,0.0173] [0.0017,0.0065]

5 [V , V ] [0,0.0076] [0.0024,0.0203] [0.0033,0.0235] [0.0030,0.0233] [0.0026,0.0221] [0.0006,0.0149]

7 [V , V ] [0,0.0098] [0,0.0235] [0,0.0267] [0,0.0262] [0,0.0258] [0,0.0119]

9 [V , V ] [0,00.0115] [0,0.0271] [0,0.0280] [0,0.0288] [0,0.0297] [0,0.0139]

Table 5.3: This table shows no arbitrage interval for different jump units when the staring level S0 increases in the case of of a strangle payoff (5.2).

54

CHAPTER 5. NUMERICAL ANALYSIS

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS

5.1.3

Arbitrage Bounds: Transaction Costs Model

In the transaction costs framework, we study the effect of a fixed transaction cost rate and a proportional transaction costs on the arbitrage bounds and compare the results with the ones without transaction costs. Part I: Fixed Transaction Costs In the simple case, fixed transaction costs, we test the effect of this transaction cost in the arbitrage bounds of the option price. As we expected (see equation (3.4) compared with (2.27)), the minimum upper bound in the case of fixed transaction costs is much higher than the minimum upper bound in the J-N framework without transaction costs. In Figure 5.6, we implement the bounds for a fixed unit
d 

= 3 and with fixed transaction costs K =

0.0001, 0.001 (as we mentioned in Remark 12, we are just working with some artificial paths, so the fixed transaction costs K are not realist values) with different starting level S0 and N2 = 70. So we allow to have a maximum of 70 hedging times, as a result one could pay a maximum N2  K = 0.07 more in the case of K = 0.001.

Figure 5.6: Upper and lower bounds for the fixed transaction costs K: the minimum upper bound for the option value is increasing for a fixed S0 and fixed unit-jump=3 when K takes the values 0 and 0.0001. With respect to the arbitrage bounds in the basic model, the lower bound decreases while the upper bounds increases due to the effect of the fix transaction costs. Also, as we increase the rate K, the region between the lower and upper curves becomes large (Figure 5.7). 55

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS

CHAPTER 5. NUMERICAL ANALYSIS

Figure 5.7: Upper and lower bounds become wider by increasing the rate K with the fixed jump units d  = 3.

Note that in our implementation, we use a single call option to find the arbitrage interval, therefore; the bounds that obtained are very small. Then, we could not set more realistic fixed transaction costs for the model. Just assume that fixed transaction costs K = $10 per transaction, so at the end of the day, the investor may have to pay a maximum of $700 for the option that has the payoff max(ST - 1, 0). In order to have a realistic framework, assume one can buy a package of 1000 call options, then the bounds for the fixed transaction K = $10 can be obtained as in Figure 5.8.

Remark 14. If one buys a contract (package) which includes c of call options so the payoff of this contract at maturity T will be c V (ST ), so the minimum upper bound is
N -1

V (S0 , v0 , KR ) = inf
Hc

sup
 P (S0 ,v0 ,d)

c V (ST ) -
i=0 N -1

Hc (Si , vi )(Si+1 - Si ) + N KR 1 KR Hc (Si , vi )(Si+1 - Si ) + N c c KR }} c

= c inf
Hc

sup
 P (S0 ,v0 ,d)

V (ST ) -
i=0 N -1

= c inf {
H

sup

{V (ST ) -
i=0

H (Si , vi )(Si+1 - Si ) + N

 P (S0 ,v0 ,d)

1 = c V (S0 , v0 , KR ) = cV (S0 , v0 , K) c 56

CHAPTER 5. NUMERICAL ANALYSIS

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS

Figure 5.8: This plot shows the option bounds when the fixed transaction cost is $10 by assuming 1000 call options. where KR is the value of a realistic fixed transaction cost (per stock transaction) and K 
KR c

represents

the fixed cost per stock transaction used in the thesis. This computation justifies our use of small values of K when performing numerical experiments corresponding to bounds for a single call option. As a example let assume that KR = 10$ per transaction for a package with c = 100, this can be transfered to K = 0.1$ in the case of one call option. Part II: Proportional Transaction Costs Let us start the analysis of this part with a question. What if we had followed the basic framework with the same assumptions, but paid the proportional transaction costs? Of course, one would expect the higher minimum upper bound as a results of the transaction costs according to equation (3.16). A. Convegence of the Model: First of all, we verify numerically our results by examining the behavior of the minimum upper bound as a function of the quadratic variation in the basic model and then with the proportional transaction costs. The results indicate that the minimum upper bound for the option price increases as the quadratic varication growths in both cases, with and without transaction (Figure 5.9). Then, we test the convergence of the proportional transaction cost model as the number of trades increases. Table 5.4 illustrates the relation between the maximum number of steps N2 and the minimum upper bound V (S0 , v0 , ) (see equation (3.16)), where  is the round-trip and 0   < 1 , for different 57

5.1. ARTIFICIAL PATHS AND GENERAL RESULTS

CHAPTER 5. NUMERICAL ANALYSIS

Figure 5.9: In this figure, we plot V as a function of the quadratic variation in both cases, without transaction costs and with proportional transaction costs with  = 0.01 with N2 = 70. values  = 0, 2%, 3%, 4% with S0 = 1 and v0 = 0.0067. As it can be observed from Table 5.4, the values of the minimum upper bound V (1, 0.0067, ) where  = 3%, 4% are increasing very fast at some value of N2 . For example, when the round trip  = 0.04 (see the third column in the table), after N2 = 4 (compare it with the case of no transaction costs V (1, 0.0067), which is located in the last column of the table), the option values are extremely larger. These points become less surprising when our result is compared against the analysis of Leland 4 . From Table 5.4 and Figure 5.9, we notice that the steps N2 , consequently the quadratic variation has a big impact on the minimum upper bound prices for a European option and specially when the proportional transaction costs exist in the J-N algorithm. We strongly believe that there should be a relationship between the quadratic variation more precisely  =
5 v0 N2

(see the second column) and the round-trip .
 

Although we can not prove this claim theoretically, our numerical result shows apparently less than 1 in the J-N algorithm when the proportional transaction costs exit. B. Arbitrage Bounds:

should be

Additionally, we also implement arbitrage bounds for the proportional transactions cost. Recall that we
4 Under

the proportional transaction costs with hedging portfolios rebalanced only at discrete time instances, with a

2   fixed finite time interval h between them. Leland type approaches are limited by the condition < 1 the expression   h on the left known as the Leland number, where  is the round-trip transaction cost rate (expressed as a percentage of the stock price) and  is the volatility of the underlying asset 5 See the second column of Table 5.4 and compare the dramatic value V (1, 0.0067, ) where  = 4%, 3%, 2%, 0.

58

CHAPTER 5. NUMERICAL ANALYSIS 5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS N2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 =
v0 N2

V (1, 0.0067, 0.04) 0.0625 0.0709 0.0774 0.0793 0.2003 0.2214 0.2411 0.2598 0.2776 0.2946 0.3110 0.3269 0.3423 0.3573 0.3719

V (1, 0.0067, 0.03) 0.0569 0.0601 0.0666 0.0681 0.0738 0.0749 0.0763 0.2598 0.2776 0.2946 0.3110 0.3269 0.3423 0.3573 0.3719

V (1, 0.0067, 0.02) 0.0514 0.0495 0.0560 0.0569 0.0616 0.0618 0.0634 0.0637 0.0649 0.0653 0.0666 0.0675 0.0682 0.0687 0.0693

V (1, 0.0067) 0.0408 0.0289 0.0353 0.0408 0.0365 0.0389 0.0360 0.0377 0.0408 0.0387 0.0400 0.0383 0.0393 0.0382 0.0389

0.0816 0.0577 0.0471 0.0408 0.0365 0.0333 0.0309 0.0289 0.0272 0.0258 0.0246 0.0236 0.0226 0.0218 0.0211

Table 5.4: Relation between  and round-trip : This table shows for fixed quadratic variation v0 = 0.0067, how  and V (S0 , v0 , ) (see equation (3.16)) can change. Also this table shows that if N2 increases, as a result  decreases, and we have to reduce round-trip  in order to be satisfied in inequality  <  .

are not able to check the bounds for any round-trip  as we wish. We set our program for N2 = 70, S0 = 1 and K = 1 and the annual volatility is  = 0.2, so = v0 N2 0.009.

it means, we have to run the program for  < 0.009 6 . Figure 5.10 displays the minimum upper and the maximum lower pricing bounds for an option in the proportional transaction costs model for the fix jump size
d 

= 3, with different round trips  =

0, 0.001, 0.004. Clearly by increasing the level of , the minimum upper bound price increases and the shape has less curvature by changing of the amount of round-trip  = 0, 0.1%, 0.4%, (Figure 5.10). Note that for the round-trip, for example 0.1%, the upper bound is very close to the case of no transaction costs ( = 0) while the lower bound is not as tight.

5.2

Market Data and No-Arbitrage Bounds

From the point of view of the J-N algorithm, it is clear that a key issue is to forecast the future quadratic variation v0 over the life of the option. To reach this goal, we attempt to calculate the historical quadratic variation from the market data. To this end, we use daily closing prices of Yahoo! Inc.7 for the period May 2009 - May 2011(closing prices are shown in Figure 5.11).
6 Admittedly

this  is too small for practical matters but as we mention in Remark 12, we use this number for the

59

5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS CHAPTER 5. NUMERICAL ANALYSIS

Figure 5.10: Upper and lower bounds for the proportional transaction costs: the plot shows that by reducing , the bounds become smaller when the jump units is fixed.

Figure 5.11: Time Series: The sequence of closing price between May 2009-May 2011 for the chosen stock is shown in this figure 60

CHAPTER 5. NUMERICAL ANALYSIS 5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS

5.2.1

Forecasting the Quadratic Variation

We set the initial stock price on April 14, 2011. At that moment, Yahoo! Inc. closing price was at $16.69. In order to find the (sampled) quadratic variations from historical data, we followed the following process. Let [T0 , T1 ] be closing daily business days where T0 = May 6, 2009 and T1 = May 6, 2011. We consider t = 43 which are (almost) two-months of business days. Then we look for ts  [T0 , T1 - t] such that S (ts ) = S (0) = 16.69 (See Figure 5.11). For any ts , the quadratic variation Qvs can be found by applying
42

Qvs =
i=0

(ln (Si+1 ) - ln (Si ))2 ,

(5.3)

where Si  [S (ts ), S (ts + t)]. By applying (5.3) for all ts  [T0 , T1 - t], we found Qv = {Qv 1 , ..., Qv 16 } (Figure 5.12).

Figure 5.12: This figure shows the quadratic variation for different windows 1, .., 16 which start at times ts such that S0 = S (ts )  16.69 and all window's sizes are N2 = 43 Let us assume that the future quadratic variation is neither higher than the maximum value of the set of the quadratic variation Qvs nor less that the minimum of the set Qvs . So we find the minimum and the maximum of the set Qv Qvmax = max Qvs = 0.0326
s

Qvmin = min Qvs = 0.0073
s

(5.4)

illustration propose only. 7 This Data can be obtained from http : //ca.f inance.yahoo.com/q ?s = Y HOO &ql = 0

61

5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS CHAPTER 5. NUMERICAL ANALYSIS where s = 1, ...16. A. Bounds with No Jumps vs. Option Price of the Market: We are interested in finding a no arbitrage interval which denoted now as [V (Qvmin ), V (Qvmax )]. Let assume the future quadratic variation Qvf  [0.0073, 0.0326], then we consider call options that expire within two months with strike prices ranging from $13 - $28. Table illustrates 5.5 the ask price of the option with different strike prices.

Strike price Option price (Ask price)

13 5.7

14 4.75

15 3.75

16 2.81

17 1.97

18 1.28

19 0.77

20 0.45

21 0.26

22 0.15

Table 5.5: This table shows the option price with different strike prices.

First of all, we find the minimum upper bound 8 of the option values with no jumps and then we compare the results with the actual option prices (ask price is used for the minimum upper bound and bid price is used for the maximum lower bound) for each available strike price. Note that for each strike price, the initial value is S (0) = 16.69 and N2 = 43; therefore, = 0.0326 43 0.027.

We notice that empirical = min | ln(Si+1 ) - ln(Si )| = 0, which can be an issue when one wants to use
0i43

this model in practice. By an inspection of the minimum upper bound in Figure 5.13, it seems that there is an arbitrage opportunity if the future quadratic varication be at most 0.0326 because V (Qvmax ) < Vask .

Remark 15. Recall that our model is an incomplete model, so if the option value V0  [V , V ], then there is no arbitrage. But in this example Vask , which is the option price, is out of the interval, so we have an arbitrage opportunity. B. Bounds with Jumps vs. Market's Option Prices: Will the above arbitrage disappear by including jumps? We test the algorithm with max jump-unit  6 ( N2 6). Figure 5.14 illustrates the effect of jumps to remove the arbitrage. It seems that by increasing the jump size, the arbitrage for the strike price $20-$22 can be made to disappear. But still there is an arbitrage opportunity when the strike price is less than $20.
8 In this thesis, we consider to find the minimum upper bound. For the maximum lower bound, the analysis is done similarly by using minimum quadratic variation 0.0073 and comparing the result with the bid price.

62

CHAPTER 5. NUMERICAL ANALYSIS 5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS

Figure 5.13: This figure shows the ask option price and the minimum upper bound with the maximum quadratic variation 0.0326, in the case of no jump occurs

Figure 5.14: The minimum upper bound with no jumps and maximum jump units equal to 6 compared with the real option value show in this figure.

63

5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS CHAPTER 5. NUMERICAL ANALYSIS C. Bounds with Fixed Transaction Costs vs. Market's Option Prices: For the next step, we wish to consider whether transaction costs can reduce/remove the chance of having an arbitrage opportunity. To reach this goal, first we add fixed transaction costs, without jumps, to our model in order to make it more realistic. We expected that any arbitrage profits should disappear. In the case of fixed transaction costs, we found out by adding at least K = 0.045 as a cost of trading 9 (according to Remark 14, if we buy have a contract with c = 222, we will have KR = 10$ which is more realistic) to the previous set up, i.e S0 = $16.69 and N2 = 43 with v0 = 0.0326, the arbitrage is vanished for all strike price. Note that the minimum upper bound of the option becomes very expensive by enlarging of the strike price form $13 - $22 (Figure 5.15).

Figure 5.15: This plot shows the upper bound with the minimum fixed transaction K = 0.045 which can remove the arbitrage in this market for all strike price. D. Bounds with Proportional Transaction costs vs. Market's Option Prices: Finally, we check if we can remove the arbitrage by adding the proportional transaction costs. Recall that,  = 0.027; Therefore, the maximum value of the round-trip  that we can run our program with  = 0.026 <  .
9 As we mention before, in this thesis, we work with a single option. To have more realistic fixed transaction costs, we need to consider trading a large number of options (as is the case in actual markets)

64

CHAPTER 5. NUMERICAL ANALYSIS 5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS

We plot the minimum upper bound with S0 = $16.69 for a maximum round-trip  = 0.026, first with no jumps and then for a maximum jump units 6. So, as it can be observed in Figure 5.16, in the case of proportional transaction costs, we are not able to remove the profit for K = $13 - $17, because of restriction that we have on the round-trip (but it is already realistically high).

Figure 5.16: In the case of proportional transaction costs, we are not able to remove the gap, because of limitation on  < 0.027.

5.2.2

Investment Strategy

In the previous section, we found an example that the call is overpriced, so there is an arbitrage opportunely in this case. In this section, we implement the actual hedging by using the J-N algorithm to see whether we are really superhedging according to proposition 1 or not. As we know a most important parameter needs as input in the J-N algorithm is v0 . To reconstruct the hedging approximation, first we use v0 = Qvmax and then the actual quadratic variation of a window Qvw , this will allow us to see what is the effect of using a larger quadratic variation which is Qvmax than the actual realized quadratic variation Qvw . To reach this goal, we run the J-N algorithm when Qvmax = 0.0326 and use the results such as price and hedging amounts at each node to actually hedge and then we replace Qvmax by Qvw to compare the results.

65

5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS CHAPTER 5. NUMERICAL ANALYSIS Let us use S (tk ) to denote the market data (daily closing prices for Yahoo! Inc.) in one of the windows where k = 0, 1, 2, ..., R (R = 43 is length of data window) clearly | ln S (tk ) - ln S (tk-1 )| will take a variety of values which are not necessary equal  , where  is the minimum log return from the algorithm. In order to implement the hedging investment, let Sik  S (tk ) where Sik denotes the stock discretization value on the grid of the J-N algorithm closer to S (tk ), therefore; Sik = S0 eik   S (tk ). On the other side, vjk = (N2 - jk ) 2  v (tk ) where
k

(5.5)

v (tk )  [QVmax -
p=0

(ln S (tp ) - ln S (tp-1 ))2 ].

(5.6)

So now we have a sequence (Sik , vjk ) in the grid. By knowing Sik = S0 eik  and vjk = (N2 - jk ) 2 , we will need to decide how much to invest in the stock. Thus we modify the J-N program and create a matrix H [i, j ] such that H [i, j ] = hi,j and choose the necessary number of shares by using indexes ik and jk as follows: ik = And j k = N2 - 1 ln[S (tk )/S0 ],  v (tk ) . 2 (5.7)

(5.8)

Now, a problem is that the node (ik , jk ) may not have been visited by the J-N algorithm i.e. there is no hk value available at this node. Then one needs to look for the closest node that actually has hk available. A problem we have found dealing with the current data is that the J-N grid does not capture well the small changes, we solved this problem by using the following process: · It seems the problem should disappear if N2 is large enough. · The problem can be fixed if we can stay in node (Si , vj ), namely doing nothing. The hedging difference should then be:
N

-V (StR ) + V (QVmax , d) +
i=0

hi (S (ti+1 ) - S (ti ))

The final balance (which will be an actual profit if the above hedging difference is nonnegative and there is an arbitrage, i.e. [Price of option - V (QVmax , d)] > 0) will actually be:
N

Price of option - V (QVmax , d) - V (StR ) + V (QVmax , d) +
i=0

hi (S (ti+1 ) - S (ti ))

where N is the number trading and hk is the amount of shares that the J-N algorithm gives at node 66

CHAPTER 5. NUMERICAL ANALYSIS 5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS (Sik , vjk ) and note that SkN  StR . In following we implement the hedging strategy with the different approaches. I Investment Strategy with Qvmax when N2 = 43.

First of all, we find the closest path, to the actual empirical path, among all passible paths that the J-N algorithm creates when N2 = 43 with v0 = Qvmax in the case that no transaction costs occur. We do this by staying in some nodes whenever the movement of stock price is very small, namely the log return is not greater than  which is  = min | ln(Si+1 ) - ln(Si )|.
0iN

Figure 5.17 displays the price path of Yahoo! Inc. for one of the windows and the simulated price path from the J-N algorithm, as it can be seen, because some of the movements of the market prices are small, we have to stay in a node and wait for another day in several instances. As a result, the chosen price path from the J-N algorithm is not very close to the market movements.

Figure 5.17: The figure shows the Yahoo! Inc. price path and the closest J-N price path for one of the windows but using the future quadratic variation QVmax when N2 = 43. II Investment Strategy with Qvw when N2 = 43.

As a second step, we implemented the hedging strategy and obtained the closer price path from the J-N algorithm by using the same number N2 but now we took v0 = Qvw . Figure 5.18 shows the Yahoo! Inc. price path and the J-N price path closer to the data for the same window but using the exact quadratic 67

5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS CHAPTER 5. NUMERICAL ANALYSIS variation, namely Qvw . Apparently, the artificial price path form the J-N algorithm is now much closer to the actual price path for this window, this can be explained given that v0 = Qvw < QVmax implies that we decrease  so we will have a better approximation to Sk .

Figure 5.18: The figure shows the Yahoo! Inc. price path and the closest J-N price path for one of the windows with the actual quadratic variation of the window QVw when N2 = 43. The next solution to the problem that we have tried increases the value of N2 in the J-N algorithm, this provides a better approximation by decreasing  , we run the program when N2 = 80 and followed the same process as before. III Investment Strategy with Qvmax when N2 = 80.

In this case, we use Qvmax with larger N2 = 80, clearly we decrease  , so we have a better approximation of Stk and there is no need to stay in the same node many times. Figure 5.19 shows the result in this case. IV Investment Strategy with Qvw when N2 = 80.

Finally, if the exact quadratic variation of the window is used for the implementation, the result is very close to the actual path for this window( Figure 5.20). So it seems that if we want to have a very good approximation of a given price path we need to have  as close as possible as to the minimum return of the window price path. Now we would like to investigate the profits/losses described above. In particular we are interested in 68

CHAPTER 5. NUMERICAL ANALYSIS 5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS

Figure 5.19: The figure shows the Yahoo! Inc. price path and the closest J-N price path for one of the windows with the future quadratic variation QVmax when N2 = 80.

Figure 5.20: The figure shows the Yahoo! Inc. price path and the closest J-N price path for one of the windows with the actual quadratic variation of the window QVw when N2 = 80.

69

5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS CHAPTER 5. NUMERICAL ANALYSIS observing if whether we have superhedged or not, especially in the case when we use v0 = QVmax as the superhedge is only guaranteed theoretically for the case v0 = QVw . Moreover, we are interested in seeing the effect of transaction costs in the profit/loss as well. Table 5.6 illustrates the profits/losses for all cases.

Models Model with no Transactio Costs Model with no Transactio Costs Fixed Transaction cost K = 0.045 Fixed Transaction cost K = 0.097 Proportional Transaction Costs with  = 0.02 Model with no Transactio Costs Model with no Transactio Costs Fixed Transaction cost K = 0.045 Fixed Transaction cost K = 0.071 Proportional Transaction Costs with  = 0.02

N2 43 43 43 43 43 80 80 80 80 80

N 29 21 21 21 21 34 28 28 28 28

Qv 0.0163 0.0326 0.0326 0.0326 0.0326 0.0163 0.0326 0.0326 0.0326 0.0326

delta 0.0195 0.0202 0.0202 0.0202 0.0202 0.0143 0.0202 0.0202 0.0202 0.0202

profits/losses 2.2666 1.9229 1.0230 -0.018 1.0271 2.7220 1.8888 0.6839 -0.0181 -0.0692

Table 5.6: This table shows the profits/losses of Yahoo! inc. price path and also required number of trading when v0 = Qvmax and v0 = Qvw . Note that N is the actual number of tradings, N2 is the number that we run the J-N algorithm with and Qv is the quadratic variation that could be the future quadratic variation or the actual quadratic variation.

As it can be seen in Table 5.6, we have profits almost in all cases except in the case of a large fixed transaction cost. Also when we hedge along the path with its actual quadratic variation, the profit seems that is higher than when we use the Qvmax because we use the smaller  so we trade more. As we mentioned in figure 5.20, the J-N price path is very close to the actual price path and this result can be see in Table 5.6 as well, we trade around 34 times and we have higher profits there.

5.2.3

Smile Quadratic Variation

For our last empirical work, it is interesting to see that the minimum upper bound on the option value that we derived has a smile feature in the quadratic variation. We have seen that for the future quadratic variation of Qvmax = 0.0326, the option price that we can obtain from the J-N algorithm is lower than the actual market price if no transaction costs are used in the J-N algorithm. So, one can ask, what is the real sampled quadratic variation to be used as input to the J-N algorithm in order to have the actual market's price? To test the results, we set up the program with S0 = 16.69 and N2 = 43. Then for each K = 13, 14, ..., 22, we change the quadratic variation until we find the (implied) quadratic variation that gives us the option market's value
10 We

10

.

use the fact that the minimum upper bound as a function of the quadratic variation is a monotonic function.

70

CHAPTER 5. NUMERICAL ANALYSIS 5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS After this, we attempt to find the implied quadratic variation's market in the presence of fixed and proportional transaction costs to see how transaction costs can affect the implied quadratic variation.

Figure 5.21: This figure displays the behavior of the quadratic variation as the strike price increases with fixed transaction costs. We assume the option price is the option market and we find the quadratic variation such that gives us the option price market. Figures 5.21 and 5.22 display the behavior of the implied quadratic variation as a function of the strike price. The smile (i.e. non flat) feature of the graphs displayed does not disappear with the inclusion of fixed or proportional transaction costs. So, as a result of the above findings, it seems that the basic model (Chapter 2) should be extended to consider the case of v0 to be path dependent, i.e. the quadratic variation should not be constant across the modeling paths. This extension is known to capture the smile phenomena in probabilistic models.

71

5.2. MARKET DATA AND NO-ARBITRAGE BOUNDS CHAPTER 5. NUMERICAL ANALYSIS

Figure 5.22: In this figure, we show if the proportional transaction costs exist, the actual quadratic variation should be less than in the case of no transaction costs.

72

Conclusions
The Black-Scholes assumptions on the stock price process is an important limitation of the Black-Scholes model, because in practice trading is discrete and the price paths are discontinuous and include price jumps and portfolio re-arrangements are subject to transaction costs. Britten-Jones and Neuberger [Britten and Neuberger, 1996] show how one can relax the assumptions of continuity and infinite trading possibilities by adding some restrictions to the possible price paths in order to have a more realist framework. The most important assumption in their approach is that the model requires a known (sampled log) quadratic variation of price changes over a finite time interval and also they assume price jumps not to be greater that some specified jump size. By making use of those assumptions, they provide an interesting financial description of no arbitrage bounds of an option price by using a non probabilistic approach. This thesis develops further the Britten-Jones and Neuberger framework, by introducing two kinds of transactions costs, fixed and proportional transaction costs, and analyzing the impact that adding these transaction costs have on the pricing interval (no arbitrage bounds). The extension has some important practical implications; in particular, allowed us to conduct a preliminary analysis in order to assess the empirical relevance of the extended framework in real market data. The preliminary conclusions drawn from our studies are that the realistic features of the framework, in the sense that it requires few assumptions and observable inputs, make it a useful instrument that can be used to look for miss-pricing opportunities in option's prices. In particular, we provide some preliminary evidence that arbitrage opportunities, once present, may remain after transactions costs are taken into account.

73

Appendix A

Some Basic Concepts in Finance
In this appendix, we briefly introduce some fundamental concepts in finance. A derivative (also referred to as contingent claims) is a general term for any financial contract whose value depends on underlying asset. An option is a derivative security that gives the right to buy or sell the underlying asset. Options can be European style, which can only be exercised at the expiry date, or American style, where exercise is at the discretion of the holder, at any time before or at the expire date. The underlying variable can be a traded asset, such as a stock; an index portfolio; a futures price; a currency; or some measurable state variable, such as the temperature at some location or the volatility of an index. The payoff can involve various patterns of cash flows. Payments can be spread evenly through time, occur at specific dates, or a combination of the two. Our work on derivative pricing will focus on two specific types of contracts, a forward contract and call option.

Definition 9. A call option is a contract that gives the holder the right, but not the obligation, to purchase the underlying for a pre-specified price K , called the strike price at the expiry date T with the exercise payoff max(S - K, 0) where S denotes the price of the underlying asset. Definition 10. A forward contract is an agreement between two parties to exchange an amount of the underlying commodity, currency or financial asset for cash at some specific date (the expiry date) in the future. The amount of cash to be paid (called the forward price) at expiry is determined when the contract is formed and is set so that there is no cost to either party to enter into the agreement. The Forward Price can be determined by the following formula: F0 = S0 erT where r is interest rate. 75

APPENDIX A. SOME BASIC CONCEPTS IN FINANCE

In general, forward price is Ft,T = St er(T -t) for 0  t  T . Because in this thesis, we assume that the interest rate is zero i.e Ft,T = St , therefore instead of forward price, we work with the stock price.

76

Appendix B

Binomial Tree Model
Binomial models were first suggested by [Cox and Rubinstein, 1979], CRR, and then became widely used because of its intuition and easy implementation. Binomial trees are constructed on a discrete-time lattice. With the time between two trading events shrinking to zero, the evolution of the price converges weakly to a lognormal diffusion. Within this mode the European options value converges to the value given by the Black-Scholes formula.

STEP 1: Create the binomial price tree Suppose that we have an underlying instrument (a stock price) at time t = 0 with initial value S0 . At any node on time layer ti , the asset price S , can branch up to the value Sup = S.u at time ti+1 , or down to the value Sdown = S.d, where, by definition, u  1 and 0 < d  1 are called up and down factor respectively. The probability of an "up move" is p and that of a "down move" is 1-p. Over one time period, t, the up and down factors are calculated using the underlying volatility,  and the time duration of a step, t, measured in years. From the condition that the variance of the log of the price is  2 t, we have: u = e
 t

,

d = e-



t

=

1 . u

The CRR method ensures that the tree is recombinant, i.e. if the underlying asset moves up and then down (u,d), the price will be the same as if it had moved down and then up (d,u) here the two paths merge or recombine. This property reduces the number of tree nodes, and thus accelerates the computation of the option price. This property also allows that the value of the underlying asset at each node can be calculated directly via formula, and does not require that the tree be built first.

STEP 2: Computed the asset prices at all the nodes The asset price tree is built by setting the value of the asset on the (i + 1)th layer (that is at time ti , since we start at t0 = 0):
i S (j, i) = Sj

j = 0, . . . , N, 77

APPENDIX B. BINOMIAL TREE MODEL where j corresponds to the (j + 1)th node up the layer (i.e. j increases upwards) and,
j Si  uj di-j S0 .

STEP 3: Find Option value at each final node (Terminal) At each final node of the tree i.e. at expiration of the option T, the option value is simply its intrinsic, or exercise, value.

· A call option: · A put option:

max (ST - K, 0), max (K - ST , 0),

where K is the Strike price and ST is the price of the underlying asset. STEP 4: Find the option value at earlier nodes Once the above step is complete, the option value is then found for each node, starting at matutity time, and working back to the first node of the tree where the calculated result is the value of the option. The binomial value is found at each node, using the risk neutrality assumption, is: Vt-t,i = e-rt (pVt,i+1 + (1 - p)Vt,i-1 ) (B.1)

Where Vt,i is the option's value for tth node at time t and r is the risk free rate corresponding to the life of the option with probability p is: p= Implementing the Tree: We start with computing the current price V0 of a European call; following algorithm gives the procedure for given values of the asset price S , the strike K, the volatility  , the riskfree rate r and time to maturity T. Algorithem European Call Option: e r t - d . u-d

1. Input Strik K , S0 , r,  , T and Time Steps M . 2. Compute t = where n is steps on tree .  3. Compute ud = 1 where u =  t . 4. Compute p =
ert -d u-d . T M

5. Evaluate S i - j . 6. Calculate Price for Calls at T. 78

APPENDIX B. BINOMIAL TREE MODEL 7. Binomial Value = [ p× Option up + (1 - p)× Option down] exp(-r × t), The above is the original Cox, Ross, Rubinstein (CRR) method; there are other techniques for generating the lattice, such as "the equal probabilities" tree. The Trinomial tree is a similar model, allowing for an up, down or stable path. The CRR method ensures that the tree is recombinant, i.e. if the underlying asset moves up and then down (u,d), the price will be the same as if it had moved down and then up (d,u) here the two paths merge or recombine. This property reduces the number of tree nodes, and thus accelerates the computation of the option price. This property also allows that the value of the underlying asset at each node can be calculated directly via formula, and does not require that the tree be built first.

79

APPENDIX B. BINOMIAL TREE MODEL

80

Appendix C

Dynamic Programming
C.1 What Is Dynamic Programming?

The optimization of problems over time arises in many settings, from the control of heating systems to managing entire economies and finances. In between are examples including landing aircraft, managing blood inventories, selling assets, investing money in portfolios, or just playing a game of tic-tac-toe or backgammon. These problems involve making decisions, then observing information, after which we make more decisions, and then more information, and so on.

Dynamic programming is an optimization procedure that is particularly applicable to problems requiring a sequence of interrelated decisions. Each decision transforms the current situation into a new situation. A sequence of decisions, which in turn yields a sequence of situations. The value of a sequence of decisions is generally equal to the sum of the values of the individual decisions and situations in the sequence. The main concept of dynamic programmingis that choosing the best state in each step leads to the optimum final state.

The field of Dynamic programming is young, the original developments of the material are still accessible and relevant. Richard Bellman first introduced the title of dynamic programming to the study of these methods in his 1957 monograph [Bellman, 1957].

C.2

Analytical Concepts in DP

In this section, we briefly present the fundamental concept of Dynamic Programming [Bertsekas, 1976], [King, 2002]. For our approach, we fucus on a finite horizon discrete time dynamic programming model. 81

C.2. ANALYTICAL CONCEPTS IN DP

APPENDIX C. DYNAMIC PROGRAMMING

Suppose we wish to optimize a separable cost function of the form
N -1

V =
i=0

Ui (si , ci ) + VT (sT ).

(C.1)

Note that the initial and terminal condition on the function are necessarily. Even though we can use the Lagrange multiplier method for solving simple dynamic optimization problems, we are simply looking for a more tractable, and more powerful way. All dynamic programs can be written in terms of a recursion that relates the value of being in a particular state at one point in time to the value of the states that we are carried into at the next point in time is known as Bellmans equation, or the Hamilton-Jacobi equation, or increasingly, the Hamilton-Jacobi-Bellman equation (usually, in continuous-time optimization problems. Some textbooks refer to them as the functional equation of dynamic programming. We use the term Bellman Equation in our work, which is so widely used in the dynamic programming community.

C.2.1

Utility or payoff Function

To understand the Bellman equation, several concepts must be understood and it will be useful to review the elements of a dynamic program. First, any optimization problem has some objective such as minimizing travel time, minimizing cost, maximizing profits, maximizing utility, et cetera. The mathematical function that describes this objective is called the objective function. It means the agent has a utility or payoff (Cost) function U (s1 , c1 , ..., sT , cT ) that depends on the realized states and decisions from period t = 0 to the horizon T1 . U has the form
T1

U (s1 , c1 , ..., sT , cT ) =
i=0

Ui (si , ci ).

(C.2)

where Ui (si , ci ) is the agent's period i utility (payoff) function.

C.2.2

Control and State Variable

There are two key variables in any dynamic programming problem: a state variable st , and a decision variable ct (the decision is often called a control variable in the engineering literature). These variables can be vectors in Rn , but in some cases they might be infinite dimensional objects. Definition 11. The state variable: this captures all the information of the current situation which is needed to make a correct decision, as well as the information that we need to describe how the system evolves over time. For example, to decide how much to consume and spend at each point in time, people would need to know (among other things) their initial wealth. Therefore, wealth would be one of their state variables, but there would probably be others. 82

APPENDIX C. DYNAMIC PROGRAMMING

C.2. ANALYTICAL CONCEPTS IN DP

Definition 12. The decision (control) variable: Decisions represent how we control the process and chosen at any given point in time. For example, given their current wealth, people might decide how much to consume now. Choosing the control variables now may be equivalent to choosing the next state; more generally, the next state is affected by other factors in addition to the current control. Therfore, in the simplest case, today's wealth (the state) and consumption (the control) might exactly determine tomorrow's wealth (the new state), though typically other factors will affect tomorrow's wealth too.

C.2.3

Policy

The dynamic programming approach describes the optimal plan by finding a rule that tells what the controls should be, given any possible value of the state. For example, if consumption (c) depends only on wealth (W ), we would seek a rule c(W ) that gives consumption as a function of wealth. Such a rule, determining the controls as a function of the states, is called apolicy function Definition 13. Assume that the state si is the state variables at the end of time interval i (an element of a space i ), the control variable ci is the control variables applied during time interval i (is an element of the a space Rm ). A policy function or control law is a sequence of N functions (µ0 , ..., µN -1 ): µi : i  Rm , where µi maps states si into control ci = µi (si ) (C.3)

C.2.4

Basic Model

A dynamic optimization problem (pay off function) in discrete time is given by the form
N -1

opt
i=0

Ui (si , ci ) + VN (sN ).

(C.4)

subject to: si+1 = Gi (si , ci ) with the initial condition s0 given and the terminal value is given. Gi is a function that describes the system and in particular the mechanism by which the state is updated. And express the evolution of the system of the state under the influence of the control variable. We now formulate a general problem of decision over a finite number of stage. This basic problem is very general. We start by considering problems that have the following representation: (C.5)

83

C.2. ANALYTICAL CONCEPTS IN DP

APPENDIX C. DYNAMIC PROGRAMMING

Consider a discrete-time dynamic system modeled by the state equation si+1 = Gi (si , ci ) i = 0, 1, ..., N - 1, (C.6)

where the state si is the state variables at the end of time interval, the control variable ci  Rm is the vector of the control variables applied during time interval i. The initial state s0 is given; the final state sT may be constrained or not. No uncertainty is considered here: given the current value of the state variable si , after selecting the control variable ci we know exactly what the future state will be, according to the time-varying dynamics described by the Gi functions. Given an initial state s0 and a fixed admissible policy function µ = (µ0 , ..., µN -1 ), we start with observations which are already exist and dynamic system C.6 becomes si+1 = Gi (si , µi (si )), Thus, for given function Ui , i = 0, ..., N - 1,
N -1

i = 0, ..., N - 1

(C.7)

Vµ (s0 ) =
i=0

Ui (si , µi (si )) + VN (sN )

(C.8)

Optimal policy µ is one that optimize the function C.8,
N -1

Vµ (s0 ) = optµRm
i=0

Ui (si , µ(si )) + VN (sN )

(C.9)

84

APPENDIX C. DYNAMIC PROGRAMMING

C.2. ANALYTICAL CONCEPTS IN DP

where R is the set of all admissible policies.

The Principle of Optimality Richard Bellman showed that a dynamic optimization problem in discrete time can be stated in a recursive, step-by-step form by writing down the relationship between the value function in one period and the value function in the next period. The relationship between these two value functions is called the Bellman equation. In general there are following method to solve this equation: 85

C.2. ANALYTICAL CONCEPTS IN DP

APPENDIX C. DYNAMIC PROGRAMMING

1. The method of undetermined coefficients, also known as 'guess and verify', can be used to solve some infinite-horizon. 2. The Bellman equation can be solved by backwards induction. 3. By calculating the first-order conditions associated with the Bellman equation 1 . We use the second method, which is backward induction, to solve the Bellman equation. The key idea underlying why backward induction produces an optimal decision rule is called The Principle of Optimality. Roughly, the principle of optimality states the following:
  Claim 1. Let µ = {µ 0 , ..., µN -1 } be an optimal policy for basic problem and assume that using µ ,

a given state si occurs at time i. Consider the subproblem whereby we are at si at time i and wish to
 minimize the cost-to-go from time i to time N Then the truncated policy {µ i , ..., µN -1 } is optimal for

this subproblem. Proof: [Bertsekas, 1976] So an optimal policy has the property that whatever the initial state and initial decision are, the remaining decisions must constitute an optimal policy with regard to the state resulting from the first decision.

1 It is possible to obtain a system of difference equations or differential equations called the 'Euler equations'. Standard techniques for the solution of difference or differential equations can then be used to calculate the dynamics of the state variables and the control variables of the optimization problem.

86

Appendix D

The Optimal Hedging
D.1 Basic Model

As we mention in Chapter 2, the Bellman Equation can be written as V i (Si , vi ) = inf Subject to the conditions
2 · (ln Si+1 - ln Si )2 = c2 i d .

{hi }

sup V (Si+1 , vi+1 ) - hi (Si+1 - Si )
{ci }

.

(D.1)

· vi+1 = vi - c2 i  0. Note that, the Bellman equation (3.6) is a non standard dynamic programming problem due to being a minimax optimization problem. However, the optimal hedging strategy can be easily found and with this out of the way the problem becomes a standard dynamic programming problem. The infimum over the trading strategies that makes the problem non-standard dynamic programming. ~ , for the We are going to use some really neat tricks. Suppose that we have found optimal hedging, h problem (2.27), therefore we have
ci ~ V (Si , vi ) = sup{V (Si eci , vi - c2 i ) - hSi (e - 1)}. {ci }

Since we have defined V (Si , vi ) as an upper bound, one can rest assured that
ci ~ V (Si , vi )  V (Si eci , vi - c2 i ) - hSi (e - 1).

87

D.1. BASIC MODEL

APPENDIX D. THE OPTIMAL HEDGING

The amount by which the upper bound V (Si , vi ) is greater than the right-hand-side is a function, F , of the permissible value for ci . We can therefore write as
ci ~ F (ci )  V (Si , vi ) - V (Si eci , vi - c2 i ) + hSi (e - 1)  0.

(D.2)

Obviously from the equation (D.2), F (ci )  0 and by substitution ci = 0 in definition of function F , we have F (0) = 0. Remark 16. If the function F is equal to zero at the origin, and greater or equal to zero for positive or negative values of c, as long as arbitrarily small in magnitude, then the derivative of F with respect to ci in the neighborhood of ci = 0 must be equal to 0. Above grantee that dF |c=0 = F (0) = 0. dc Now by applying the derivative in (D.2),  (Si eci ) F V V  (vi - c2 i) ~ i ec i . =0- + + hS 2 ci  (Si eci ) ci  (vi - ci ) ci =- V V ~ i ec i . Si eci + 2ci + hS c i Si e  (v - c2 i)

Evaluating this quantity at ci = 0, and equating it to zero, gives F V ~ i = 0. |c =0 = - Si + hS ci i Si Therefore follows that the optimal hedge ratio is given by V ~ = h, Si ci  min(ci , d2 ). (D.4) (D.3)

Equation (D.4) determines the optimal strategy. Note that, if all the Black-Scholes conditions are met, the usual expression for the Black delta holding of shares is recovered. The optimal strategy, however, holds also in all the more general cases where the J-N method is applicable. As a last step we can substitute the optimal strategy we have just determined in the expression for the minimum upper bound. When we do so we obtain: Vi (Si , vi ) = inf Subject to the inequality constraint: ci  min(vi , d2 ). 88 sup V (Si+1 , vi+1 ) -
{ci }

{hi }

V (Si+1 - Si ) Si

.

(D.5)

APPENDIX D. THE OPTIMAL HEDGING and the terminal condition

D.2. PROPORTIONAL TRANSACTION COSTS

V (Si , 0) = V (Si ).

D.2

Proportional Transaction Costs

~ , has somehow been found, so Let us assume that the optimal hedge, h
ci ci ~ ~ V (Si , vi , ) = sup{V (Si eci , vi - c2 i , ) - hSi (e - 1) + |h - g |Si e }. {ci }

(D.6)

where g = H (Si+1 , vi+1 ) and is known. Therefore we can define the difference between the left-hand side and the right-hand side as a function
ci ci ~ ~ F (ci ) = V (Si , vi , ) - V (Si eci , vi - c2 i , ) + hSi (e - 1) - |h - g |Si e  0.

(D.7)

By using induction, we can show F (0) = 0. Assume i = N - 1, so ~ N -1 (ecN -1 - 1) - |h ~ |SN -1 ecN -1 . F (cN -1 ) = V (SN -1 , vN -1 , ) - V (SN ) + hS According to our set up BN -1 + H (SN -1 , vN -1 )SN = VN + |H (SN -1 , vN -1 )|SN . where BN -1 + H (SN -1 , vN -1 )SN = V (SN -1 , vN -1 , ), So ~ |SN -1 ecN -1 V (SN -1 , vN -1 , ) = V (SN ) + |h So F (cN -1 ) = 0 when cN -1 = 0. When i = n ~ n (ecn - 1) - |h ~ - g |Sn ecn . F (cn ) = V (Sn , vn , ) - V (Sn+1 , vn+1 , ) + hS where V (Sn , vn , ) = V (Sn+1 , vn+1 , ) + |H (Sn , vn ) - H (Sn+1 , vn+1 )|Sn+1 . By doing the same process we can show F (0) = 0, hence according to remark 16, F (0) = 0. Therefore 89 (D.9) (D.8)

D.2. PROPORTIONAL TRANSACTION COSTS follows that the optimal hedge ratio is given by

APPENDIX D. THE OPTIMAL HEDGING

F V V ~ i eci - |h ~ - g |Si eci . Si eci + 2ci + hS =- ) ci Si eci  (v - c2 i Evaluating this quantity at ci = 0, and equating it to zero, gives F V ~ i - |h ~ - g |Si = 0. |c =0 = - Si + hS ci i Si ~ the optimal hedge ratio is given by Finally h V  ~ -  |h ~ - g |, =h Si where ci  min(ci , d2 ). (D.11) (D.10)

Hence, we look for the optimal trading strategies such that  (1 - )h ~ + g, if h ~  g, V  = (1 + )h Si ~ - g, if h ~ < g. Therefore ~  g , then h ~= · If h ~ < g , then h ~= · If h
V  1 1- ( Si V  1 1+ ( Si

- g ). + g ).

90

Appendix E

MATLAB Code
Optimization without Transaction costs %By t h i s program , we f i n d t h e minimum upper bound w i t h o u t t r a n s a c t i o n c o s t . % We s e t t h e program f o r S 0=1 and K=1, annual v o l a t i l i t y =0.2 f o r 2-month %o b s e r v a t i o n %%% I n p u t s N=100; volannual = 0 . 2 ; T = 2/12; d e l t a = s q r t ( r e m a i n v o l /N ) ; ddelta = 3 Strike = 1; i = m a t r i x I (N ) ; C = length ( i ( : , 1 ) ) ; %number o f s e t p s i n t h e t r e e %annual v o l a t i l i t y %(number o f month ) / 1 2 %N\ d e l t a = v 0 %d/ d e l t a % Strike Price % i s a function % length of i in maturity

r e m a i n v o l = T  ( v o l a n n u a l ^ 2 ) ; %r e m a i n d i n g v o l a t i l i t y v 0

Value = ( - 100)  o n e s (N+1,N+1); Stock = ( - 100)  o n e s (N+1,N+1); h s t a r = z e r o s (N,N ) ; %%% P a y o f f a t T time = 1 ; Stock0 = 1 ; Stock ( : , time ) = Stock0  exp ( i ( : , time )  d e l t a ) ; for A = 1 :C 91 %matrix o f number o f s h a r e s

APPENDIX E. MATLAB CODE Value (A, time ) = max( Stock (A, time)- S t r i k e , 0 ) ; end f o r time = 2 :N+1 Stock ( 1 : C-(time - 1) , time ) = Stock0  exp ( i ( 1 : C-(time - 1) , time )  d e l t a ) ; n1 = f i x ( s q r t ( min ( ( d d e l t a ) ^ 2 , time - 1 ) ) ) ; %c o n d i n t i o n n<=min ( d d e l t a , N- j ) f o r h=1:C-(time - 1) [ Value1 , Stock1 ] = d e s t p o i n t ( n1 , time , h , Stock0 , Value , d e l t a , i ) ; %f u n c t i o n %%% o p t i m i z a t i o n %%% [ V, Vh ] = opthedge ( Value1 , Stock1 , Stock ( h , time ) ) ; %f u n c t i o n h s t a r ( h , time ) = Vh ; %o p t i m a l hedge Value ( h , time ) = V; %o p t i m a l v a l u e c l e a r Value1 Stock1 end end Vl0 = Value ( 1 , time ) ; %t h e minimum upper bound f u n c t i o n [ i ] = m a t r i x I (N) %To make matrix i which c r e a t e t h e g i d e f o r i n d e x i , where N i s s t e p s i n %t h e t r e e i = ( 2 N+1)  o n e s (N+1,N+1); i ( : , 1 ) = (-N : 2 : N) ' ; f o r c = 2 :N+1 a = 1; I ( c ) = (N-(c - 1 ) ) ; f o r e = -I ( c ) : 2 : I ( c ) i ( a , c)= e ; a = a +1; end end f u n c t i o n [ Value1 , Stock1 ] = d e s t p o i n t ( n1 , time , h , Stock0 , Value , d e l t a , i ) % With t h i s f u n c t i o n , we f i n d t h e a l l d e s t i n a t i o n p o i n t s from a c e r t a i n % node . R e c a l l t h a t ( i , j ) g o e s t o ( i+n , j+n ^ 2 ) where p = 1; f o r n=-n1 : n1 i f n~=0 if time -1>=n^2 92 n<= min ( j , d^2/ d e l t a ^ 2 ) .

APPENDIX E. MATLAB CODE [ t f , i n d e x ] = ismember ( i ( h , time )+n , i ( : , time -n ^ 2 ) ) ; Value1 ( p ) = Value ( index , time -n ^ 2 ) ; Stock1 ( p ) = Stock0  exp ( ( i ( h , time )+n )  d e l t a ) ; p = p+1; end end end Value1 ; Stock1 ; f u n c t i o n [ V, Vh ] = opthedge ( Value1 , Stock1 , Stockhtime ) %With t h i s f u n c t i o n , we can f i n d t h e o p t i m a l v a l u e (V ) and t h e o p t i m a l %hedge ( h  ) . f1 = [ 1 ; 0 ] ; b=c a t (2 , - Value1 ) ; c o l 1 =c a t (2 , - o n e s ( 1 , l e n g t h ( Value1 ) ) ) ; c o l 2 = c a t (2 , - ( Stock1 -Stockhtime ) ) ; A=c a t ( 2 , c o l 1 ' , c o l 2 ' ) ; lb = [ -10^4; -10^4]; ub = [ 1 0 ^ 4 ; 1 0 ^ 4 ] ; [ x , f v a l ] = l i n p r o g ( f1 , A, b , [ ] , [ ] , lb , ub ) Vh = x ( 2 ) ; V = x(1); Optimization without Transaction costs %In t h i s code , we f i n d t h e minimum upper bound with p r o p o r t i o n a l %t r a n s a c t i o n c o s t . % We s e t t h e program f o r S 0=1 and K=1 annual v o l a t i l i t y =0.2 f o r 2-month %o b s e r v a t i o n and a l p h a = 0 . 0 0 1 . %%%% Inputs %number o f s e t p s i n t h e t r e e %annual v o l a t i l i t y %(number o f month ) / 1 2

N=100; volannual = 0 . 2 ; T = 2/12;

r e m a i n v o l = T  ( v o l a n n u a l ^ 2 ) ; %r e m a i n d i n g v o l a t i l i t y v 0 d e l t a = s q r t ( r e m a i n v o l /N ) ; %N\ d e l t a = v 0 ddelta = 3 Strike = 1; %d/ d e l t a % Strike Price 93

APPENDIX E. MATLAB CODE

i = m a t r i x I (N ) ; C = length ( i ( : , 1 ) ) ;

% i s a function % length of i in maturity

Value = ( - 100)  o n e s (N+1,N+1); Stock = ( - 100)  o n e s (N+1,N+1); h s t a r = z e r o s (N,N ) ; x i = z e r o s (N+1,N+1); a l p h a =0.001 %%%% P a y o f f a t T time = 1 ; Stock0 = 1 ; Stock ( : , time ) = Stock0  exp ( i ( : , time )  d e l t a ) ; for end %%%%D e s t i n a t i o n nodes f o r time = 2 :N+1 Stock ( 1 : C-(time - 1) , time ) = Stock0  exp ( i ( 1 : C-(time - 1) , time )  d e l t a ) ; n1 =f i x ( s q r t ( min ( ( d d e l t a ) ^ 2 , time - 1 ) ) ) ; %c o n d i n t i o n n<=min ( d d e l t a , N- j ) f o r h=1:C-(time - 1) [ Value1 , Stock1 , x i 1 ]= d e s t p o i n t t r a n s ( n1 , time , h , Stock0 , Value , xi , d e l t a , i ) ; %%%%%%Find o p t i m a l v a l u e and s h a r e [ V, Vh ] = o p t h e d g e t r a n s ( Value1 , Stock1 , xi1 , alpha , Stock ( h , time ) ) ; %f u n c t i o n h s t a r ( h , time -1)=Vh ; Value ( h , time )=V; c l e a r Value1 Stock1 x i 1 V Vh x i ( h , time ) = h s t a r ( h , time - 1); % make i t a s a number o f s h a r e s f o r f u t u r e end end Vl0 = Value ( 1 , time ) ; %t h e minimum upper bound f u n c t i o n [ Value1 , Stock1 , x i 1 ]= d e s t p o i n t t r a n s ( n1 , time , h , Stock0 , Value , xi , d e l t a , i ) %From g i v e n node ( i , j ) , t h e c h i l d r e n nodes a r e ( i+n , j+n ^ 2 ) , a l s o i n t h i s c a s e we need %numbers o f s h a r e s f o r t h e c h i l d r e n nodes a s w e l l . p = 1; f o r n=-n1 : n1 i f n~=0 if time -1>=n^2 94 %o p t i m a l hedge %o p t i m a l v a l u e A = 1 :C Value (A, time ) = max( Stock (A, time)- S t r i k e , 0 ) ; %t r a n s a c t i o n c o s t r a t e %matrix o f number o f s h a r e s

APPENDIX E. MATLAB CODE [ t f , i n d e x ] = ismember ( i ( h , time )+n , i ( : , time -n ^ 2 ) ) ; Value1 ( p ) = Value ( index , time -n ^ 2 ) ; %j+n^2 Stock1 ( p ) = Stock0  exp ( ( i ( h , time )+n )  d e l t a ) ; %i+n x i 1 ( p ) = x i ( index , time -n ^ 2 ) ; %number o f s h a r e s a t ( i+n , j+n ^ 2 ) p = p+1; end end end f u n c t i o n [ V, Vh ] = o p t h e d g e t r a n s ( Value1 , Stock1 , xi1 , alpha , Stockhtime ) %This f u n c t i o n f i n d t h e o p t i m a l v a l u e with t r a n s a c t i o n c o s t K1 = l e n g t h ( Value1 ) ; f 1 = c a t ( 2 , 1 , 0 , z e r o s ( 1 , K1 ) ) ; b=c a t (2 , - Value1 , xi1 , - x i 1 ) ; %make A and b , A1 = c a t (2 , - o n e s (K1, 1 ) , ( - ( Stock1 -Stockhtime ) ) ' , a l p h a .  d i a g ( Stock1 ) ) ; A2 = c a t ( 2 , z e r o s (K1 , 1 ) , o n e s (K1,1) , - eye (K1 ) ) ; A3 = c a t ( 2 , z e r o s (K1,1) , - o n e s (K1,1) , - eye (K1 ) ) ; A = c a t ( 1 , A1 , A2 , A3 ) ;

%upper and l o w e r bounded l b = c a t (2 , - 10^4 , - 10^4 , z e r o s ( 1 , K1 ) ) ; ub = c a t ( 2 , 1 0 ^ 4 , 1 0 ^ 4 , 1 0 ^ 4  o n e s ( 1 , K1 ) ) ; [ x , f v a l ] = l i n p r o g ( f1 , A, b , [ ] , [ ] , lb , ub ) ; Vh = x ( 2 ) ; %o p t i m a l h e d i g i n g V = fval ; %o p t i m a l v a l u e

Convex Hull Optimization-Without Transaction Costs %This code r e p r e s e n t t h e same o p t i m i z a t i o n but with Convex H u l l method %%%%% N=100; volannual = 0 . 2 ; T = 2/12; d e l t a = s q r t ( r e m a i n v o l /N ) ; ddelta = 3 Strike = 1; i = m a t r i x I (N ) ; C = length ( i ( : , 1 ) ) ; Inputs %number o f s e t p s i n t h e t r e e %annual v o l a t i l i t y %(number o f month ) / 1 2 %N\ d e l t a = v 0 %d/ d e l t a % Strike Price % i s a function % length of i in maturity 95

r e m a i n v o l = T  ( v o l a n n u a l ^ 2 ) ; %r e m a i n d i n g v o l a t i l i t y v 0

APPENDIX E. MATLAB CODE Value = ( - 100)  o n e s (N+1,N+1); Stock = ( - 100)  o n e s (N+1,N+1); h s t a r = z e r o s (N,N ) ; time = 1 ; Stock0 = 1 ; Stock ( : , time ) = Stock0  exp ( i ( : , time )  d e l t a ) ; %%%% P a y o f f a t T for end f o r time = 2 :N+1 Stock ( 1 : C-(time - 1) , time ) = Stock0  exp ( i ( 1 : C-(time - 1) , time )  d e l t a ) ; n1 = f i x ( s q r t ( min ( ( d d e l t a ) ^ 2 , time - 1 ) ) ) ; %c o n d i n t i o n n<=min ( d d e l t a , N- j ) f o r h=1:C-(time - 1) [ Value1 , Stock1 ] = d e s t p o i n t ( n1 , time , h , Stock0 , Value , d e l t a , i ) ; %f u n c t i o n %Convex H u l l Method i f f i n d ( Value1 )~=0 %I f a l l p o i n t s a r e i n t h e same l i n e X =[ Stock1 ( : ) Value1 ( : ) ] ; dt = DelaunayTri (X ) ; scopedWarnOff = warning ( ' o f f ' , 'MATLAB: TriRep : EmptyTri2DWarnId ' ) ; r e s t o r e W a r n O f f = onCleanup (@( ) warning ( scopedWarnOff ) ) ; t r i = dt . T r i a n g u l a t i o n ; i f isempty ( t r i ) maxx1 = Stock1 ( 1 ) ; maxx2 = Stock1 ( 2 ) ; maxy1 = Value1 ( 1 ) ; maxy2 = Value1 ( 2 ) ; else %o t h e r w i s e , f i n d t h e h u l l l i n e k = c o n v h u l l ( Stock1 , Value1 ) ; maxa = f i n d ( k==max( k ) ) ; mina = f i n d ( k==min ( k ) ) ; k ( 1 : maxa - 1) = [ ] ; l o c a l x = Stock1 ( k ( : ) ) ; l o c a l y = Value1 ( k ( : ) ) ; v = [ l o c a l y (1) - l o c a l y ( l e n g t h ( k ) ) ; -( l o c a l x (1) - l o c a l x ( l e n g t h ( k ) ) ) ] ; r = [ l o c a l x ( l e n g t h ( k)) - l o c a l x ; l o c a l y ( l e n g t h ( k)) - l o c a l y ] ; d = []; f o r i i =1: l e n g t h ( k ) d ( i i ) = abs ( dot ( v , r ( : , i i ) ) ) / norm ( v ) ; end A = 1 :C Value (A, time ) = max( Stock (A, time )- S t r i k e , 0 ) ; %matrix o f number o f s h a r e s

96

APPENDIX E. MATLAB CODE d s o r t = s o r t ( d , ' descend ' ) ; i f isempty ( f i n d ( d ) ) maxy2 = l o c a l y ( 1 ) ; maxy1 = l o c a l y ( l e n g t h ( k ) ) ; maxx2 = l o c a l x ( 1 ) ; maxx1 = l o c a l x ( l e n g t h ( k ) ) ; else [ s1 , i n d e x 1 ] = ismember ( d s o r t ( 1 ) , d ) ; maxx2 = l o c a l x ( i n d e x 1 ) ; maxy2 = l o c a l y ( i n d e x 1 ) ; i f l e n g t h ( f i n d ( d s o r t ))==1 i f Stock ( h , time)<=maxx2 maxx1 = l o c a l x ( l e n g t h ( k ) ) ; maxy1 = l o c a l y ( l e n g t h ( k ) ) ; else maxx1 = l o c a l x ( l e n g t h ( 1 ) ) ; maxy1 = l o c a l y ( l e n g t h ( 1 ) ) ; end else [ s2 , i n d e x 2 ] = ismember ( d s o r t ( 2 ) , d ) ; maxx1 = l o c a l x ( i n d e x 2 ) ; maxy1 = l o c a l y ( i n d e x 2 ) ; end end end %V and h  h s t a r ( h , time ) = ( maxy1-maxy2 ) / ( maxx1-maxx2 ) ; % f i n d h s t a r Value ( h , time ) = h s t a r ( h , time )  ( Stock ( h , time )-maxx1)+maxy1 ; else Value ( h , time ) = 0 ; end clear end end Vl0=Value ( 1 , time ) ; %t h e minimum upper bound Value1 Stock1

97

Bibliography
[Avellaneda and Par´ as, 1995] Avellaneda, M. and Par´ as, A. (1995). Dynamic hedging with transaction costs: From lattice models to nonlinear volatility and free boundary problems. It is available at www.math.nyu.edu/faculty/avellane/gordo.ps. [Bellman, 1957] Bellman, R. (1957). Dynamic Programming. Princeton, NJ: Princeton University Press,. [Bensaid and Scheinkman, 1992] Bensaid, B., J. L. H. P. and Scheinkman, J. (1992). Derivative asset pricing with transaction costs. Mathematical Finance, 2(2):63­86. [Bertsekas, 1976] Bertsekas, D. P. (1976). Dynamic Programming and Stochastic Control. New York, NY: Academic Press,. [Black and Scholes, 1973] Black, F. and Scholes, M. (1973). The pricing of options and corporate liabilities. Journal of Political Economy, 81(3):637­654. [Boyle and Lin, 1997] Boyle, P. and Lin, X. (1997). Optimal portfolio selection with transaction costs. North American Actuarial Journal, 1:27­39. [Britten and Neuberger, 1996] Britten, J. M. and Neuberger, A. (1996). Arbitrage pricing with incomplete markets. Applied Mathematical Finance, 3:347­363. [Britten and Neuberger, 1998] Britten, J. M. and Neuberger, A. (1998). Welcome to the real world. Risk, Black-Scholes-Merton Supplement,, 11(9):11­13. [Cox and Rubinstein, 1979] Cox, J., R. S. and Rubinstein, M. (1979). Option pricing: A simplified approach. Journal of Financial Economics, 7:229­263. [DeMarzo and Mansour, 2005a] DeMarzo, P. M., K. I. and Mansour, Y. (2005a). gret and options: A game theoretic approach for option pricing. levine.sscnet.ucla.edu/archive/refs4782713000000000012.pdf. [DeMarzo and Mansour, 2005b] DeMarzo, P. M., K. I. and Mansour, Y. (2005b). Online trading algorithms and robust option pricing. In Proceedings of the thirty-eighth annual AMC Symposium on Theory of Computing, pages 477486, New York, NY, USA, 2006. ACM. 99 On re-

It is available at

BIBLIOGRAPHY

BIBLIOGRAPHY

[Fedotov and Mikhailov, 2001] Fedotov, S. and Mikhailov, S. (2001). Option pricing for incomplete markets via stochastic optimization: Transaction costs, adaptive control, and forecast. Int. J. of Theoretical and Applied Finance, 4(1):179­195. [Geletu, 2007] Geletu, A. (2007). Solving optimization problems using the matlab optimization toolbox. A Tutorial, available at www.faculty.jacobs-university.de/poswald/teaching/OptimMatlab.pdf. [Hao, 2008] Hao, T. (2008). Option pricing and hedging bounds in incomplete markets. Journal of Derivatives & Hedge Funds, 14(2):78­89. [Harris, 2003] Harris, L. (2003). Trading and exchanges: market microstructure for practitioners the main book rebonato idea. Oxford University Press US. [Hull, 1997] Hull, J. (1997). Option, Futures and Other Derivatives. Prentic Hall. [King, 2002] King, I. (2002). A simple introduction to dynamic programming in macroeconomic models. It is available at researchspace.auckland.ac.nz/bitstream/handle/2292/190/230.pdf. [Leland, 1985] Leland, H. (1985). Option pricing and replication with transaction costs. Journal of Finance, 40:1283­1301. [Merton, 1973] Merton, R. (1973). Theory of rational option pricing. Bell Journal of Economics and Management Science, 4(1):141­183. [Osborne, 1959] Osborne, M. F. M. (1959). Brownian motion in the stock market. Operations Research, 2:145­173. [Rebonato, 2004] Rebonato, R. (2004). Volatility and Correlation: The Perfect Hedger and the Fox. Wiley Finance. [Roorda and Schumacher, 2005] Roorda, B., E. J. and Schumacher, J. (2005). Performance of hedging strategies in interval models. North American Actuarial Journal, 41:575­592. [Sargent, 1987] Sargent, T. J. (1987). Dynamic Macroeconomic Theory. Harvard University Press. [Stokey and Prescott, 1989] Stokey, N., L. R. and Prescott, E. (1989). Recursive Methods in Economic Dynamics. Cambridge, MA: Harvard University Press. [Tsitsiklis, 1997] Tsitsiklis, N., B. D. (1997). Introduction to Linear Optimization. Athena Scientific.

100

