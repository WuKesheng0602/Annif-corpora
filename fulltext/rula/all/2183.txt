NOTE TO USERS

This reproduction is the best copy available.

UMI'

A VISUALIZATION APPROACH TO FACILITATE THE EARLY STAGES OF PRODUCT DESIGN

By Jayesh Parmar Bachelor of Mechanical Engineering, Nagpur University, 1993

A thesis presented to Ryerson University in partial fulfillment o f the requirements for the degree of Master of Applied Science in the Program of Mechanical Engineering

PROPERTY OF RYERSON UNIVERSITY UBRMIV

Toronto,Ontario,Canada, 2004 @(Jayesh Parmar) 2004

(i)

UMI Number: EC53416

INFORMATION TO U SERS

T he quality of this reproduction is d ep en d e n t upon th e quality of th e copy subm itted. Broken or indistinct print, colored or poor quality illustrations and photographs, print bleed-through, su b stan d ard m argins, and im proper alignm ent can adversely affect reproduction. In the unlikely event that the author did not sen d a com plete m anuscript and th ere a re missing p ag es, th e se will b e noted. Also, if unauthorized copyright material had to be rem oved, a note will indicate the deletion.

UMI
UMI Microform EC53416 C opyright2009by P ro Q u est LLC All rights reserved. This microform edition is protected ag ain st unauthorized copying under Title 17, United S ta te s C ode.

P ro Q u est LLC 789 E ast E isenhow er Parkw ay P.O. Box 1346 Ann Arbor, Ml 48106-1346

A UTHOR 'S DECLARA TION
I hereby declare that I am the sole author o f this thesis.

I authorize the Ryerson University to lend this thesis to other institutions or individuals for the purpose of scholarly research.

Jayesk Parmar

I further authorize the Ryerson University to reproduce this thesis by photocopying or by other means, in total or in part, at the request of other institutions or individuals for the purpose of scholarly research.

Jayesh Parmar

(ii)

BORROWER'S PAGE
Ryerson University requires the signature o f all persons using or photocopying this thesis. Please sign below, and give address and date.

Name

Address

Date

(iii)

ABSTRACT
A Visualization approach to facilitate the early stages of Product Design Jayesh Parmar 2004,MASc, Department of Mechanical Engineering Ryerson University

Diagramming languages are heavily used in design and system analysis. Different languages have varying impacts on the effectiveness of designers. The author believes that there is no appropriate diagramming tool that is of substantial benefit to designers, especially in the early, pre-geometry stages of product development. A new tool, design schematics (DS), is introduced to fulfill this need. The general benefits of diagramming are outlined and the potential of diagramming tools is explored. Advantages and disadvantages of some existing diagramming methods are discussed. Analysis of diagramming methods motivates the development of DS. DS is consistent with the generic design process developed by Salustri. Several interrelated examples demonstrate how DS can capture important information during design stages. A detailed example of a coffee maker is carried out. It is executed as if the author were actually designing a coffee maker. Interrelated diagrams of the design h ig h li^ t how DS helps in designing during the early stages. Computer support for development and full exploitation of DS is needed. The author believes that DS can be of great benefit to practising engineers. While there is not yet any quantitative data by which DS can be evaluated, there is anecdotal evidence suggesting that the tool has potential to be of benefit in design areas.

(iv)

ACKNOWLEDGEMENTS

I would like to express my gratitude to all those who contributed to this work directly as well as indirectly.

To work with Dr. Filippo Salustri was a lifetime opportunity. His trust in his students, continuous encouragement, strong support, insi^tful guidance makes a student perform far better than he is. I sincerely wish to thank him for all the help provided to me. I really enjoyed the exchange of ideas that helped me to formulate this work. Thank you. Sir! The financial support through Professor Filippo. A. Salustri of Department of Mechanical Engineering- Ryerson University is greatly appreciated. My family had an indirect contribution to this research. I would like to thank them for their patience, understanding and emotional support. I am also thankful to all my fellow graduate students specially mitesh, shailesh, pramit and gajendra for keeping my spirit up.

And above all, I thank God for giving me the strength and determination.

(V)

TO MY PARENTS &WIFE

(vi)

TABLE OF CONTENTS
A VTHOR DECLARA TION-----------------------------------------------------------------------Â«

ABSTRACT- ------------------------------------------------------------------------------------------- iv A CKNOWLEDGEMENTS-------------------------------------------------------------------------- v
t a b l e o f c o n t e n t s --------------------------------------------------------------------------- v/7

L IS T OF FIGUJOES--------------------------------------------------------------------------------- -A : NOMENCLA TORE-------------------------------------------------------------------------------OBJECTIVE AND SCOPE OF PRESENT STUDY-------------------------------------- --xv PREFACE OF THESIS-------------------------------------------------------------------------- -xvi

Chapter 1: Introduction and Background 1.1 Introduction--------------------------------------------------------------------------------------- 1 Chapter 2: Literature Review---------------------------------------------------------------------- 8 2.1 Introduction-------------------------------------------------------------------------------- 8 2.2 Schema based system-------------------------------------------------------------------- 8 2.2.1 Unified Modeling language------------------------------------------------ 8 2.2.2 Entity Relationship Diagram---------------------------------------------- 11 2.2.2.1 Mapping constraintsin ER Diagram------------------------- 12 2.3 Flow charts and related methods----------------------------------------------------- 14 2.3.1 Chapin charts----------------------------------------------------------------- 14 2.3.2 Design Structure Matrix--------------------------------------------------- 17 2.3.2.1 The House of Quality-------------------------------------------18 2.4 Drawing Tools--------------------------------------------------------------------------20 2.4.1 Visio, Smartdraw and other drawing tools----------------------------- 20 2.4.2 Concept maps----------------------------------------------------------------21 2.5 Physical system modeling------------------------------------------------------------ 24 2.5.1 Bond Graphs-----------------------------------------------------------------24 2.5.2 IDEF--------------------------------------------------------------------------26

(vii)

2,5.3 Modelica- Design Language----------------------------------------------28 2.6 Conclusion--------------------------------------------------------------------------------30

Chapter 3: Design Schematics-------------------------------------------------------------------- 32 3.1 Introduction-------------------------------------------------------------------------------32 3.2 Generic design process----------------------------------------------------------------- 33 3.3 Development of design schematics---------------------------------------------------35 3.3.1 Design schematics are based on concept maps------------------------ 35 3.3.2 Usage schematics------------------------------------------------------------ 39 3.3.3 Product design schematics------------------------------------------------- 43 3.3.4 Functional schematics-------------------------------------------------------48 3.3.5 Product architecture schematic-------------------------------------------- 52 3.4 Using design schematics in product design----------------------------------------- 55 3.5 Section Summary------------------------------------------------------------------------ 66

Chapter 4: Evaluation and Discussion---------------------------------------------------------68 4.1 Evaluation of DS------------------------------------------------------------------------ 68 4.1.1. Anecdotal evidence of DS benefits-------------------------------------- 68 4.1.1.1 Evidence from teaching----------------- ---------------------- 69 4.1.1.2 Evidence from industry----------------------------------------- 69 4.1.2 Comparison of design schematics to design structure matrices -- 69 4.2 Discussions-------------------------------------------------------------------------4.3 Computerization of DS----------------------------------------------------------------94 4.4 Contribution----------------------------------------------------------------------------- 95 Chapter 5; Conclusion and Future W ork---------------------------------------------------- 97 5.1 Conclusion ----------------------------------------------------------------------------- 97 5.2 Future W ork------------------------98 86

References-----------------------------------------------------------------------------100
(viii)

Appendix A; Design schematics for various products

A1

(ix)

LIST OF FIGURES
Figure 2.1 Sequence diagram representing the instance of business process---------------- 9 Figure 2.2 Activity diagram representing allowable order o f business---------------------- 10 Figure 2.3 Sample ERD for the operator of a machine------------------------------------------12 Figure 2.4 Mapping one to one-------------------------------------------------------------------- 12 Figure 2.5 Mapping one to many------------------------------------------------------------------ 13 Figure 2.6 Mapping many to one------------------------------------------------------------------13 Figure 2.7 Mapping many to many--------------------------------------------------------------- 13 Figure 2.8 Chapin chart for manufacturing process---------------------------------------------15 Figure 2.8a DSM representation--------------------------------------------------------------------17 Figure 2.8b House of quality------------------------------------------------------------------------ 19 Figure 2.9 Concept map for an automobile-^--------------------------------------------Figure 2.10 Concept map for an automobile with aid of color--------------------------------23 Figure 2.1 la A simple mechanical system-------------------------------------------------------25 Figure 2.1 lb Representation of mechanical system---------------------------------------- -- 25 Figure 2.11c Bond Graph for mechanical system----------------------------------------------- 26 Figure 2.12 ((ICOM) IDEF0 Function Box and Interface Arrows)------------------------- 27 Figure 2.13 Modelica example with different libraries-----------------------------------------29 Figure 3.1 A Generic Design Process compared with D S -------------------------------------35 Figure 3.2 PDS example for a punch--------------------------------------------------------------- 36 Figure 3.3a Usage scenario for a chair-------------------------------------Figure 3.3b Usage scenario for a punch----------------------------------------Figure 3.4 PDS for a chair----------------------------------------------------------------------------45 Figure 3.5 PDS for a punch-------------------------------------------------------------------------- 47 Figure 3.6 Function model for a chair------------------------------------------------------------- 49 Figure 3.7 Function model for a chair with model identified--------------------------------- 50 Figure 3.8 Function model of a punch-------------------------------------------------------------51 Figure 3.9 Function model for a punch with model identified-------------------------------- 52 Figure 3.10 PAS for a chair------------------------------------------------------------------------- 53 23

(x)

Figure 3.11 PAS for a punch----------------------------------------------------------------------Figure 3.12 Usage scenario for a coffee maker------------------------------------------------Figure 3.13 Usage scenario combined with FR and PC's-------------------------------------57 Figure 3.14 FRs, PCs and Cs for the coffee maker-Step-I-------------------------58

Figure 3.15 FRs,PCs and Cs for the coffee maker-Step-II-------------------------------------60 Figure 3.16 Usage scenario combined with FR and PC----------------------------------------62 Figure 3.17 Functions and sub-systems----------------------------------------------------------- 63 Figure 3.18 Function model------------------------------------------------------------------------Figure 3.19 Product architecture system for coffee maker--------------------------Figure 4.1(a) Triangular DSM with four entities-----------------------66 72

Figure 4.1(b) DS representing triangular DSM with four entities--------------------------- 72 Figure 4.2 (a) Triangular DSM with 5 entities ------------------------------------------------ 72 Figure 4.2(b) DS representing triangular DSM with 5 entities--------------------------------73 Figure 4.3(a) Triangular DSM with 6 Entities-------------------------------------------------- 73 Figure 4.3(b) DS representing triangular DSM with 6 entities--------------------------------74 Figure 4.4(a) DSM with three chunks and one overlap------------------------------------- --75 Figure 4.4(b) DS representing DSM with three chunks and one overlap------------------ 75 Figure 4.5(a) DSM with three chunks and 2 overlaps-------------76 Figure 4.5(b) DS representing DSM with three chunks and 2 overlaps-------------------- 76 Figure 4.6(a) DSM with three chunks with one overlap--------------------------------------77 Figure 4.6(b) DS representing DSM with three chunks with one overlap----------------- 77 Figure 4.7 Parameter-based DSM for brake system-- ---------------------------------------78 Figure 4.8 DS representing DSM for brake system (star shape)----------------------------- 79 Figure 4.9 DS representing DSM for brake system {triangular element)------------------- 80 Figure 4.10 Material interactions between components for an automobile climate control System (DSM)--------------------------------------------------------------------------Figure 4.11 Material interactions between components for an automobile climate control system after clustering (DSM)-------------------------------------------------------Figure 4.12 Car layout system -stage-1 ---------------------------------------------------------Figure 4.13 Car layout system -stage-II--------------------------------------------------------Figure 4.14 Car layout system -stage-III---------------------------------------------------------

(xi)

Figure 4.15 Car layout system -stage-IV ------------------------------------------------------- 86 Figure 4.16 Functions and sub-systems--------------------------------------------------------- 88 Figure 4.17 Usage scenario combined with FR, PC------------------------------------------- 89 Figure 4.18 Component based system------------------------------------------------------------91

(xii)

NOMENCLA TVRE
DS FR PC C PM PDS Design schematics Functional requirements Product characteristics Constraints Performance metrics Product design schematics Design structure matrix Entity relationship diagram Integrated DEFiniton language Computer aided design Unified modified language Structured Analysis and Design Technique Usage scenario Functional schematics Product architecture schematic Material information system Enterprise Resource Planning Corrective action report Quality Non conformity

DSM ERD -

IDEF CAD UML SADT US FS PAS MIS ERP -

CAR Q NC -

(xiii)

MAINLEGENDS

Step

^ c o n stra in ts^

product charactershics

C

functional ^ requirement

J

decision

start o f a procÃ¨s

resources/information consumed

resources/information flowing out

non consumed resources

(xiv)

;Modules :

Sub-system s

sub-functions

Important sub-functions

- M aterial flow E nergy flow inform ation flow

(xv)

OBJECTIVE AND SCOPE OF PRESENT STUDY
The present study intends to state the importance of the diagrammatic approach and evaluate the need for a new diagramming tool in the initial stages of design. Most of the tools presently available have shortcomings in this respect. The author has used a generic design process (GDP) developed by Salustri to introduce a new diagramming tool Design schematics (DS) that will respond to the needs of designers. DS consists of interrelated diagrams that bring out all relevant design information at initial stages. Usage scenarios identify the customer needs by thinking of how a product can be used by a user. Product design schematics guide the formalization of requirements of a design problem. They help to lay out functional requirements, product characteristics, constraints and performance metrics for the product. A function schematic breaks the function into sub functions and identifies modules. Product architecture diagrams includes subsystems of a product and shows the combination of mass, flow and energy that occur during operation.

Needs for computerization have been discussed to exploit DS in a complete manner. Coding and writing an algorithm is future work.

DS has been compared with design structure matrices to show how interpretation of information differs.

(xvi)

PREFACE OF THESIS
The following provides a brief description of material covered in this thesis. This discussion emphasizes the importance of the diagramming technique in early design stage of a product. Chapter 1 covers the introduction and background of the diagramming techmque and what roles it plays in design. The chapter discusses the features of the early design that distinguish it from the later stages. It also covers some fundamental requirements of a tool to support early design Chapter 2 reviews works from computer science, systems modeling, engineering, project management and various kinds of block diagrams. Their advantages and disadvantages have been discussed with respect to early design tools. Key principles from these diagramming techniques are discussed. Chapter 3 introduces a new diagramming tool Design schematics (DS) that will fulfill all requirements in the early stage of design. DS is in line with the generic design process (GDP) developed by Salustri to represent the fundamental and common elements of design. The author gives an introduction to design schematics through a set of examples to show how it captures all the design information during initial stages. This chapter also addresses in detail the example of a coffee maker. Chapter 4 evaluates DS th ro u ^ comparative studies with design structure matrices. This chapter further discusses other ideas that were considered but found to be for one reason or another inappropriate for the scope of this work. It discusses fundamental reasons for the computerization of DS. It also includes the author's contribution. Chapter 5 summarizes the conclusion and talks about future work.

(xvii)

CHAPTER 1 Introduction and Background
1.1 Introduction
Design is a dialogue between designers and users. Good designs allow them to communicate effectively [1]. The design begins with the users and their problems that the designer seeks to understand by some means. On the basis of this understanding, the designer builds a conceptual model of the users and the work they intend to accomplish. This model becomes a plan for the design. Through an effective design, the designer conveys a conceptual model that is ultimately based on insight into users and their problems. For a design to be successful, it is imperative that it is presented in a simple and clear manner. Design must be clear e n o u ^ to be understood to everyone in the product development team, especially if concurrent engineering and related practices are to yield their full benefits [2]. The concurrent engineering process has great relevance since it deals with the parallÃ©lisation of coupled tasks. Concurrent engineering approaches have been successfully applied within many areas of modem design, engineering, construction, and manufacturing to deliver completed products more quickly and efficiently. It develops various models, descriptions, and subsystems, at the same time requiring access to many different kinds of expertise. Where the work products are largely independent of one another, their development can be carried out in independent, parallel activities; where they are significantly related or interconnected, concurrent activities will need to be coordinated through effective communication linkages of one form or another. Judging these outcomes, one can determine how important role design will play in concurrent engineering. Clear and concise information will also help colleagues, suppliers and different teams to understand easily. It is very likely that the designers and the recipients of the information may not be in the same room and may not speak the same language. The only available translator is the design itself. Lessening the dependence on natural

language could ftirther help in the internationalization of the design information and could thus benefit diverse design teams [2]. Diagramming figures prominently in design (e.g., whiteboards, meeting sketches). The field of diagrammatic knowledge representation has recently become a rapidly growing area of research in design, artificial intelligence, and cognitive science. It should not be surprising since visual representation and thinking have been long considered to be a widespread and effective mode of human thinking and problem solving [3]. Some research has been reported on the roles of the diagrammatic technique in human problem solving. Larkin and Simon discussed extensively the advantages of diagrams for facilitating inference about topological or geometric relationships [4]. Chandrasekaran and Narayananan [5], Novak and Buiko [6], and others have also pointed out the usefulness of diagrams to human problems solvers as a device to aid in visualization or prediction. Lindsay [7] uses constraint maintenance techniques to manipulate a diagrammatic representation to make inferences and test conjectures in qualitative geometric reasoning; his goal is to demonstrate that a combination of prepositional and pictorial representations offers more psychological plausible and computationally efficient way of reasoning about mathematical problems. Novak and Buiko [6] and others have explored the idea that diagrams may sometimes be used in selection of an appropriate method to solve a problem, that is, as an "aid in the organization of cognitive activity" [8]. Diagrams can make the visualization of a complex product model, organization, and process models simpler and more intuitive, especially for non-geometric information [9]. Engineers often employ diagrams as a visual language to study and to gain intuitive understanding. "Visual language" in this context means perceivable by sight (i.e., with the help of diagrams) as opposed to the understanding of written text. Engineers often rely on sets of coherent diagrams rather than mathematical models in preliminary analysis. In many engineering problems, drawing a diagram is a crucial step in the problem solving process [10]. Diagrams are useful in design because they are dense, simple, intuitive with respect to text and easy to follow. Diagrams are used as "a visual language that can be understood with the minimum of textual comments"[10]. Diagrams often reveal important information that may not be

explicit in a written description, and can help one gain insights into the nature of the problem. Thus, information becomes not only convenient to represent but at the same time it becomes lucid to understand. A well-represented diagram is effective in presenting information in a way that makes it easy for humans to perceive and reason with [11]. Besides presenting final results, a diagrammatic approach can convey valuable information that helps lead to the solution. A salient feature of diagrammatic figures in many situations is its qualitativeness. People reason with diagrams to get rough, qualitative answers [10]. This is important because qualitative techniques are extremely useful in analyzing a problem and in gaining valuable insight into the range of possible solutions. An initial qualitative understanding thus obtained can guide the later analysis by constructing appropriate models and employing appropriate analysis methods. Finally, by providing visual inspection of diagrams, rather than written information, the diagrammatic approach can serve as a means to guide the engineer to choose an efficient problem solving method. Design practices obey on the 80/20 Rule (aka the Pareto Principle). In other words, 80% of a product's performance (with respect to cost, quality, function, usability etc) is set by the decisions taken in the first 20% of the development process (i.e. during design). This means early design decisions are most crucial, and that early design decisions are qualitative. These early stages are generally those that precede the determination of precise geometry. It may be, depending on the particular design discipline, that general shapes are used during early design to promote thinking about the design problem, but such shapes are also highly qualitative - more a special kind of diagram than an actual model of product geometry. processes. Diagrammatic representations use diagrams to represent data and knowledge. A distinction can be made regarding the method of retrieving information fi-om the representation. The needed information can usually be simply observed in the diagram, whereas it must be inferred or interpreted fi-om textual descriptions of the facts. Some of the main advantages of diagrammatic representations can be summarized as follows: As such, the early stages extend from requirements engineering, through concept design and systems design stages o f typical design

Â· Â·

It permits explicit representation and direct retrieval of information. It permits effective control of reasoning process in both areas (data as well as solution space)

Â·

The reasoning process and its result are more natural and understandable to humans. Computer-aided Drafting (CAD) drawings are one kind of "diagramming" for

products. However, CAD only applies "downstream", i.e., CAD tools can be used to visualize a product once its initial geometry has been established [9]. Moreover, CAD is used primarily to generate drawings, not to perform reasoning tasks or brainstorm new ideas. Over the years, CAD has benefited the field of engineering by increased productivity, reducing a product's time to market, and improving manufactureability. Unfortunately, CAD applications are only able to capture a product's geometrical features, but not a product's function, usage scenarios or conceptual ideas behind it. If a tool is developed that can perform these operations, a designer would be able to express himselfberself better during the initial design stages. Presently, there is no diagrammatic language available for the early stages of design. Most o f the tools available have shortcomings in this respect. They fail to satisfy the needs pertaining to diagrammatic information in the early design stages. Many tools are designed and built with little consideration for how they will be used and how they can support best the work their users will be doing. Therefore, the author has developed a new diagrammatic tool called design schematics (DS) that is discussed in length in the chapter 3. This thesis will present work towards a diagrammatic language for "upstream"(i.e., initial) design stages. It is a part of a funded research program to develop new informal tools and methods for design engineering that seeks to augment the thinking skills of designers. Features of early design that distinguish it from later stages are: Â· Early design treats ill-defined problems where information is often vague, incomplete, and qualitative. Â· Decisions taken during early design are the most critical to the performance of a product (with respect to cost, manufacture, quality, usability, reliability, safety, environmentalism, etc.) as indicated by the Pareto principle. The cost of addressing

an error in a product design process increases geometrically with time between commission of the error and its detection - the earliest errors are the most likely to be most expensive to fix. Â· Early design is the least well-structured stage of product development, with relatively little research historically. Â· Early design is a learning process. Designers must gain a deep understanding of a design problem to design an appropriate solution. The early design stages are where the most substantial increases in understanding occur. So, methods for early design must promote and facilitate learning by designers. Â· Early design is arguably the most "creative" part of design, and therefore the least likely to submit to "scientific" analysis and description. Â· Virtually no tools (computer-based or otherwise) support early design. Because of the above points, early design is an extremely intensive cognitive process - i.e., the human mind is the principal agent of design. Compared to the "downstream" stages (detailed design, manufacturing, etc.), where human cognition is generally limited to high-level analysis and decision-making, human cognition in early design also includes synthesis, qualitative reasoning, and information management. Given this characterization of early design, we can establish some fundamental requirements of a tool to support early design. Â· Flexible structure. A tool for early design must be extremely flexible because how early design is conducted is so highly variable. What is needed is a language.

Consider English: with a fixed and finite vocabulary and grammar, a virtually infinite number of sentences can be constructed. What is needed is a language for early design. Â· Adaptable. Different designers, team, companies, etc. treat early design differently. A tool for early design must be able to adapt to the designer's cognition. designer must not be required to adapt to the tool. The

Â·

Light-weight. A tool cannot impose a noticeable administrative burden on designers. The tool must be intuitive to its users. We are not referring to usability of software, but rather the usability of the underlying language that such software implements.

Â·

Focus attention. Even in early design, the amount of pertinent information can be large. The nature of this information is such that it is both poorly structured and highly interrelated. This results in information structures that are very complex and therefore difficult for a designer to grasp as a whole. To promote learning about the design problem by the designer, a suitable tool must allow designers to focus their attention in specific "regions" of both the problem space and the solution space. However, the tool must simultaneously maintain the interrelations between all information elements, even those not currently focused on by designers.

Â·

Universally applicable. To keq) the language "li^t-w eight" and intuitive throughout the design process, the language must adequately and uniformly address all the early design stages, which we take to include: requirements engineering, concept design, systems design, and configuration and layout.

Â·

Promote learning.

Since early design is a learning process, the language should

promote learning by the designer. This means the language should be consistent with models of human learning. Â· Assist development of designers' emergent knowledge of designs. Designers tend to focus on specific issues that can have global implications. Because of this focus, designers can lose the sense of the overall design and the interactions that can occur between design elements that are treated separately by a design team. An appropriate language for early design should ensure that emergent properties of a design (i.e., properties that arise firom integration of different design elements) are made evident to designers. Emergent properties are nothing other than "implicit facts" affecting both expressiveness and effectiveness of visual languages. The early design stages are heavily influenced by individual experience and preference, and by group dynamics and synergy, which are not captured readily by tools that must be necessity committed to some underlying methodology. The solution lies in developing simpler tools that rely more on informal representation of product and design

information. Also, the information available at this stage is vague and qualitative. Mapping this information into software would be a difficult task. There has been ongoing work since many years to develop software that will support qualitative information (e.g., sketching with the aid of computer). Such software remains expensive and inconvenient to use compared to a sheet of paper and a pencil [2]. Existent diagrammatic methods lack flexibility required for the early stages of design. They are applicable and best suited to specifying designs once the overall conceptual and system design have been done [2]. This point shall be discussed further in chapter 2.The other main disadvantage o f most of these methods is that they provide well-defined structures to specify product information explicitly and prepare it for various analyses. This is not in itself bad, but in doing so these tools tend to have too many constraints on the early design stages, which can stifle innovation [2]. The drawbacks in existing diagramming methods lead to a need for a new integrated diagramming tool. The author's work on Design Schematics (DS) is intended to fill this role. The thesis is aimed towards understanding the role of diagrammatic tools in the early design stages. In this study, the author has explored the potential of diagrammatic tools and has analyzed the different diagrammatic techniques that exist on the market. DS has been introduced with a series of inter-related diagrams that the author feels might solve the problem in the initial design stages. The author's hypothesis is that since human reasoning works with such apparent ease with diagrams, a designer could relate more easily to DS, and thus the exchange of information can take place under a much wider platform. The rest o f this thesis is organized as follows. Chapter 2 deals with the literature review on various existing diagrammatic language. Chapter 3 introduces Design Schematics and explains the inter-related diagrams required in the early design stages using DS. Chapter 4 evaluates this tool through comparative study with design structure matrices and discusses the need for computerization. Conclusions and future work are discussed in Chapter 5.

CHAPTER 2 Literature Review
2.1 Introduction
The author examined many works from computer science, systems modeling, engineering, project management and various kinds of block diagrams. The author has summarized their advantages and disadvantages in this chapter, and has illustrated them examples wherever possible. The conclusion of this survey is that there are no diagramming systems able to address the needs of design engineering directly, although many usefrl elements exist scattered in the existent work.

2.2 Schema based systems
Schema based systems focus on abstract classes of entities. They consist of procedures, graphical representation techniques, and tools to support the entire development process. They define class, object, state and data flow diagrams to model a system analysis. They are heavily used in computer science but virtually vuiknown elsewhere. Schema based systems are not applicable to product development because designers tend to think in terms of exemplars or prototypes, and not in terms of classes. For example, an engineer designing an automobile engine treats his design as a model (exemplar) of an actual and specific engine, not as the class or set of all such engines. Some of these systems provide a straightforward description of how to use their representation, but using them for design is not as easy as it seems. Since most representations have been merely proposed and/or developed without being evaluated, engineers/practitioners cannot possibly know which one is more appropriate in a given situation [12]. The following sections discuss some specific schema-based systems.

2.2.1 Unified Modeling language
UML is used for describing, specifying, visualizing and documenting models of a software system. It is an industry standard language. Using UML, programmers and application architects can make a blueprint of a project, which in turn makes the actual

software development process easier. Its aim is to unify the various existing systems into a best-of-breed modeling language [13]. UML was designed to address: Â· Â· Â· Â· Business process modeling with use cases Class and object modeling Component modeling Distribution and deployment modeling UML is a standard way to create diagrams to visualise the relationship of elements to describe interrelated processes and code architecture. The author has included few diagrams here for discussion. Figure 2.1 shows the processing of an order right from ordering stage of customer to the delivery stage. Once the order is placed sales person validates the order and processes it further to the shipment. This in turn delivers the product.

:S a le s : Custom er

Com pany sh ip s a n item

Place an order

T I I

Validate th e order _________I [Order OK]: hvoke

kI Figure 2.1 Sequence diagram representing the instance of the business process [14] The advantage of this diagram is that it is possible to show even the conditions in the schematics. The total time taken can be interpreted from the distance between the two horizontal lines. The directions of the arrows show the steps of movement. Figure 2.2 shows activity diagram for the ordering process (i.e., flow of activity during the ordering process). This diagram is related to a "usage scenario" which has

1

been used in Design Schematics by the author. (Usage scenarios will be discussed in detail in Chapter 3). One of the disadvantages is that UML expresses information at a general level. Especially mapping information in case of "Activity diagram" and "sequence diagram," information is kept at general level (i.e., diagram shows only vital information). Expressing detailed information in Activity Diagrams requires too much writing in between figures. Moreover, UML is not adaptable to different approaches to product design. Instead, the designer must adapt to this tool --i.e. UML is prescriptive. It consists of notations - the symbols used in the models-and a set of rules directing how to use it [15], none of which is adaptable to user needs.

Customer requests an item

Payment com es

Customer pays for an item Item sh ip p ed ANC cu sto m er is not satisfied

Payment com es ' R e q u e s t is OK
Request is not OK

R e q u e s t is OK

Company ships an item

C u sto m er is not satisfied

Customer returns an item

C u sto m er h a s payed for an item AND h a s not returned the item within the period

R e u q e s t is not OK / Return payment

Figure 2.2 Activity diagram representing allowable order of business [14] Naturally, even when UML is mastered, there is no guarantee that the models produced will be good. Just like writing a story in a natural language, the language is just a tool that the author must master. It is still up to the author to write a good story. It is also not universally applicable because it fails to address the early design stages such as concept design, system designs, and configuration and layout.

10

Another problem in UML is that it has many kinds of different diagrams and the relationship between them is not clear i.e. they are relatively independent. This is a problem because the continuity between diagrams helps to convey information better. Therefore it fails to focus attention of the designer in specific regions of both the problem space and the solution space Some kinds of UML do take advantage of "Layout". UML does support cardinality (e.g. that an assembly requires four of one kind of part). This is an important feature which most of the diagramming languages do not have. There have been some attempts to use UML in domains other than software engineering, but none of these efforts have met with any particular success. The reason why UML has been incorporated in this study is because it uses different symbols and direction of arrows to describe processes; this is a key design feature of Design Schematics too.

2.2.2 Entity Relationship Diagram
An Entity Relationship Diagram (ERD) is a data modeling technique that creates a graphical representation of the entities, and the relationships between entities, within an system. It is often used for database design where it acts as a bridge between the system analysts and the end users. ERDs are conceptual data models that incorporate some important semantic information about the real world. It represents the real world as set of objects (entities) and relationships between those objects. The following definitions apply to ERDs. Entity. An entity is an object that is distinguishable from other objects. It can be concrete (e.g. person) or abstract (concept or holiday). It is represented by a rectangle that contains its name. A ttribute. Each entity is associated with set of attributes describing it. (e. g., name and age of a person entity). An attribute is represented by a circle that contains its name. Relationship. A relationship is an association among several entities. It is represented by a diamond that contains its name. The set of all entities or relationships of the same type is called the entity set or relationship set.

11

Lines links attributes to entity sets and entity sets to relationship sets. Figure 2.3 is illustrative of how ERDs can represent pertinent engineering information. For example, age, name and Dept are the attributes for the Operator, hence they are shown in circles. Operator and Machine are separate entities so they are represented by rectangles. "Operates" is a relationship between Operator and Machine; it is represented by a diamond.

Age

Name

Operator

Opetates

Machine

Dept

Figure 2.3: Sample ERD for the operator of a machine

2 2.2.1 Mapping Constraints in ERD
Mapping constraints express the number of entities to which another entity can be associated via a relationship. For binary relationship sets between entity sets A and B, the mapping cardinality must be one of: 1-One-to-one: Figure 2.4 shows that an entity in A is associated with at most one entity in B, and an entity in B is associated with at most one entity in A.

A

B

2. One-to-many: Figure 2.5 shows that an entity in A is associated with any number in B. An entity in B is associated with at most one entity in A.

12

Figure 2.5 Mapping one to many 3. Many-to-one: Figure 2.6 shows that an entity in A is associated with at most one entity in B. An entity in B is associated with any number in A.

Figure 2.6 Mapping many to one 4. Many-to-many: Figure 2.7 shows that an entities in A and B are associated with any number from each other.

Figure 2.7 Mapping many to many These are an essential element of the E-R diagram, which express the number of entities to which another entity can be associated via a relationship set. This is one of the important features, which is discussed later while considering features in DS. It is not possible to show task precedence, cause and effect, or time dependencies in ERDs. Sometime ERDs becomes too complicated to understand, especially at multiple levels of detail. ERDs do not permit labeling links. They also limit the use of certain shapes only, such as rectangle, oval, trapezoidal etc., and the standard methods of ERDs do not allow for new shapes to be introduced as extensions Adding colors to entity and attributes for sake of simplification and better understanding/presentation is not permitted. ERD entities with many attributes branching out from them tend to be difficult to understand. Finally, ERDs do not take advantage of graph layout.

13

2.3 Flowcharts and related methods
Flowcharts are basically used for pictorial representation of processes and procedures, and to plan steps in a project. They lack the flexibility required by a designer because they are used only for processes and not products. A designer is interested in both kinds of representation. Flow charts are simple just like ERD.

2.3.1 Chapin Charts
Chapin charts are used to express information pertaining to procedures. Procedures may be for a process, receiving or transmitting information. They were intended to replace flowcharts, but never gained popularity because they were difficult to draw and modify by hand (graphical user interfaces did not exist yet). Each plain block represents an instruction. Â· Instruction: means the simple order of steps (or other blocks). They are generally ordered from top to bottom Â· Â· Choice or Multiple Choice: is used when two or more answers are possible. Loop: is a part of a computer program that is repeated several times. The loop may be repeated a fixed number of times (counter-controlled loop) or until a certain condition is satisfied (condition-controlled loop). The author has drawn a Chapin charts as shown in figure 2.8 for a manufacturing process. Legends: ERp -Enterprise resource planning

CAR - Corrective action report Q Mis ^C - Quality -Material information system -Non-conformity

14

Legends

multiple choice

choice

V .fiÃ 'Ã®

N.Ã, Created

disposition parts

define root cause

(Isas

Action (CAR) Define created Respondents

Define response interval

*A ! " ff

^

Figure 2.8. Chapin Chart for manufacturing process

15

A major advantage of a Chapin chart is that it has very simple syntax since it uses only four symbols (i.e. Instruction, Choice, Multiple choice and Loop) and each symbol corresponds to a particular computer programming structure [16]. Chapin chart can also be used for sequencing out instructions for a particular job order starting from driving tool from one position to another, turning coolant on and off, changing the tooling etc. This could, for example, make translation into G-code fairly easy and more efficient. Chapin charts make strong use of layout; arrows and connecting lines are not used at all. It lays out processes in a stepwise, methodical manner. Choices and Loops are listed in sequential flow. This makes it convenient for the reader to understand. Chapin is better than flowcharts for large processes. It has tremendous potential as far as computer
programming is concerned. The author has determined that it can be used for

manufacturing process also, like the one shown above in figure 2.8. In that figure, an entire manufacturing process has been broken into different segments consisting of instructions, choice, multiple choices and loops. It starts with "Raw material purchased from Approved supplier" and proceeds to "Raw material received" which are both "instructions" statements. The next step is "whether inspection required?" This is an example of a Choice. If the decision is "no" then next step would be "move directly to inventory." If it is "yes," then one proceeds to subsequent instructions (i.e. quality inspection and incoming inspection). The next step is the Choice "is the lot rejected?" If the answer is "no" then next step would be "Q and ERP agent" followed by "Stock inventory." If it were "yes" then the next step would be "supplier focus." This step is followed by multiple Choice (one of NC created, disposition parts, define root cause). The next process is a Choice, "Is supplier action required?" If the answer is "no" then one can proceed to "Depositioned parts" followed by "Q and MIS Erp" and "Disposition as IS." If it is "yes" then the next statement follows (i.e. Car(s) is created and CAR coordinator is notified." This process again is followed by multiple Choice (one of Action created. Define respondents. Define response interval). The final step is proceeding to Store inventory. However content of the nodes in figure 2.8 is secondary. The whole point of the chart is to show how those units interact. Chapin charts do lack in certain areas. They apply only to discrete processes. Because o f their strict layout rules, they do not promote learning about a problem as well

16

as other methods.

Finally, because Chapin charts cannot represent manufacturing

problems, they also fail to focus the attention of designers on both the problem space and the solution space.

2.3.2 Design Structure Matrix
The Design Structure Matrix (DSM) is a tool designed for system analysis and project management. It provides a representation of complex systems and shows the interactions between its subsystems. It does this by showing the project in matrix form, which contains the activities to be carried out and their relationships to one another. DSM for components gives a sense of system architectures, engineering, and design .It can represent the costs of coordinating and organizing tasks, as well as product structure. An advantage of DSM is that it helps to reveal activity dependency and, in the case of physical assemblies, to pinpoint the interfaces. It can also help to coordinate activities of workers and teams and implement concurrent engineering practices. Figure 2.8a shows a DSM representation for three basic building blocks for describing relationships amongst system elements; parallel (or concurrent), sequential (or dependent) and coupled (or interdependent). In the parallel configuration, the system elements do not interact with each other. If the system is a project, then system elements would be project tasks to be performed. As such, activity B is said to be independent of activity A and no information exchange is required between the two activities. In the sequential configuration, one element influences the behavior or decision of another element is a uni-directional fashion. That is, the design parameters of system element B are selected based on the system element A design parameters. In terms of project tasks, task A has to be performed first before task B can start. Finally, in the coupled system, the flow of influence or information is intertwined: element A influences B and element B influences A. This would occur if parameter A could not be determined (with certainty) without first knowing parameter B and B could not be determined without knowing A. [17]

17

Three Configurations that Characterize a System Parallel A h*i Sequential Coupled

B
B A 'B B m il B B B A :B X

Figure 2.8a DSM representation [17] However, DSM also has certain drawbacks. It is hard to visualize iterative loops. The DSM grows with the square of the number of entities. For checking activity dependencies in a DSM, one needs to trace rows carefully against columns, which makes it cumbersome and time consuming. It quickly becomes inefficient since it requires a large amount of space for large products. The DSM is not universally applicable i.e., it does not address the early design stages - for example, it does not help in establishing requirements. It also fails to address the issue of design as learning.

2.3.2.1 The House of Quality
The "house of quality," the basic design tool of management approach known as quality function deployment (QFD), originated in 1972 at Mitsubishi's Kobe shipyard site. The foundation to the house of quality (HOQ) is the belief that the products should be designed to reflect customers' desires and tastes. It is used by a multi-disciplinary team to translate a set of customer requirements, market research and benchmarking data into an appropriate number of prioritized engineering targets to be met by a new product design. Figure 2.8b shows HOQ for the car door requiring least energy to open.

18

C P E N -C L 05F

E A U N G '
INSULATION

n
^

R e la fio riÃ¼ h Ã®p s
Sfronc] ;xx\.`f'vp

Medium poblfive

M if^diumnoc/aiiyc tZ C K o< 25
CUSTOMER ATTRIBUTES
E csy t:< rJo*:>e from oufs'cif*
Stuy'- v p t'n ^,'fi V HiH

J5 1 1 LU

Ii

~Ã©  5; S ^ ?' ^ %i i =i l J2\ l! g 1V 1 : : - ^ 1!

X

Sfron g n e g a tiv e

I
/

C u sto m e r p e rc e p tio n s
; 9 ; Ã

,

b l!

T

2

3

4

5

ii

L/1 5 ! / /
3

-- '

- -2.... ./i. j|A
.JV '-L

E o^y lo open 4pmou'side 2% Dof^'n'l kick back <2 Ã¨ I
D oo:Â»n'l loo^ rrrn

/ :A /6. 6 ! /6 j n 12:6 10 IS!
9 '7 6 9 13j
N ' 7 . 11 U i

-

'

No 'Odd nC '\3C M^carturcmont untt.-i

>5 iW cooi ,  ^! ur car ^ 3 /V ." >cor door
j ' ; ca r d o o f

\fh/fi\ -- [c/6 jps/1
3 .10! 9 170 2 lOi 5 ;60
10 6 ;6 0

01/9 C A P Â»6'S C A R

Â· ToifhnÃ®cai difficulty t *mnurW 'm p o ( "n ) } Esfii'nafed cost t%] j fcirgcfs

! '1 , 6 1 : 3 ; =0 6 : 4 9 ^ ; :5 :2!2.9 ;5 , .7.6; 9 : Ã 73 j 12 ifklo! % i lb 6 : lb

1 ;0 10 ' " :i

3 ; :6 : 10

3 :0 4 ^3 9 Â·/ . C 70 i' " d :>

Figure 2.8b House of quality [18] Customer attributes shown on left side of matrix is the first portion to be completed. This information is generally gathered through conversations with the customer in which they are encouraged to identify their needs and problems.

19

Customer perceptions shown on right hand side are completed next. These quantify the customer requirement priorities and the relative importance of each customer attribute from the customer's perspective. Engineering characteristics are generated by the QFD team who identify all the measurable characteristics that they perceive are related to meeting the specified customer perceptions. Interrelationships form the main center body of the HOQ matrix. Their purpose is to translate the requirements as expressed by the customer into technical characteristics. The level of relationship is weighted on a four-point scale (i.e., strong positive, medium positive, medium negative, strong negative) and a symbol representing each is entered mto the corresponding matrix cell. The triangular roof matrix is used to identify where the technical requirements synergistically support or interfere with one another. Where interference occurs, an engineering trade off exists, and a cross-mark is entered into the cell. Where synergistic support occurs, a check-mark symbol is entered into cell. The bottom part of the matrix is the final section of the HOQ matrix. It summarizes the data contained in the matrix. The HOQ is useful in improving quality and catering to customer satisfaction. However it does not promote learning, nor is it applicable to the early stages of design. (Tor example, the establishment of the engineering characteristics assumes a preliminary design already exists.) The HOQ focuses more on improvement of existing designs.

2.4 Drawing Tools -Visio, Smart Draw, Inspiration and concept maps
Drawing tools help put thoughts and ideas into pictorial representation. They provide graphics and geometric shapes to assist in drawing applications.

2.4.1 Visio, Smartdraw, and Other Drawing Tools
Visio and smartdraw are diagramming and drawing software. They are used for drawing diagrams, charts, illustrations etc. These packages are usually quite user friendly ^ d provide extensive libraries of symbols for representing activities and processes. Because of their usefulness and simplicity, they can be very helpful in design.

20

"Free mind" software and Graphviz are also used for drawing applications. Free mind has use in tracking project work, time recording, and brainstorming ideas. It has more use in project workplace organizing and tracking record. It has fairly good structure but has certain weaknesses as far as initial design is concerned. It is not adaptable to designer cognition, and it does not help to focus the attention of the designer on requirements engineering. Graphviz is graph drawing software. The advantage of this tool is that it has a number of layouts that can be generated to suit one's requirements. One can get a number of layouts through simple menus. However, this tool lacks important features for design. It does not promote learning, nor is it applicable in a sufficiently broad number of areas. It fails to focus attention of the designer in "specific regions" of both the problem space and the solution space. Inspiration is a drawing tool that has good flexibility. It is good for brainstorming ideas and generating different shapes/symbols and any pertinent information required in the design stage. However, it is not universally applicable, i.e., does not address requirement engineering, concept design and system engineering of the design stage. It also fails to focus the attention of the designer in specific regions.

2.4.2 Concept Maps
Concept Mapping is a simple diagramming technique used for representing information/knowledge of a particular subject. The ftmction of concept maps is the concise, visual, hierarchical presentation of ideas. It is proven to be useful in the academic field. The maps serve two purposes mainly [19]: Â· The process of constructing a concept map encourages students to modify their current understandings by integrating new, relevant concepts, by constructing new connections or by re-arranging existing connections; and Â· The resulting map is an explicit representation of the students' understanding of their cognitive structures, which they can use to communicate that understanding to others. It is a technique utilising nodes and arrows to display ideas/concepts and their relationships, respectively. Words on the lines are used to describe the type of relationship that exists between the concepts. Most concepts are properly labeled with

21

words. Although the general flow of the maps is top-down in a vertical fashion, horizontal lines can used to represent inter-connected, networked ideas. Concept maps are context dependent and can be constructed to model something as broad as an entire domain of knowledge or as specific as the answer to one particular question [20]. A key feature of concept maps is that while constructing concept maps, we may have some or all of the information about a subject matter and some of the new knowledge we may discover while making it. Concept maps do have one major disadvantage. They can be ambiguous, which is bad for design, although good for generic applications. Concept mapping has a history of use in many disciplines as a formal and a semi-formal diagramming technique. Novak suggests that concept maps are analogous to road maps. They not only identify major ideas (i.e., concepts), but they `also illustrate the relationship among concepts in much the same way that links among a city are illustrated by highways and other roads' [21]. However, unlike a road map, the linkages and the ideas in a concept map are frequently different for different people. In figure 2.9, the rectangular boxes show all the concepts and the links are used to describe the relations between them. Links such as have, maybe, runs on, either and so on describes the relations. Concept maps show the profile of the subject, the relative importance of information and ideas, and the way that information relates to other information. In a concept map, all the information follows a hierarchy. The main concept lies on the top and the less general concepts are arranged below or they follow successively.

22

^Trailer j may be

has

e n g in e S h e e t metal body

runs on

fwheÃ«Ã¯^
may be Front w h e e ls

{ electric J

may be Under body Rear body Front body

Diesel

J ^ R e a r v v h e e is J

Figure 2.9: Concept map for an automobile Concept maps can even be expressed diagrammatically with the aid o f colors to niakes them more expressive. The author has drawn the same example with the aid of colors in figure 2.10
Automobile Trailer

e n g in e S h e e t metal body electric w h e e ls

gas Under body Rear body Front body Rear w h e e l s Front w h e e ls Diesel

Figure 2.10(Concept map for an automobile with aid o f color)

23

Colors provide improved understanding of maps. Concept maps can help the engineer to visualize how components of a system do or should interact. This can improve communication between the engineers and the clients/users because ideas and relationships can be easily represented in a simple format, without the need for in-depth technical knowledge of the system. Concept maps are adaptable and promote learning. This is very important in the early design stage. As such, they have great potential, and can be exploited further in design. One of the disadvantages of concept maps is that they are quite subjective. Whoever is drawing the concept map draws it in terms of his/her knowledge about the subject or how he/she perceives it. They are simple and even too flexible. Another chief problem is their lack of structure, which prevents designers from achieving the concentrated focus needed to treat design issues effectively and efficiently. Concept maps offer only a limited number of shapes. Meaningful symbols depicting direction of flow/process cannot be added typically. This limits the use of the tool in terms of better expressive power. Large, complex concept maps can be very difficult to understand. It is possible to annotate links but concept maps prohibits writing at anchors (i.e., link ends). Also, concept maps are not universally applicable. They do not address the early design stages very well. Links cannot be shown as, say, dashed lines, or thick lines. Inspiration does support this feature but then it lacks other features. Concept maps are currently being used in a number of different ways in higher education. They are being used to develop conceptual frameworks for research projects, to develop curriculum plans, to help students to develop new cognitive structures, and to evaluate students' understanding of course material [21].

2.5 Physical system modeling-Bond graphs, IDEF, the Modelica language
Physical system modeling consists of different modeling tools with their own language for object oriented and having reusable objects.

24

2.5.1 Bond Graph
A Bond graph is an explicit graphical tool used to represent flow of power in a system. It was originally used to model mechanical systems. Gradually it found use in the electrical field. In this approach, a physical system can be represented by symbols and lines to identify the power flow paths. It uses different arrows and symbols to represent effort and flow A simple mechanical system shown in the figure 2.11a below is considered here for explaining the modeling procedure variables. The output from the pump would be flow and pressure, while the input would be torque and angular velocity applied to the pump shaft. The input power is provided by an electric motor. The power flow diagram is shown in the figure 2. lib.

Electric motor

Pump

Figure 2.11a A simple mechanical system [20]

Power Source

^ y !

Electric Motor

*

Dri\'e Shaft

T

Piinip

-

p v;

Figure 2.11b Representation of mechanical system [20] Two transformations are identified. The first is from electric power to mechanical power through the electric motor; followed by another from mechanical power to the fluid power through the pump [22]. The " 1" junction represents a common mass point in u mechanical system, or a series connection (with same current flowing in all elements) m an electrical network. There are only two kinds of two port elements, namely Transformer" and "Gyrator". The bond graph symbols for these elements are TF and respectively .The half arrow pointing towards "GY" means that the power i.e..

25

product of V and I is positive and flowing into GY, where V, represents velocity or voltage, and I, represents flow or current. " |i " above the gyrator denotes the gyrator modulus. The overall bond graph of the system with power directions and causality is shown in figure 2.11c.

"'Â·""i;*' T r

Figure 2.11c Bond Graph for mechanical system [20] Bond graphs have certain disadvantages. They do not promote learning nor do they focus the attention of the designer on specific design tasks. One needs to have specialized training to draw as well as to understand. They also fail to address early design issues uniformly and adequately.

2.5.2 Integrated DEFinition (IDEF) language
The Integrated DEFinition (IDEF) language is a modeling technique used to model functional processes and associated information to support functional process improvement [23]. IDEF methods are used to create graphical representations of various systems, analyze the model, and create a model of a desired version of the system. IDEF was basically invented to enhance communication. It has a whole family of components starting from IDEF0, IDEFl, IDEFlx, IDEF3, IDEF4, 1DEF5 and continuing till IDEF 14. As a group, the IDEF components address a wide range of modeling needs intended to manufacturing operations. It was invented under contract of the US Air force. Though initially invented for system engineering it has found its use in software development as well. IDEF0 was derived from a well-established graphical language, the Structured Analysis and Design Technique (SADT) [23]. As shovm in Figure 2.12, the model

26

indicates major activities and the input, control, output, and mechanisms associated with each major activity.

In p u ts

M a n u fa c tu rin g F u n c t io n

OutC'Uts

M e c h a n is m s Figure 2.12 ((ICOM) IDEF0 Function Box and Interface Arrows) [24] Input - That which the manufacturing process or function will transform. It includes material and information. Control - Those elements related to the functions (activity) that constrain or govern how the function will be conducted. Examples include policy, budget constraints, and customer requirements. . . Output - The result of the manufacturing function. This is the input after ,, transformed by the function. Mechanism - Those things that do or support the function. These may he people systems, facilities or equipment necessary to accomplish the Rmctton. The direct costs o doing a function are associated with the mechanisms. Â· IDEFl is used for information modeling, which captures conceptual views of enterprise's information. Â· IDEFlX is used for data modeling, which captures the logical view of the entetp data and is based on an entity relationship model. It is a design method for logtcal database design once the infomtation system requirements are known. Â· 1DEF2 Simulation Model Design method is used to represent time varying behavior of resources in a manufacturing system. Â· The 1DEF3 Process Description Capture method is used to capture behavioral aspects of a system [25].

27

Â·

The IDEF4 object-oriented design method was developed to support the objectoriented paradigm.

The author has not investigated in depth IDEF 5 through IDEF 14 . The sixteen methods are designed to capture a particular type of information through modeling processes. However, IDEFO (functional modeling), IDEFlX (data Modeling) and IDEF 3(Process modeling) are at the heart of the IDEF family. The ICOM is the working element in the IDEFO diagram. In some cases
information shown in the diagram is too brief and therefore requires a person having prior

knowledge in the modeling technique to understand ICOM. ICOM makes use of only boxes and arrows. The direction of an arrow represents the function or the process. IDEF lacks in several areas such failing to focus attention of the designer in specific regions. Similarly, it does not promote learning, nor does it assist in development of the designer's emergent knowledge of design.

2.5.3 Modelica-Design Language
The Modelica Language is a language that is used to model physical systems. It creates reusable component models and shows how it can be connected. It is based on mathematical expressions and an object oriented approach. It supports library development and model exchange. Most typical electromechanical components are available in Modelica libraries; the user simply connects those components into systems. However, by using a graphical model editor, a user can also create new components not already in the libraries. A screenshot of several examples built by available modelica libraries is given below in figure 2.13

28

t3^p.D.t]

3Djticcliaitics "71 r'lLo srr 12-^,Ã 5Ã \ 0 3 fllU
rjinlnil vvNirmv

W ^ P 0 .T 3 .C } -----; 3 f^P.1.0] ^1? Mil."}
state laadiines
o

l(3j

Y

micr -" g -cf Ã %3-C= JBL
power iiuins

7 R fl H H >C !-N.
.*--m
i-:co

KvdnuSes <ih i pew frÂ«3*.^ftiÂ«5

.E

L -tH

L I
Â· t .,y

I

T

ju <

!. L

4 n '* * Â» F I # - i m .e :n o ^

I I
ckcnicalsvdMos c> lerf: 1 : I >'i c r / ^ - '

Figure 2.13: Modelica example with different libraries [26] This figure has made use of component libraries that are available in the following domains [26]: Â· About 450 type definitions, such as Angle, Voltage, Inertia. Â· Mathematical functions such as sin, cos. In. Â· Continuous and discrete input/output blocks, such as transfer functions, filters, sources. Â· Electric and electronic components such as resistor, diode, MOS and BIT transistor. Â· 1"dimensional translational components such as mass, spring stop. Â· 1"dimensional rotational components such as inertia, gearbox, planetary gear, bearing friction, clutch. Â· 3"dimensional mechanical components such as joints, bodies and 3-dimensional springs. Â· Hydraulic components, such as pumps, cylinders, valves.

29

Â· Thermo-fluid flow components, such as pipes with multi-phase flow, heat exchangers. Â· 1-dimensional thermal components, such as heat resistance and heat capacitance. Â· Power system components such as generators and lines. Â· Power train components such as driver, engine, torque converter, and automatic gearboxes. Modelica is quite expressive in terms of mechanical and electrical drawings (circuits) like the one shown above. Icons represented in the drawings are quite relevant in terms of interpreting. Thus, makes it easy for a reader to understand. The author thinks Modelica has certain shortcomings when represented through schematics like the one shown in figure 2.12. It could be more advantageous if certain more features could be incorporated. In this particular example nothing has been written on the links connected to the models. In the case of control systems, the link between the gear and the load could have been more specific and elaborate by stating type of load, (i.e., dynamic and static ). Further, the rectangular box represented for motor or gear or any other part represented could have well contained some kind of information within it. This way it would have had additional information specified. Modelica has limited use in the conceptual design area since it tends to focus more towards classes and mathematical representations. Mathematical representations of designs are not available until a conceptual design at least exists. As such, it has limited use in design. Like IDEF, Modelica also lacks in certain key features such as focusing attention of designers in specific regions of both the problem space and the solution space and not promoting learning. Also, it does not address the early design stages.

2.6 Conclusion
The above diagramming and system modeling techniques were studied with a view to gain better understanding in the field of diagrammatic reasoning and information visualization.

30

Important features from these techniques have been identified and taken into consideration in the author's work. The main criterion for this work is to have flexibility, which is much needed in the early stages of design. Key principles taken from these diagramming techniques are discussed below. Â· Graphical layout plays an important part in communicating information. Graphical layout means laying out information using text graphics in a proper and efficient manner, which can be drawn and interpreted easily. It is seen that best layout helps to express more information concisely and clearly. Information becomes more and easily emergent. Â· The nodes-and-links metaphor is an easy and flexible way of representing design information. Different shapes can be used to represent different kinds of information. Â· Arrows are used in almost all the diagramming techniques and information systems in one way or other. One way of using them is as links between two or more concepts. They also give an idea for direction of flow and in some cases they state preferences. Branching of arrows from one to many or from many to one helps to understand sequential and parallel flow. Â· Direction of Flow is used to represent sequence of work. It also helps to show cause and effect and describe hierarchy in a layout. Â· Colours help to make a layout carry more information in a systematic manner. They highlight classes of information, improve recognition of patterns in information and focus attention of designers. Based on this work, the author will propose the particulars of design schematics in the next chapter.

31

CHAPTER 3 Design Schematics
3.1 Introduction
Design Schematics (DS) is a diagrammatic language for representing early design information. The goal of chapter 3 is to show what DS are and how they are useful to designers in the early stages of design. The design of the DS language is separate from its implementation in a computer-based tool. It will become quickly evident that DS will benefit from computer-based support, but before such support can be developed, the language itself must be defined. subsequent chapter. DS will fulfill following requirements as discussed in chapter 1: Â· Â· Â· Â· Â· Â· Flexible structure Adaptable Light weight Focus attention Universally applicable in early design. Promote learning and assist development of designers' emergent knowledge of designs Various existing diagramming techniques have been studied in chapter 2 and it is clear that there are no tools to support the diagrammatic representation of early design information. Chapter 3 is organized as follows. Section 3.2 deals with the general discussion of a generic design process upon which DS is based. Section 3.3 comprises of development and identification of the kinds of DS, each associated with a stage of the generic design process, with 2 examples per DS. Finally in section 3.4, there is a third worked example (the coffeemaker) showing how DS can help in a more realistic design problem. Computer support for DS will be discussed in a

32

3.2 A Generic Design Process
DS is intended to respond to the needs of designers. Designers need tools that can help them to think more clearly and about the right things. They follow particular design processes. So DS must be consistent with those processes. Different organizations implement different design processes. There is no single "correct" design process. To define DS exclusively with respect to any one design process would mean that it would be (relatively) useless elsewhere. To address this, the author has used a generic design process (GDP) developed by Salustri to represent the fundamental and common elements of designing. Since the GDP applies in many different settings, making DS suit GDP will improve the applicability of DS to actual design processes in the `real world'. It is noted that while this chapter proposes particular types of DS to support the GDP, it is also the case that the general structure o f DS could be applied to other design processes as implemented in actual engineering enterprises. This particular aspect of DS will be discussed in subsequent chapters. While different organizations implement design in different ways, there are many fondamental features that are shared by all design processes. The four phases of the GDP are: Â· Requirements Engineering: This phase deals with the requirement/usage of the product. This is a process consisting analyzing the client/user needs and defining a set of requirements that are as precise and comprehensive as possible. Requirements may be known through surveys and through talking to customers or end users, and getting their feedback about the product [27]. In some cases even analyzing complaints about a product can yield requirements. All information relating to a customer need is taken into account (i.e. product use, benefit from product use, accomplishment from product etc) in this phase. Â· Concept Design: In this phase, alternative product concepts are generated and evaluated (by, for example, brainstorming), and a single concept is selected for further development. A concept is a set of specifications, which has description of the general foim and function of the product [28]. It is more specific than a simple idea.

33

but less specific than a technical drawing of a product. It also includes an analysis of competitive products and economic justification of the project. Â· System Design; The system level design phase includes the definition of the product architecture and the divisions of the product into subsystems and functional components [28]. Product architecture is the arrangement of the functional elements of a product into clusters. The output of this phase is usually a very general configuration of the product, functional specifications of each of the product's subsystems, and a preliminary process flow diagram for the final assembly process. Â· Detail Design: The design phase includes the complete specification of the geometry, materials and tolerances of all the unique parts in the product. It also includes the identification of all the standard parts to be purchased from suppliers. Process plan is constructed and tooling is designed for each part to be fabricated [28]. The output of this phase is the control documentation for the product (i.e. the drawings or computer files describing the geometry of each part and it's production tooling, specifications of purchased part, and the process plans for the fabrication and assembly of the product) The author has tabulated these four stages of Generic Design process in figure 3.1 and has come up with equivalent diagrams of DS for each "early" stage. Here, "early" design stages are those that occur before the full definition of geometry - i.e. before detail design. The last stage "Detailed Design" for which comparable diagrams happen to be "CAD" is not covered in this work since it does not within the scope of this thesis. GDP will be used in subsequent sections to guide the development of DS.

34

The Generic Design Process

Proposed Design Process

Requirement Engineeing

Usage Scenario Product design schematics Functional Schematics Modules

Concept Design

System Design

Product Structure Design

Detail Design

CAD

Figure 3.1 A Generic Design Process compared with DS

3.3 Development of design schematics
No one source in the surveyed literature has yielded a diagramming system that applies consistently to all the early stages of design. There is therefore no existent

foundation of which the author is aware upon which a widely applicable tool like DS can be developed. Without knowing what kinds of diagrammatic structures will constitute an appropriate language, we choose to start with the lowest common denominator, then add diagrammatic features as required.

3.3.1 Design schematics are based on concept maps
The simplest diagramming tool that the author has identified is concept mapping. Concept maps meet the following DS requirements (see Chapter 1). o Adaptable: It is easy to adapt by different people in the design team.

35

Inserting colors in the nodes, which had to be done manually. Shortcomings of concept maps in general are: Layout management: While drawing sample concept maps, the author found that layout of nodes on the screen (or page) can communicate substantive information. The best layout for a particular diagram depends on kinds of information in the map. Hierarchies: It must be possible for the entire information to be collapsed into a single node within a larger map. This should allow direct representation of hierarchical levels of information (according to, for example, level of detail). Representation: It must be possible to use different shapes of boxes (e.g. rectangle, ellipse, etc) to represent functional requirements (FRs - things a product must do), product characteristics (PCs - things a product must be), constraints (Cs - constraint is a limit placed on the capacity of a product to achieve a certain FR or PC) and performance metrics (PMs - performance metric is a criterion used to measure the performance of a product to meet a particular FR, PC or C). The terms "FR","PC","C" and "PM" are explained in detail in section 3.3.3 Hypergraph support: Generally, concept maps for design will be hypergraphs (e.g. supporting one-to-many links between nodes). This is rarely provided in existing systems (CmapTools being a notable exception). Extended Link labeling: It must be possible to put labels on both the heads and tails of links, as well as along the body of the link. This increases the flexibility and expressive power. Presently concept maps allow labels only in nodes and midway on links. Filtering: One of the main problems with concept maps is that they become cumbersome with more than a few tens of nodes in a single map. This degrades the map's ability to communicate information effectively. Designers tend to work on specific aspects of designs sequentially. It should be possible to temporarily filter the information that is not required. This would help in maintaining the integrity of the map while presenting only the required information for a particular task.

37

Â· Â·

Lightweight: It is intuitive to its users, with a short learning curve. Focus attention: It focuses attention o f the team on the core subject. It provides a visual representation o f the key concepts in a domain and their relationships.

Â·

Promote learning: It has been used in the early childhood education as both learning and assessment tool. In business and management, it is often used during brainstorming to capture quickly and easily ideas that are not precisely defined and understood. The author has created a concept map for a punch in figure 3.2. Following

difficulties were encountered while generating the drawing.
punch(Office)
m ust be ,

compact

diirable reqiiinng less effort
such that

such that

'` *  > '"6 1
binctional

easy to handle (work wth)

V --

e
fabric able

S

5 by being
being sturdy

foldable if possible light in weight

optimum m size

marketable!

such that

ha^/ing less numbers of parts to avoid we
such that

such that by being such that

by being

easy to operate

being good quality
such that

\ A

competitive price

/\

such that easily machinable such that such that such that

I easy access spare parts

^ accurate in terms of punching holes \
easily available

I
m easu red by

m easu red by

r m easured by

m easured by

no intncate shape

m
Figure 3.2 PDS example for a punch

Difficulty in reading the drawing due to haphazard layout. Difficulty in laying out o f nodes and arcs so that they do not overlap each other.

36

Â·

Links Between links: The relations represented by links can themselves be thought of as concepts; that is, a whole concept map could be developed to explain a relation like welded to. Such maps would be obviously pertinent to manufacturing engineers and engineering analysts. However, no existing concept mapping system supports this.

Â·

Boolean and Cardinality Constraints: Conventional concept maps do not support Boolean relationships between nodes or links, nor do they support cardinality (e.g. that an assembly requires four o f one kind ofpart). These kinds of constraints are very important in early design, and must be representable. New diagrammatic structures were then introduced, one at a time, to address these

shortcomings in concept maps. By doing this, the new, enhanced tool should be the simplest possible tool to satisfy all the requirements of DS. following key features Â· Automatic layout: Since DSs would consist of multiple inter-related diagrams; automatic layout generation will play an important role. (This is a feature expected of software tools that implement DS.) Â· Different node shapes to distinguish different kinds of information especially for FRs, PCs, constraints and performance metrics. Â· Â· Different line and border thicknesses to indicate importance Information flow (i.e. like in IDEF). Effective layouts are facilitated by constraining all links to point in one direction (say, left to right). This cannot be done for the general case (i.e. there will often be closed loops of nodes and links), but maximizing the consistency of link direction tends to improve readability and layout. Â· Â· Â· Hierarchies Extended link labeling Boolean and cardinality constraints This thesis does not treat the matter of programming a software tool. From the point of view of programming, the author's work is the definition of the functional requirements for any software that might be developed in the future for DS. The author expected

38

The author gives an introduction to design schematics through a set of examples. Each diagram is meant to facilitate one or more stages of the GDP. The DS included here were drawn "by hand" using Smartdraw; that is, all layout, node and link style use, labeling, and directionality of flow were set manually without automated assistance from the software.

3.3.2 Usage schematics
The first kind of DS is a usage schematic (US). It relates to the requirement engineering stage of the GDP. It helps identify customer needs by thinking of how a product would be used by a user, and writing out that description as a flowchart-like diagram. It is intentionally kept similar to flowcharts for ease of understanding, since most design engineers have had some experience with flowcharts. It is, however,

designed to use graphical entities in a manner consistent with other DS diagrams, which is not the case for conventional flowcharts. Figure 3.3a shows the US for a chair. A US can be drawn either vertically (i.e. like the one shown above) or horizontally (i.e. one drawn for coffeemaker later in this section). All the steps in the use of the chair are broken into a causal flow of activities. The arcs in USs show the order of actions taken by user in order. It starts with "importing a body" and ends with "securing position". The "starting node" is represented with an arrow showing the direction of flow. If there were more than one action associated with a usage step, it would be represented by a number of parallel arcs. "Check for height/back support" is a question, therefore it is represented by diamond shaped block (like a decision branch in flowcharts). There is feedback loop shown by the connecting link "m". The links are unlabelled because there is only one kind of relationship in a US. USs are useful in design since they promote user-centred design and can give a clearer view about a product's intention.

39

Usage Scenario for Chair

D -

Position Chair

Adjust back Support

Transmit Force

m Relative Motion

C h eck for H eig h t/B ack Support

I f n o t propcr,adjust h eig h t

Release Force

Secure Position

Figure 3.3a Usage scenario for a chair

40

Figure 3.3b shows usage scenario for a punch. USs are used to expand the FRs into a function model of the product [29]. The overall diagram captures the essential features of how the product will be used without making any design decisions about the product itself. USs help designers to focus on customer needs, which is usually a first step in a design process. It answers the questions prompted by requirement engineering such as How do we expect this product to he used? In real-world settings, USs would likely be constructed with input from focus groups, ergonomics experts, client representatives, etc. The diagrammatic form helps explain the usage expectations of the product for non designers and non-engineers who would nonetheless be stakeholders in the product's development.

41

Usage Scenario for Punch

Align papers

Reduce num ber o f papers

Transm it Force

I f transm it force is m ore

Secure papers

Punch papers

Dissipate Force

W ithdraw (sm oothly)

Aligned papers

Figure 3.3b Usage scenarios for punch

42

3.3.3 Product design schematics
The second kind of DS is a product design schematic (PDS). It has a table-like format that helps visualize information quickly. A PDS guides the formalization of requirements of a design problem, to ensure that all the interactions between requirements are properly identified, and that all necessary requirements have been identified. It is a structured description of the purpose, functions, characteristics, constraints and other kinds of information that describe the design problem. Developing a proper set of requirements is the essential first step in any design process, because a good design will define a product that satisfies all the objectives of the project in a balanced way. There is no way to know how to balance all the difference factors that can influence a product's success without first understanding the nature and requirements of the design problem. The PDS format is built upon a requirements specification format defined in Salustri [2], which is summarized below. Â· A product characteristics (PC) is an essential attribute of a product and is usually represented with an adjective. It is basically what a product should be and not what product should do. Though PCs may seem obvious and trivial, they are important to group other requirements elements, and to help ensure that all other requirements elements have been specified. Â· A functional requirement (FR) is generally a verb clause that states what the product must do, i.e. the response of a product resulting fi-om a stimulus external to the product. These reactions can result from stimuli at any stage of the product's life cycle, not just from its use. They explain how a product will achieve its PCs. FRs should never describe the form, shape, material, or any other physical characteristic of a product. Â· A constraint (C) is a limit placed on the capacity of a product to achieve an FR or PC. A constraint is a hard, quantitative limit placed on the range of possible values of some variable. Constraints take the form of minima, maxima, or optima. Â· A performance metric (PM) is a criterion used to measure the performance of a particular product design to meet a particular FR, PC or C. It measures the validity of a design against the best possible measure.

43

Evaluation of FRs, PCs, Cs and PMs plays an important part in the early design stages of a product. In fact, it helps the designer to think as well as brainstorm ideas. Designing, especially in the initial stages, is a learning exercise. The acts associated with specifying the initial requirements, concepts, and systems of a product are acts of exploration and discovery, which result in learning [9]. DS diagrams facilitate this by providing an alternative to conventional, purely textual descriptions of product requirements. Figure 3.4 shows PDS for a chair. Color-coding and symbolic representation have been used. Green nodes are PCs, blue nodes are FRs, yellow nodes are constraints and pink nodes are performance metrics. The PDS starts with a listing of main product characteristics; more specific ones are branched out from them. FRs are linked to these specific PCs. Constraints are linked to the FRs which in turn are linked to performance metrics. Arrows flow in one direction only. There are arrows coming out from PCs and going to FRs but not vice-versa. Similarly there are arrows coming from FRs and going to constraints but no arrows from constraints to FRs. The left-most group of PCs defines some of the basic characteristics of any product. The next group shows PCs and FRs are specific to the product. The PDS representation combines aspects of Pugh's [30] and Dym's [31] work. Pugh developed a basic classification of generic requirements - upon which we have constructed our two-level classification of general and specific PCs - as well as a tabulated listing of requirements and constraints, though in a purely textual form. Dym distinguishes between design objectives (similar to our product characteristics) and functional requirements, but does not treat constraints directly. No work of which the author is aware includes the notion of performance metrics. A PDS is directly related to a US. All the PCs, FRs and constraints can be extracted from a US and, by rearranging them, form a PDS as shown below.

44

GD
r V " PC ^

long lastine

rtsamg compression

that

-static load of competitor

)-- measured b y >

compression limit

r \ / ' durability
V y strong supports

rÂ«sfng
tension resisting impact

V ~^uch that

'Â·^static limit of competitor

measured b y >

tension ImiE

J

uch that
competitor

~measured b y > impact survival

Performance Metrics marketability

easily available

resisting corrosion

\ such that

=corroston of compel Itor

Â·measured b y > corrosion rate

%ht in wefiht swiveable back support

such that
resisting

=tat!iaie life of competitor J ^ ^ Ã  s u r e d by^

fatigue life

comfortable

--such that>

foldable arm support nice ^pearance Wii atutEslpaded
amis)

swiveable

easy access to spare parts functionality adjustable height swiveable such that
lesistiiK filldll^ sIlpfN K U iliilein use

providing eas> and relaxed atimg

having free rotation

wheels covered

uch that

^

no rouidi comers

such that Strong supports

can lake suttcient \keis:ht d IZOlg

Bghi in weight

easy to set up requiring less space competitive price

affordable

Figure 3.4 PDS for a chair

45

The author was actually forced to think about the problem of designing a chair while carrying out this exercise and this is important in the initial design stages. The links between nodes proved to be helpful in listing out information. Figure 3.5 shows PDS for a punch. The overall diagram captures the essential aspects of all the design problem requirements and their interactions. Physical gaps in the diagram can denote areas that require further attention is needed, i.e. it forces a designer to address the question of whether such gaps indicate that more PCs, FRs, or Cs are needed. It is easy to check that every requirement is testable. One can do this by ensuring the coimectivity of PDS elements to PMs. Every constraint must be associated with an FR or PC, and there should be at least one PM for every constraint. PDS gives a total overview of the design problem by laying out complete specifications of a product in terms of functions, characteristics and constraints.

46

long lasting

resisting compression

such th aM

com petitor

measured by

>

compression limit

durable

resisting tension

uch that

static limit o f com petitor

measured by

tension limit

less number of pans to avoid ueani^

resisting impact

su c h th a tW

O T cornpetitor

neasured by

impact survKal

Perform ance Metrics marketability

optimum m size light in weight -s u c h that^ less than 0.01 kg accurate in terms of puching holes portable

resist tog corrosion

such tha

ooiTDSion lev el of competitor

measured by

^

corrosion rate

resisting fjlipe

^ / s u c h thatÂ»(

.

com petitor

measured by

fatigue life

easflv' available nice appearance competitwe price functionalhv easy access to spare parts requiring Jess efTort easy to handle (work with)

such that

less than 0. 1k

punching papers

su ch th a tW

maximum o f 20 papers at a tim e

good quality fabricability no intricate shape foldable it possible

compact optimum m size easily machinable no protruding part
^ no sharp corner;

such that

Figure 3.15 FRs, PCs and Cs for the C offeem aker-Step II

47

3.3.4 Functional Schematics
The third kind of DS is a function schematic (FS). It addresses the concept design stage of the GDP, when functions are grouped to identify systems, which will eventually become subassemblies of parts. The concept design stage covers the general form and function of product. The author explains this with the help of function modeling diagrams shown below. FSs borrow from the function diagrams of Wood (et al)[32], but while that work builds function schematics in a bottom-up manner, starting with primitive functions, the author has used a top-down approach. The difference is that we do not assume some kind of standardized set of primitives, as do Wood et al. We cannot do this because we are developing designs, whereas Wood et al are more focused on explaining existing designs and redesigns (such as in, for example, reverse engineering). Figure 3.6 shows the function diagram for a chair. Red indicates material flow and yellow indicates energy flow. Nodes with a thicker border indicate more important functions. Also, the sides of function nodes have specific purposes (similar to IDEF). Inputs enter from the left-hand side and exit from the right-hand side. The FS is related to the PDS. Function modeling begins with identifying the product functions in the PDS. Once that is done, that function is broken down into sub-functions. Customer needs define one or more input or output flows for the product. PDS helps us to identify these needs. Each input flow becomes a sub-function that operates on the flow. If a flow is transformed to a different type then the operation on the transformed flow is followed till it exits the product. This captures function decomposition, which helps the designers to think in terms of each sub-function and facilitates identifying areas that can be improved or modified in response to customer needs and requirements.

40

PROPERTY OF RYERSON LIBRARY

Function Model o f a chair

Hand Im port hand

Hand

Hand

Hand

Hand

Position Chair

Secure Position

Release
hf(H um an fo rce)

Im port H uman F orce

Position Body

T ransm it F orce

Relative M otion

Release F o rce

hf(H um an fo rce' W eight T ransm it F o rce Weight

Energy Flow M aterial Flow h .f H uman F o rce

Figure 3.6 Function Model Chair Figure 3.7 shows function model of a chair with modules. The notion o f a module comes from considering major flows (i.e. the flow o f material, flow o f energy, flow of electricity, flow o f masses, flow o f fuel, etc). After function modeling, one identifies distinct modules in a function flow (especially when flows branch, forming independent chains, or when they may be converted from one type to another). In figure 3.6, flow

hand enters the system and traces through three sub-functions, position chair, secure position and release. This set o f sub-functions forms a module called the use module
(which can be related to a US for using the chair). The Securing/release module is comprised o f four sub-functions. The flow hand travels through the sub-functions

position body, transmit force, relative motion and release force. The weight/transmission
module has just one sub-function. One can facilitate actually identifying the modules by using graphical layout o f the diagram to keep the major flows visually obvious. That is, a major flow will have a thick line because it is important, and if all the components are

49

aligned so that a major flow is directed from left to right, then the module will become self evident from the observation o f the diagram by the human designer.
Function Model o f a chair

U seM od u le

Hand

Hand

Hand

Hand

Hand R elease

Import hand

Position Chair

Secure Position

S ecu rin g/R eleasin g M odule

Im port H uman F o rce

Position Body

T ransm it F o rce

Relative M otion

Release F o rce

hf(H um an force W eight T ransm it F o rce Weight

W eight/T ransm ission M odule
Energy Flow ^ h.f. M aterial Flow Human F o rce Identified M odules

Figure 3.7 Function model o f chair with modules identified. Figure 3.8 shows a function model for the punch. The overall diagram captures the general flow of inputs to outputs, treating the product as a "transformer" o f inputs to outputs i.e., flow of paper, flow o f mass. This allows designers to focus on the needs that the product must meet in operation, and can include considerations o f robustness (i.e. robust design) and environmental friendliness (by explicitly indicating the kinds o f wastes as well as consumables of the product). By treating the design with respect to

function rather than product structure, there is less chance designers will be undesirably biased towards existent solutions, thereby increasing the chances o f innovation. Also, treating function as directly connected to requirements helps prevent "feature bloat" whereby products come to have many features that users/clients do not want or need.

50

Function Model o f a punch

Hand

Hand

Hand

Hand

Hand

Import hand

Couple paper

Secure Paper

Separate from paper
hf(H um an force)

P ress/R elease M otion

I

Im port H uman

I

Position Punch hf

hf I

I hf
hf Weight

I Press P unch | _______________

< D issipate F o r c e . hf hf

Release Punch ,

hf

hf Transm it F orce W eight

Energy Flow M aterial Flow h.f. Human F o rce

Figure 3.8 Function model o f punch An early function model for a product (i.e. its function structure) can be transformed into a quantitative equivalent and used to find other functionally similar products [33]. These other products, similar in function and customer needs, would help in benchmarking and would provide a source for concept generation. This can help to incorporate design knowledge for new products or redesigning existent products, saving time and money. Additionally, by identifying products that are similar in function and customer needs, it sets the stage for modular product architecture development by laying out a rough picture o f common functional modules across product lines. Figure 3.9 shows a function model o f a punch with the modules identified. Structured product modules help to reduce cost in assembly and management of product families [33]. It becomes easier to identify a product family for manufacturing. Sharing common modules in a product family can reduce cost considerably and increase production efficiency. It can also help in dividing design tasks for parallel development, standardization, product variety and customization [34]. Modular product architectures,

51

in particular, offer distinct manufacturing advantages as well as opportunities for automation in the design process [33]. Automated design techniques for combining components (i.e. modules) quickly generate alternatives resulting in optimization o f some product features.

Function Model o f a punch

Coupling/Separating m odule

Hand

Hand

Hand Couple paper S ecu re Paper

Hand Separate from paper hf(H um an force)

Import hand

Press/R elease M otion

manual use m odule

I
hf

Im port Human

I

Position P unch [

I

I

hf

I__ _ _ _ _ _ _ _ _ _ _ _ _

I hf

] Press Punch

[

I_ _ _ _ _ _ _ _ _ _ _ _ _ I

hf

I

D issipate f o r c e

Release Punch

hf
Transm it F orce W eight

hf
Weight

weight/transm ission m odule
Energy Flow .^ Material Flow H uman Force ' Identified M odules

h .f

Figure 3.9 Function model of punch with modules identified.

3.3.5 Product architecture schem atic
The fourth kind o f DS is a product architecture schematic (PAS). The PAS maps function modules to system components, which might themselves be subsystems or parts. There is still no necessary commitment to product structure in a PAS. Instead, the PAS lets designers focus on the interfaces (the links) between systems and clearly define them. Figure 3.10 shows a PAS for the chair. It includes subsystems of the product and the combination o f mass, flow and energy that occur during operation. Purple nodes are sub-systems, red arrows are mass, yellow arrows are energy, dotted arrows are information and the green box that encompasses everything represents structure. Arrows

52

show the direction o f flow. Bi-directional arrows are used to show flow in both the directions.

Product Architecture System for Chair

Disperse Load Waste heat/Sound human force support system controller monitoring monitoring Lift A ccess(seat) lifting/retracting system

Safety

Structure

M ass Energy Inform ation

Figure 3.10 PAS (Chair) One can use a FS to develop a PAS. Flow o f mass and energy in the FS gives an idea about how sub systems will interact in the PAS: FS "modules" correspond to PAS sub-systems. Some of the sub-systems are basic for almost any product (i.e. safety,

access, support system, etc). The rest o f the sub-systems are identified based on the information from the FS. Figure 3.11 shows the PAS for the punch. The careful arrangement o f subsystems can suggest physical configurations. For example, links that communicate information

53

about the transmission o f forces are the foundation o f setting the load paths through the actual parts. The development of product architecture is a critical phase in design. It

shows the functional connectedness o f parts and assemblies, and it enables systems integration and test activities further downstream in the product development process. The process is important because the choice of physical product layout will strongly influence product performance. It prompts the designer to think about product operation and thus evaluate the design's merits. However PAS does not directly assist in optimizing a design. The goal o f all DS diagrams is to help the designer recognize the issues of optimization based on sub-system interactions. DS help people think, it does not automate processes or optimization tasks.

54

Product ArchilecltÃ®re tvvster,' ;br Pu nch

paper Staple pins Access

paper
SiapleJ pins

C'oiiiaiiiineiu

S u p p o r t s> st ei n !

Waste heat/Sound/human force human force Structure

Mass
d,iierg>'

Information
Figure 3.1 I :3 \S ' Clinch)

3.4 Using design schem atics in product design
T he goal o f this section is to show how using DS can prom ote a m ore com plete understanding o f a design problem , docum ent design decisions concisely, and encourage concept synthesis w ithout bias tow ards existing solutions. undertakes the early design stages for a coffeem aker. In this section, the author

The exam ple is treated as if the

au th o r w ere actually designing a coffeem aker, rather than as an analytic exposition (as w as done in the preceding sections).

5.S

The reason w h y a coffee m ak er has been chosen as an exam ple is because it is a fam iliar and sim ple appliance. M ost people have used a coffee m aker. T his should m ake it easier to appreciate the p o te n t::! v f !he DS approach, w ithout b ecom ing distracted by the technical nature o f the p roduct itself. ' ;;_:uv ' , i2 relates to the ! IS, \l show s how a coffee m ak er is used in a stepw ise m anner. The process starts w ith the " startu p " and ends w ith "clean " . The process o f " loading F ilter" and "putting in w ater" can be done sim ultaneously therefore it has been show n parallel. N ext step a i activate" and then " w ait" . T his refers to the w aitin g tim e

for the coffee to be ready. " Serve co ffee" and " D eactivate" are next tw o steps that follow successively. Final K n ends w ith "clean " .

U sag e S cen ario ib rC o fT ev M ik i

t'lg u rc X I 2 Usage Scenario

U S -like diagram s have also found use in facility m anagem ent team s, w hich identifies all roofing sections to be m anaged. M anaging roofs on the ro o fs e c tio n level provides a m ore precise m eans o f evaluating condition and determ ining m aintenance, repair and renew al requirem ents [35]. i igiiiv V !.' has FR s and PCs listed for the coffee m aker. It is an extension o f the earlier figuix. it show s how FRs and PC s have been co-related w ith each step o f the usage scenario. Though it is not included in the actual study, the author found it \ c r y useful to proceed to the next figure as an interm ediate step in design wiili )S. ' idor

coding and sym bolic representation is consistent. All the FRs are connected to a part o f

56

the US. PC s are eith er connected to FR s or d ire c tly to U Ss. The author has draw n all the FR s and PC s possibly he could think o f in a "hap h azard " m an n er because the goal here w as to enum erate as m any PD S elem ents as p o ssib le, but not to lay the diagram out c le a rly (yet).
Usage Scenario with functional re q u ire m e n t, P roduct Characteristics and constraints for Coffee Maker

functionality

durability sturdy

portable

easy to handle

strong

dishwater safe leak proof easy to operate contain usability ^when reod\ put in water

f

keep coffee

Activate

Wait

Serve Coffee

D eactivate

Clean

load filter

Load coffee consuming

good quality

no geontln, that's hard to clean

fit niter shape coffee multi use insulated

compact monitor temps

shut-off on its no sharp

spacious

competitive

shockproof

maintainability

marketability

economical Safety

simple design

Fabric ability

Figure 3.13 U sage scenario com bined w ith FR s and PCs

Figure 3.14 is a properly laid out version o f previous figure. A s one can see left m ost segm ents have basic PC s listed. G eneral PC s are linked to m ore specific PC s, w hich are linked to the FR s that define how a pro d u ct achieves them . F inally constraints are listed out against the FRs. The physical lay o u t o f Figure 3.14 w as executed using

determ inistic rules about the relative location o f the nodes and links.

57

PC

^

durability

_ _ _ ^ b y bein g------ ^

stron g

stu rd y consum ing such that--

econ om k :al marketability' m u hi u se com p e titiv e price a c c e s s to spare parts
by being able to p re p a re le a

minimum^

e a sy to handle C o ffe e M aker fu nctionality
ax.Honble/di soKsem hi c

indicating when ready

stab le(firm b a se) n o sharp corn ers insulated

p re v e m h u m g b > b * 't w a te rrn o r h e a t

>
sh o ck p ro o f s h u t - o f f on its ow n by b e in g

<

lum o lT irienip lotÂ» high

maintainability

V

no geom etry that s hard to clean d ish w a sh e r sa fe

C
easily reachable button

monitor temps

^

A u to d ea ctiv a te after o n e h

keep coffee

indicate e a sy to operate usability a c co m o d a ta b le

fit filter
th a t-

Fabricabiiity sim p le d esign

contain coffee

contain coÃ®Tipnc t

^
s u c h th a t

Am ount o f W ater

J

\

g o o d qvialiw

Figure 3.14 FR s, PC s and Cs for the C offeem aker -S te p I

58

This figure helps in evaluating missing FRs and PCs. It pinpoints the requirement needs to be filled, thus forcing designer to think deeper and come up with more FRs and PCs. Figure 3.15 is the result of brainstorming ideas. It has more PCs, FRs and Cs listed down compared to Figure 3.14. One can see that voids have been reduced. Therefore, this diagram helps the designer to come up with the best possible solution. It is critical while designing a product to adhere to this because it saves time as well as cost downstream (due to the Pareto Principle).

59

FR durability PC by being-

able to fit filter shap>e s tr o n g

-m u st bem ust

lon g lasting

such th a ts u rv iv e sm aJl

Im heig h t
s u rv iv e h e a v y

such thatstu rd y
w o ik Â«Her lo n g hr* o f Moragc

4 hrs

Â·such thai

e c o n o m ic a l -by beings u c h that*

 {

o n e m onth

)
J

m arketability

-by b ein g -

m uki u se co m p e titiv e p ric e a c c e s s to spare parts

able to prepare tea

b a re m in im u m

heat up -m u st beread il) av ailable
m u s t; in d ic a te w hen ready

such

that-

fa st

e a s y to handle CM
BHscmbl c/<ii sasscm bl V

make coffee

sta y o n fu nctionality by b e in g ^ portab le s tab le( firm base) n o sharp com ers
- s u c h that-

pravÂ«iw b u rn in g b) bOl w a te r o r h e a t s u rfa c e

insulated S a fe ty sh ock p roof s h u t - o f f o n its ow n -by b eingn o g e o m e try th a t's h a rd to e lcan

-m u st be

s a fe w h ile in operation such th a t
A ulo dcuclivaic a l t e r o n e hr

d is h w a s h e r s a fe usability e a sy to op erate
in d ic a te s ta tu s

easily reachable b u tto n

A c co m o d a ta b le

fit filte r

Â·such thai L eak proof
c o n ta in

Fabricabiiity

sim p le d e sig n
co n tain w a te r

-- s u c h that-

com p act
^

g o o d quality

s u c h that-

f sa t i s fy I a g u e h i s

Figure 3.15 FRs, PCs and Cs for the Coffeemaker -S tep II

60

Figure 3.16 shows old PCs and FRs (i.e. from figure 3.14) listed along with the new ones. In fact, all the information has been transferred from the figure 3.15. The difference between the two figures is of the layout (figure 3.15 and 3.16). Some of the linlcs in this figure are overlapping and it is difficult to follow. Figure 3.16 is not included in the actual study. It is shown here to demonstrate the importance of graphical layout in DS. Figure 3.16 has exactly the same information as does Figure 3.15. The difference is the geometric organization (the layout) of the figure. The rules for the layout of any DS are deterministic and based only on geometric properties of the nodes and links. These rules are very easily computerized, as will be discussed subsequently. Thus DS provides the means of turning a complex information management issue into a simple computational one.

61

e Scenario with functional requirem ent, Product
Characteristics and constraints for Coffee Maker functionality durability sturdy portable easy to handle
make coffee heat up
indicate status

strong

dishwater safe easy to operate

leak proof

usability

reachable buttons

f sun ive small
L drops
coffee indicate when ready

put in w ater

set up

A ctivate

Wait

Serve C offee

Deactivate

Clean

toad filter

Load c o ffe e

prevent bwning bj M wÂ«r or heat

good quality

no geometiy that's hard to clean

consuming
fit fiker shape

compact
safe while in operation
monitor temps

maintainability

able to prepare
coffee

insulated multi use competitive price economical

sh u t-o ff on its on

Fabricabiiity no sharp comers

accomodatable

shockproof

marketability

Safety

simple design

Figure 3.16 Usage scenario with FRs and PCs

Figure 3.17 is related to PDS (Figure 3.15). It shows a relation between the functions and the sub-systems. Functions are taken from the PDS and are used to connect the sub-systems. A computer tool in this regard would be highly beneficial. It would help to point out which functional requirements would be affected with the change in particular sub-system. Designers can make important decisions regarding the nature and scope of product subsystems based on this figure. Links are used to show type the energy between the functions and the sub-systems.

62

Functions and the Sub-System
C ontain c offe e

survive small d rops

Strain energy-

Structure
survive heavy

Â·strong-

Fit filter shape

C ontain W a te r

C ontrol

indicate statu s

W o rk a fte r long hrs o f storage

indicate when ready

m o n ito r tem p e ra tu re

Heating

K eep coPf<

S tay on
consum in g

heat

Electrical

heat up

make cofTec

U ser Interface

T um o lfiftc n ip too high

 a u to -o ff-

S a fety
ii4>I conduct

-s h o c k p r o o f -

Figure 3.17 Function and Sub-Systems 63

Figure 3.18 includes function model o f for a coffee maker and identifies the different modules. The sub-functions shown are related by the flow o f energy, material, or information through the product to form a function model. All o f these flows are represented by different line colors.

Energy Flow

Function Model (Coffee Maker)
hand interface module Hand Import hand hf decouple solid hf Hand couple solid Hand ------------  1 hf Secure solid Â· "Hand  hf(Human force) : :

Material Flow Human Force Signal Flow Identified Modules

Human Force Import Human setup

put in water

Serve coffee

Deactivate

Clean

Initial set-up Position CM Plug the machine

Load coffee

Weight import liquid Weight Hand Force(hf)

Supply electricity module Store electricity Supply electricity transmit electricity Actuate electricity
'...'..V.elÃªcfr'iÃ¢Ty/.

Regulate electricity

heat
e le c tr ic ity to h e a t

hbat Transmit heat module

boil Liquid

dissipate heat

Figure 3.18 Function Model The flow electricity in the above figure produces a sequential flow chain. Here, five sub-functions must operate on the flow o f electricity in a specific order to obtain the desired result o f usable electrical energy. Parallel function chains consist o f sets o f sequential function chains sharing one or more common flow. The flow human force branches to form parallel chains o f subfunctions (the first is decoupling o f the solid, the second deals with the activation o f the coffee maker and the third deals with the weight o f the product).

64

Function modeling helps in many areas in the design process. With a function model expressed in the functional basis, functions may be directly related to customer needs, products and their functional representations may be directly compared, product functions may be prioritized and direct component analogies may be generated within and outside product classes. In the conceptual design phase, groups of sub-systems related by flows form sub systems or modules of the device. In the above figure various modules have been identified (Hand interface module, supply electricity module, transmit heat module). Identified modules give an insight into how the product may be made more modular. Figure 3.19 shows the overall PDS of the coffee maker. It shows coffee, water and filter as input and coffee and coffee beans/filter as output. The thin arrow (yellow color) indicates energy. Energy is shown as power, which must be delivered to the control subsystem. There is an energy output too: this indicates the kinds of waste energy that a coffee maker can produce i.e. waste power comes out of the control subsystem. This may be in any form. Finally there is information input and output. Information goes in the user interface and comes out of it. There is also information exchange between the heating system, control system and safety system. There are also other standard systems identified in the figure i.e. user-interface, structure system and power system. The subsystems have been derived from figure 3.17 and the FS. Material, energy and information flows have resulted from FS.

65

P rod u ct architecture sy stem for c o ffe e maker

c o ffe e w a te r filter S tr u c tu re A ccess

C o ffe e

>

C o ffe e b e an s/F liter

>

C ontainm ent

Heating

P o w er

W aste H e a t/S o u n d / c o ffe e /P o w e r Pow er C ontrol

I

com m ands

Â±
User
Interface

sa fety

---------------------

F eedback

M ass Energy
-- -- --

Information

Figure 3.19 Product architecture system for coffee maker

3.5 Summ ary
Author has introduced a new diagramming tool called DS consistent with generic design process (GDP) developed by Salustri. It is explained further by designing a coffee maker though inter-related DS diagrams. The author believes that DS can be really helpful to designers especially in the early design stages.

66

Salustri has used structured diagrams built with existing diagramming software in various teaching and research settings [36]. In one design course taught by Salustri, students use a PDS diagram to capture and reason about design problems. Students initially found it difficult since they had neither experience nor exposure to concept maps. However, their perception and knowledge about the design problem grew much in depth. They had fewer problems while designing as compared to other assignments where diagrams were not used.

67

Salustri has used structured diagrams built with existing diagramming software in various teaching and research settings [36]. In one design course taught by Salustri, students use a PDS diagram to capture and reason about design problems. Students initially found it difficult since they had neither experience nor exposure to concept maps. However, their perception and knowledge about the design problem grew much in depth. They had fewer problems while designing as compared to other assignments where diagrams were not used.

67

CHAPTER 4 Evaluation and Discussion
4.1 Evaluation of design schematics
The true worth of DS can only be determined by qualitative evaluation. However, such a qualitative evaluation has not yet been done due to time constraints and the relative amount of work that such an evaluation would entail. Neither from the author's own literature survey, nor as a result of several publications co-authored on DS, have any other diagrammatic or visual languages been found that cover the same broad range as DS. There is nothing against which to compare DS. Furthermore, a proper evaluation of DS would require DS to be used in "real-life" design situations. However, even using existing graphics software (such as Smartdraw or CmapTools), developing a well-laid out DS is a very difficult and time-consuming task. Any benefits of the diagrams will be more than offset by the time wasted generating them. So, in order to conduct an appropriate evaluation, a software package able to support the rapid development of DS diagrams is needed. However, no such software exists yet. Furthermore, the software cannot be developed without first establishing clearly what the expected ftmctionality of such a package would be. The author's work has addressed this by describing a set of possible diagrams in the previous chapter. Thus, the amount of work required in reaching the point of doing a meaningftil evaluation of DS is well beyond the limits on the current author's studies. All this notwithstanding, some informal evaluations have been carried out. The results of these evaluations are presented in this chapter.

4.1.1. Anecdotal evidence of DS benefits
As is noted above, a quantitative evaluation of DS will require development of a computer based tool and more resources that can be devoted currently. However, some anecdotal evidence exists that suggests DS may be beneficial in real engineering settings.

68

4.1.1.1 Evidence from teaching
Salustri has used diagrams in teaching design at the senior level. Students were able to download trial versions of Smartdraw or full versions of CmapTools and use them to develop PDS and PAS diagrams for team-based design projects. Salustri interviewed students during the semester to get their impressions of the usefulness of the diagrammatic approach. During the semester, students often complained of how difficult it was to create PDS and PAS diagrams; they were frustrated because they believed the software should be able to do more work to lay out diagrams properly for them and distinguish between different node and link types. However, by the end of the semester, most teams believed that their designs were better because of their use of diagrams to support their thinking. About half the teams reported that they were "surprised" by the problems in their designs that they had not recognized but for the use of the diagrams. A few students have kept in touch with Salustri since graduating and have reported to have continued to use diagrams to help them organize their work and think about complex problems.

4.1.1.2 Evidence from industry
Salustri has also presented DS diagrams in industry settings, at seminars and conferences. In these settings, DS diagrams were shown to practicing engineers and project managers. Salustri then posed informal questions about the design. Responses were usually immediate and correct. Audiences commented regularly on how useful the diagrams seemed and encouraged their continued development. Three relatively large companies have expressed interest in providing support for such development work.

4.1.2 Comparison of design schematics to design structure matrices
The author has found one tool, the design structure matrix (DSM) which overlaps with DS functionality significantly in the areas of system and process design. Also, since matrices are mathematically equivalent to graphs, one might expect a certain similarly of capability between DSM and DS. Thus, the author considered whether and to what degree DSM and DS are able to
communicate information to human designers quickly and efficiently.

69

The first step in this process was to consider DSM and DS from a theoretical standpoint Such a consideration suggests four ways in which DS are better than DSM. Â· Since DS are based on concept maps, DS promote learning through direct depiction of graphical diagram that reflect the cognitive structures that appear to exist in human minds, just as concept maps do. This is not the case with DSM. Â· DS tend to be more expressive, in the sense that more information can be associated directly with the relations between entities. In DSMs, such information is indicated by the contents of matrix cells, which are simple marks indicating a dependency, or possibly by a single numeric value. In DS, a variety of information about relations between entities can be associated with different links, and with the labels attached to both links and anchors. Â· In DSM, more than half of the cells are typically empty and thus they tend to waste space on computers screen and on the printed page - an empty cell in a DSM conveys no useful information to the designer. DS, on the other hand, use space much more effectively and efficiently; there are no "empty" elements in a DS. This makes them denser in terms of containing design information. Â· The layout of a DS can communicate a more meaningful overall structure of the design than a DSM (which is limited by the nature of its matrix form). Also, different layouts of the same DS can communicate different kinds of information while in case of DSM there is just one matrix form. DS is thus more expressive than DSM. The second step in the author's comparison of DSM and DS was to consider some "idealized" DSM and their equivalent DS with respect to qualitatively assessing the ability of each tool to communicate information directly to a human designer. The author has considered six such cases, each discussed below. Since these are not specific DSM (or DS), the author has resorted to a simpler, concept map-like depiction of the DS. That is, the hypothetical DSM considered here are generic ones, not tied to a specific stage o f a design process; it is thus not possible to use the kinds of DS developed in Chapter 3. However, the simpler structure of concept maps is equivalent to DS in such idealized cases.

70

NOTE: To expedite this study, CmapTools was used.

This package requires

labeling every link between nodes. Thus the DS graphs in this section have link labels that are not particularly useful. One should simply ignore those labels as an unfortunate artifact of the software used. This underscores again the need for a more appropriate DS tool to assist in the evaluation of the DS approach. The author found that there are patterns in DS that are equivalent to patterns arising in DSM. However, the patterns in the DS appear qualitatively more obvious in terms of the underlying relationships depicted, than the corresponding DSM. The six DSM cases are based on the two main features of DSM that denote largescale structures between the DSM elements. Situation l:T riangular DSM. A triangular DSM typically denotes a process without any "feedback" which would require iteration to resolve. Mathematically, this is equivalent to a set of simultaneous equations. Operationally, non-iterative processes can be executed faster and are thus preferred. The author considered three triangular DSM, having four, five, and six entities. Situation 2: DSM vsdth chunks and overlaps. Another typical goal of DSM is to develop matrices where all non-empty cells can be arranged in a series of dense, overlapping socalled "chunks" running along the DSM's diagonal. Such a structure equates to a series of sub-assemblies or sub-systems, where the overlapping elements are the interfaces between the sub-assemblies/sub-systems. The author considered three such DSM: first, with three chunks and only single elements overlapping; second, with three chunks and two elements overlapping; finally, with three larger chunks and only single elements overlapping. The actual cases are each discussed below. Case 1(a). Triangular DSM with 4 entities Figure 4.1(a) shows the triangular entities. The DS Figure 4.1(b) generated for this DSM is found to be triangular with one element being in the centre (or, equivalently, a planar version of a tetrahedron).

71

A B C D

A A X X X

B B X X

C

D

C X

D

Figure 4.1(a) Triangular DSM with four entities

Figure 4.1(b) DS representing triangular DSM with four entities Case 1(b). Triangular DSM with 5 Entities Figure 4.2(a) shows Triangular DSM with 5 entities. The DS generated for this DSM is shown in figure on 4.2(b) and is found to be "star" shaped with the comers being connected by links A B C D E A A X X X X B B X X X C D E

C X X

D X

E

Figure 4.2 (a) 1rriangular DS:M wit]li 5 ent

72

Figure 4.2(b) DS representing triangular DSM with 5 entities

Case 1(c). Triangular DSM with 6 Entities Figure 4.3(a) shows triangular DSM with 6 entities and corresponding DS has been shown in figure 4.3(b). DS is found to be again circular with star shaped nodes. A
A A

B B X X X X

c

D

E

F

B
C D

E F

X X X X X

c X X X

D X X

E X

F

Figure 4.3(a) Triangular DSM with 6 Entities

73

Figure 4.3(b) DS representing triangular DSM with 6 entities

In reviewing these three DSM and their corresponding DS graphs, we find that there are obvious visual patterns in both approaches. However, the author believes that DS can be understood with less "training". That is, a triangular DSM is meaningfully understood only when one understands the implications of triangular matrices. It is not obvious that practicing engineers and designers would grasp this immediately. However, the graphic representation of the DS is much more "obvious". Every item relates to every other, and a direction of "progress" through the diagram is evident from the number of arrowheads at each node. For example, it is quickly evident that in Figure 4.3(b), node F is the obvious starting place since it only has outward bound links. Case 2(a). DSM with three chunks and one overlap. Figure 4.4(a) shows DSM with three chunks and one overlap, and figure 4.4(b) shows the corresponding DS. Here, the DS takes the shape of three triangles with one element in center, with single nodes connecting them.

74

A B C D E F G H 1 J

A A X X X

B X B X X

C X X

c
X

D X X X D X X X

E

F

G

H

1

J

X E X X

X X F X

X X X G X X X

X H X X

X X 1 X

X X X J

Figure 4.4(a) DSM with three chunks and one overlap

CB EF AC GF CD

EG

DB

AB

//'

-- DA

Figure 4.4(b) DS representing DSM with three chunks and one overlap

Case 2(b). DSM with three chunks and 2 overlap. Figure 4.5(a) shows DSM with three chunks and two overlaps and figure 4.5(b) shows the corresponding DS.

75

A B C D E F G H 1 J

A A X X X

B X B X X

c X X

c
X X X X

D X X X D X X X

E

F

G

H

1

J

X X E X X

X X X F X X X X

X X X X G X X X

X X H X X

X X X 1 X

X X X X J

Figure 4.5(a) DSM with three chunks and 2 overlaps

0

-

-F I-

Â·0 ;\

-F C -

JF

/
EF

EC

/

CB

/
HI GF

/
,.H F

/ AA
EG

:A . /
/ \

\
CD

AC \

/ \
AB ~~-- DA ~

\
0

/ /

xo
-- GD

0=

-- H-

Figure 4.5(b) DS representing DSM with three chunks and 2 overlaps

Case 2(c). DSM with three chunks with one overlap (each chunk is 5X5) Figure 6(a) shows DSM with three chunks and one overlap (each chunk is 5x5) and figure 6(b) shows the corresponding DS.It is interesting to see how DS has resulted into a star shape at the center and one triangle on each side.

76

B
B

H

K

M

H

H

K M Figure 4.6(a) DSM with three chunks with one overlap

K M

ML KM EH FG

EF

CB CE AC DC AE

JL

EH

EG

B D
DE -- - AD -

AB

J K-

Figure 4.6(b) DS representing DSM with three chunks with one overlap

In these cases, we see that the simple patterns arising from triangular DSMs repeat when considering DSM with chunks. Furthermore, the shared elements are more obvious in the DS than in the DSM. In the DS, the shared nodes are immediately apparent; however, in the DSM, the shared nodes can be difficult to establish without carefully following the rows and columns. Based on the above cases, a DSM example has been selected at random from the literature. Figure 4.7 shows the parameter based DSM for brake system. This example shows how triangle entities and the chunk can be identified in the corresponding DS.

77

A X B X X X X X X X X X X X X

1
c
X X

     
X X X X X X X X X X X X X X

K L X M

X

Figure 4.7 Parameter-based DSM for brake system [37] Figure 4.8 shows DS for the brake system. The author has identified a "star" shaped Configuration resulting firom the large triangular matrix in the DSM. This has been shown with blue links.

78

[ Piston rear size[E] j-4---------------- H Front lining coeffident of friction[H] ^ Piston front size[D] Wheel Torque[CJ ^caliper complianceÃL]"]

^ABS modular display[M] j

Pedal Mech advantage[Fl

system level parameters[Bl Rear lining coeffident of friction[G] j custom er requirements[Al

Booster reaction ratio[I]

[ Rotor diameter[3] ]

Booster max stroke[Kj

Figure 4,8 DS representing DSM for brake system Figure 4.9 show the same brake system. In this case, a different, triangular element has been identified.

79

P isto n re a r size[E ] ] Fro n t lining coefficient of friction[H] caliper com piiance[L] j P isto n fro n t size[D ] W heel Torque[C ]

ABS m odular d i s p la y [ M ] J

P edal Mech a d v a n ta g e [F ]

c u sto m e r re q u irem en ts[A ]

R ear lining coefficient of friction[G]

^Rotor diam eterfJ] J B o o ste r re a ctio n r a t i o f i ] B o o ste r m ax strol <

j

Figure 4.9 DS representing DSM for brake system In this more realistic case, we find that patterns are superficially more difficult to see in the DS than in the DSM. The only way noticed quickly is by color-coding them to stand out. However, if there were a software system able to support DS graphs, then one could expect such a package to, for example, automatically search for and highlight such structures, much as was done manually here. Under such circumstances, the author

believes that DS are again able to communicate information more directly than DSM. Since matrices and graphs are equivalent representations, it is not surprising that structures in one coiTcspond to structures in the other. However, the goal of the design schematics project is not just to manipulate these structured but to promote different or better thought processes in designers. As such, a diagrammatic representation offers

users a different way to view information, which could stimulate new ideas. The author has also selected randomly one more DSM example (a "component based" DSM) to represent complex system architecture. This example foeuses on easy

80

understanding of exchange of information through DS. Figure 4.10 shows DSM representing interactions between elements in an automotive climate control system.

A B Radiator Engine fan Heater Core Heater Hoses Condenser Compressor Evaporator Case Evaporator Core Accumulator A A X B X B C D E F G H I X

c

D E F G H I

J

K L N M O

p

c
D E X X F G X X X H X X I J K L M N X X X

X

X X

Refrigeration Controls J Air Controls Sensors Command Distribution Actuators Blower Controls Blower Motor K L M N O P X X X

0
X

X

p

Figure 4.10 Material interaction between components for an automobile Climate Control System [17] Clustering the "X" marks along the diagonal of the DSM resulted in the creation of three "chunks" for the Climate Control System; the Front End Air Chunk, the Refrigerant Chunk, and the Interior Air Chunk. Figure 4.11 shows DSM representing interactions between elements in an automotive climate control system after clustering.

81

J K Radiator Engine fan Heater Core Heater Hoses Condenser Compressor Evaporator Case lEvaporator Core Accumulator Refrigeration Controls Air Controls Sensors Command Distribution Actuators Blower Controls Blower M otor P O G N A B E F L M N X K D D

E Â¥

 P O G

X B X X X X X X X X X X X X

mm

1
m. -X Q: X X

Figure 4.11 Material interaction between components for an automobile Climate Contro System after clustering [17] The author has drawn the same example using a simple concept map for analysis purposes. The reason for doing this exercise is to stress how layout and construction makes a difference in human understanding. They are four different diagrams drawn depicting four different stages. It is observed that information gets clearer as the concept map evolves. Figure 4.12 shows Car layout system. All the information from the Figure 4.11 has been transferred; i.e. Figures 4.11 and 4.12 contain exactly the same information. Nodes are elements. Arrows are represented with different colors for clarity. Dependencies are shown with the help of arrows coming out of the particular element. Elements K, D, J, L, M and N are independent of all other elements. They are moved to the bottom of the

82

figure. Elements C, O, G, F exchange information with elements P, E and I therefore it is represented by bidirectional arrows. Element E at the top exchanges two-way information with elements H and F. This is shown by arrows entering as well as exiting the node. Element E also conveys information to element B

1. Car Layout System Constructed Randomly From DSM

Radiator(A) Condenser(E)

Engine Fan(B) Evaporator Core(H)

P

Blower Motor(P)

Accumulator(I)

Heater Core(C)

Blower Controls(O)

Evaporator Case(G) Air controls(K)

Compressor(F) Heater Hoses(D) Refrigeration Controls(J)

Command Dsitiibution(M)

Actuators(N)

Figure 4.12 Car layout system- stage I This concept map was laid out manually so that no links cross. The algorithm to do this is easily implemented, and in fact is standard in most graph visualization software. We note how the clusters are immediately apparent. By using a simple algorithm o f

graph visualization - which has nothing to do with engineering design - we have achieved a result equivalent to clustering algorithms in DSM. More importantly, we have done so (a) without "wasting" space with empty areas (empty DSM cells) which carry no information and (b) leaving the option o f adding more information to the diagram (which cannot be done with DSMs).

83

Figure 4.13 is an enhancement o f the previous figure. It is streamlined and redrawn with minor modifications. The position o f elements E, B, and A have been changed. The purpose o f doing this is to convey that how layout affects comprehension o f the diagram. W ith this figure the key elements are more evident. Element E seems to be in the key position because with the exception o f feedback links it feeds information forward to all the other elements.

Car Layout System Arranged Properly For Easy Interpretation

C ondenserÂ©

Engine Fan(B)

- --

0

-

Radiator(A)

Evaporator Core(H)

Blower M o to r Â©

AccumulatorÂ®

Heater Core(C)

Blower Controls(O)

Evaporator Case(G)

Com pressorÂ®)

Avir

controlsÂ® )

Heater H o sesÂ® )

Refrigeration ControlsÂ®

SensorsÂ®)"]

Command Dsitnbution(M)

ActuatorsÂ®!)

Figure 4.13 Car layout system stage II

Figure 4.14 shows all the loops replaced with two-sided arrows. The loop between elements E, H, F, and 1 are more evident now. This figure helps to generate new ideas in terms o f modifications. For example, some o f the questions that can be addressed are: Whether is it possible to reduce the interaction between elements? What would happen if any one o f the elements were removed? If so which would be the best option?

84

In particular, consider elements E, H, F, and 1. These are tightly coupled system elements. One is led to wonder if the distinction between these elements, made as they have been, induce unnecessary complexity. It might be possible, for example, to reassign functions to these elements so as to minimize the coupling. Also, if there were one

engineer in charge o f each component, then this diagram suggests that the engineer in charge o f component F is being directed by two different (and possibly incompatible) sources. Based on these questions and possibilities, the author has come up with the next figure

Layout Further Simplified by Showing Two Way Imks

CondenserÂ®)
EH '

______ E

Engine FanÂ®)

___& Radiator(A)

Evaporator Core(H) Blower Motor(P)

AccumulatorÂ®

CompressorÂ®)

Heater Core(C)

Blower Controls(O)

Evaporator Case(G)

Air controlsÂ®)

Heater H osesÂ® )

Refiigeration ControlsÂ®

SensorsÂ®)

Command DistributionÂ®Â®

ActuatorsÂ®Â®

Figure 4.14 Car layout system stage 111 Figure 4.15 shows stage IV o f the car layout system. The author has suggested minor change that could result in major reduction in interactions between elements. This is purely done by reading figure 4.5 and judging one of the possible solutions. The author believes that combining elements F and 1 can remove many interactions.

85

4.Car Layout System by Combining N o des ^ccumulator(I) and Compressor(F)

CondenserÂ©
EH

E

) Engine F an(B )k

AS

>| Radiator(A)

Evaporator Core(H) Blower M otorÂ©

r
HI PG

I
Accumulator^ and Compressor(F)

PC PO

Heater Core(C)

Blower Controls(O)

Evaporator Case(G)

Air controlsÂ©)

Heater Hoses(D) Actuators(N)

Refrigeration ControlsÂ©

SensorsÂ©

Command Distnbution(M)

Figure 4.15 Car layout system stage IV

The author is trying to convey here that the diagrams help to generate new ideas and provide room for improvement by merely changing the layout. This is not possible with a DSM, which is constrained to the matrix format thus limiting the ability to visualize relationships easily.

4.2 D iscu ssion
In the course o f developing the kinds o f DS diagrams described in the preceding chapter, many other ideas were also considered, but found to be for one reason or another inappropriate for the scope o f this work. These other ideas are presented in this chapter, because they may form the foundation o f future extensions to the DS approach. Figure 4.16 shows the relations between functions and sub-systems for the coffee maker example. Functions are listed on the right column and drawn as ovals. Sub systems are shown horizontally on the top row as rectangular boxes. Some o f the functions are related to more than one sub-system therefore one sees a straight line drawn

86

advantage over this figure 4.7 since it states the type of energy associated with each functions and sub-systems. Also, figure 3.17 has a better layout that highlights clearly the sharing of functions between two or more sub-systems. One can visualize the information at a glance. The author did not consider figure 4.7 in DS for the following reasons: Â· Layout: It is difficult to visualize the relationships between nodes. It could be further improved by a better layout. Â· Adequacy: It does not show energy interactions within the system. Â· Density: It is not dense in that there is much graphical "white space". This can be addressed by reconfiguring the layout, but this is considered to be future work.

87

Structure

Electrical

Control

User Interface

Safety

Heating

sirv'ive small drops

O

survive heavy tse

Woik aler lonf h otÂ» offtonge

constmmg

heat up
indicate when

reatt

make codec

Stay on

dotiMlcoaducl ctecricii)

monitor tempera! ire

Tuns off if temp loo high

p ro tid t c k Â» r vo w w h co e p triiin t

keep CO (Tee warm

Fit fiher shape

contain coffee

Contain water

Figure 4.16 Functions and the Sub-systems Figure 4.17 shows a combination of the US and part of the PDS for the coffee maker. All the FRs and PCs related to the particular usage step are inserted into the node

88

for that step FRs are represented by ellipses and PCs are represented by rectangles. This diagram could help a designer make decisions about a particular scenario by considering the impact of FRs and PCs on it and vice-versa. The reasons why this figure was not taken into consideration are: Â· Complexity: The amount and types of information in this figure make it difficult to find a useful layout. Â· Duplication: FRs and PCs might be duplicated in multiple US step nodes. Misinterpretation of such duplication by humans can lead to design errors. Duplicated information also makes the diagram unnecessarily dense, as well as increasing the expected computational overhead for computer tools that implement this kind of diagram.

Usage scenario combined with FR,PC
[ Â«impie deaipi

contain water

compict
[ turas off temp if too high

indicate when ready
stable

insulated

[

easy to operate

Serve Coffee

e a y to handle

multiuse

eas}- to operate sturdy fit filter shape contain coffee monitor temps

loadfilter
strong

Load coffee
auto shut off
idal* t i n of liter and amt of

Â«pacious

Deactivate

Qean
dishwasher safe
good quality long lasting no geometr)' that is hard to clean

[ consuming less power

eas)- to assemble/disaasemble

j

Figure 4.17 Usage scenario combined with FR, PC.

89

Figure 4.18 shows the dependency o f physical components by means of arrows. Such a diagram could be used to support configuration design. As stated earlier, the right-hand side of a node is for the output and left-hand side is for the input.. It was initially drawn to compare information represented via DSM to DS. Though it did convey information in a precise and clear way compared to DSM it lacked on following grounds: Â· Layout: Layout was not structured properly. Firstly, it is difficult to follow arrows especially when they cross each other. It is impossible to guarantee that the configuration of a 3D product can be represented as a 2D diagram without links that cross (a "non-planar graph"). Secondly, boxes representing "elements" are drawn randomly rather than following any specific order in terms of importance. This could be improved if criteria for ordering nodes could be developed. This could be an item for future work.

90

Component Based DSM for an Automobile Climate Control System

Radiator(A)

Engine Fan(B)

Condenser(C)

Command Distribution(M)

Compressor(F) Heater Hoses(D)

Evaporator case(G)

Evaporator Core(H) Accumulator(I)

Referigerator controls(J)

Sensors(L)

Actuators(N) Blower Motor(P) Air controls(K) Blower controls(O)

Heaters core(C)

Figure 4.18 Component Based Diagram

91

Since all of these above diagrams lacked in some important areas, they were not discussed in the chapter 3. Some of the information that they represent is not suitably detailed to meet the requirements presented in Chapter 1. For example, Figure 4.7 simply states the relation between functions and sub-systems. These diagrams also have relatively poor layout. Since DS depends strongly on layout to make emergent information explicit, they were not considered in the author's work. One of the major problems faced by most diagramming techniques is computerbased graph visualization. Usually the size of the graph is a key issue in graph visualization. Large graphs pose several difficult problems. If the number of elements is large it can compromise performance or even reach the limits of the viewing platform. Even if it is possible to lay out all the elements, the issue of comprehension or usability arises, because it will become impossible to distinguish between different nodes and edges. This is particularly true where a great deal of information is to be represented. It is well known that comprehension and detailed analysis of data in graph structures is easiest when the size of the displayed graph is small; in general, displaying an entire large graph may give an indication of the overall structure or a location within in it but it difficult to comprehend [38]. To overcome these issues, the author recommends that computer-based DS implementations must have a filtering feature that will allow a designer to focus only on specific areas just by allowing the user to define his own criteria regarding what kinds of information should be rendered visually. DS is being developed to clarify for designers the broad sorts of product information used in early design stages. With such a tool, designers will be able to treat the early stages of product development such as requirement specifications that are overlooked by the existing methods and tools. Some salient features from existing diagramming techniques have been incorporated into DS. Elements such as interpretation of arrows entering and leaving the process from IDEF have been borrowed from other work. Similarly, different shapes (i.e. rectangle, oval, elliptical) were adopted from flow charts. Using arrows for relationships is a feature common to concept maps, UML, and other diagramming formats. To be truly useful to practicing engineers, DS must be implemented in a computerbased tool. The diagrams presented in this work were drawn "by hand" using

92

conventional software such as Smartdraw; this was an extremely time-consuming undertaking. Moreover these diagrams are static. Changes must be done manually.

Practicing engineers have neither the time nor the inclination to invest the effort required. An appropriate DS tool is required. However, in order to implement such a computer-based tool, it is vital to have a clear set of requirements for the software. This work has provided: a description of the graphical language needed for DS and defined the structure of "diagrams" statically, to know what the tool should be able to create. With this in hand, implementation becomes a relatively straightforward affair. The work is as useful as a whiteboard, but provides structured graphical representation of information, which has never been done before for early design stage. DS has the following advantages: Â· DS gives an overview of a design that other methods cannot provide. Â· DS provides consistency of different views of information. Â· DS integrates different stages of early design through the diagrams. Â· DS creates a framework for developing a new kind of software tool. Once an appropriate computer-based tool is developed, DS will support early design in the following ways. Â· The DS tool will have a flexible structure. A designer will be able to express his thoughts and ideas easily and freely. Â· The DS tool will be adaptable. It will be "programmable" so as to display a variety of different kinds of diagrams. Â· The DS tool will be lightweight. It will be intuitive to its users. Â· The DS tool will focus attention of the designers in the specific areas such as product functions, product characteristics, constraints and performance metrics. The software will also support interlinking diagrams between all information elements. Â· The DS tool will be universally applicable. It addresses all the early design stages through the various DS diagrams. These diagrams highlight crucial design information and shows how they are interrelated.

93

Â·

The DS tool may support access of a database of "detail" design elements and extract suggested parts/elements for the designer.

Â·

The DS tool will promote learning. It will help in brainstorming ideas and inputs in problem space as well as solution space, much as concept maps do.

Â·

The DS tool will assist in development of designers' emergent knowledge of designs. In this sense it will help to make evident to the designers any problems or issues that occur while integrating different design elements.

Â·

The DS tool will help in concurrent engineering since the diagrams will be easy to understand even to a non-technical group. It will provide common platform for discussions between the design teams and other groups.

Â·

The DS tool can be used for reverse engineering as well. DS diagrams can help to explain the function and structure of existing designs. designers to understand how an existent product works. As such, they can assist

4.3 Computerization of DS
It is evident that computer support for the development and full exploitation of DSs is needed. Author feels that this will not only widen the use but will be speed up the design process. There are mainly four fundamental purposes for the computerization of DSs [2]. Â· Computerization improves usability. Most of the DSs presented in this thesis were laid out "by hand" with conventional diagramming software. There were numerous problems faced while drawing these figures specially the laying of nodes and links. This was not only difficult but also time consuming. Trying to develop and maintain DS diagrams in an "real-world" industrial setting would be so difficult that any expected benefits of their use would be negated. Â· Computerization helps in generating multiple diagrams. Computers are very efficient at storing information in integrated databases. Information can be extracted from these databases and visualized via the DS tool in a variety of different ways, and without being concerned with issues of duplicate or redundant information.

94

Â·

Computerization improves information integrity. An appropriate computer tool would ensure that information was being presented consistently, no matter what kind of DS was being rendered. The underlying information used to build the renderings would be maintained by automated databases. expected to be high. In both cases, information integrity is

Â·

Computerization helps in design automation. DS carries certain amount of semantic content. Artificial intelligence engines can examine this content for various design analyses in a short span of time. The basis of a computerized DS (cDS) system is straightforward and well

understood. Presently there are many graph layout engines and software packages available both commercially and for research purposes. But the distinction for cDS systems is in the intelligence needed to support design oriented semantic content, particularly for layout purposes. DS provides the language to let users structure their changes but it is still manual and requires the designer to think through the rules for laying out the diagram. The software would just implement those deterministic rules for the designer, more reliably and much faster.

4.4 Contributions
It has been shown that how design information represented in diagrams play an important role in the upstream design stage. Various diagramming techniques were studied and analysed. Their pro and cons pertaining to the early design stage is

evaluated. General problems faced by designers/engineers were discussed. Good features from these diagramming techniques were taken in along with the new ones for the development of DS. Initially the author came up with a number of inter-related diagrams that were in line with a Generic Design Process. It has justified how each diagram plays an important role in terms of providing vital information in the initial design stage. Sample problems (e.g. the "Punch" and the "Chair") were used to demonstrate the diagrams used for each stage. These diagrams show how brainstorming ideas and thinking process play a role in design of a product. Diagramming factors such as colour coding and symbolic

95

representation were explained. Each diagram was drawn to show how it helps in designing individually through brain storming ideas. Relation of each diagram further bring out all maximum relevant information required in the initial design stage. Diagramming factors such as colour coding and symbolic representation was done to represent FRs, PCs, PMs, Cs and other features. This was done with a view to enhance DS and for ease of understanding. The grammar for DS has been partially laid out. Some of the grammar is in line with the existing diagramming techniques. The main focus is to keep it as simple as possible for ease o f work as well as understanding. Also, a comparison of DS and DSM has been carried out to show how information can be interpreted easily thorough DS. Further, DS also influence reasoning with diagrams and this has been shown by inter-related diagrams. In summary, the contributions of the author are: Â· Development of a systematic set of diagrams that capture important information for the early stages of product design. Â· Â· Developed a graphical language for information specification. Indicated how the design schematics approach is consistent with and in some ways superior to matrix-based approaches such as DSM.

96

CHAPTER 5 Conclusions and Future Work
5.1 Conclusion
The main goal of this thesis is to study and gain an intuitive understanding that how diagrams help "upstream" design processes. The main benefit of a diagram is that it can be understood intuitively and with relatively little reliance on the interpretation of natural language text. DS will allow the engineer to, for example, express constraints explicitly (i.e. shown in PDS diagrams) that are relevant to each part of the product (i.e. FRS, PCs), in such a way that the constraints and some of their consequences are immediately apparent to the reader without further reasoning. Finally, by showing visual representation through diagrams, rather than hidden symbolic information, the diagrammatic approach can serve as a guide to choose an efficient problem solving method or reasoning process. This has been shown in the case study of a coffee maker. Function modeling is an important concept that is incorporated by DS. Function diagrams identify weaknesses in the product and subsequently improvements can be made. They allow designers to identify needs that products must meet in operation. Through function decomposition, analysis of a problem becomes more transparent to all stakeholders. The PAS diagram is the next step after functional modeling. In a PAS, functions are clustered into modules based on how those functions transform mass, energy, and information. This is an essential first step in associating form with function. This step is important because the choice of system configuration will influence strongly the product's performance in manufacturing, assembly, product variety, serviceability, product design management, and future product development [39]. The result of product architecture is the layout and connectedness of systems and assemblies as shovra in figure 3.22. Since DS is still under the development stage, there is no quantitative data by which to evaluate the tool. However, some anecdotal evidence gathered in this work does

97

suggest that the tool does have potential to be of benefit to practicing designers. Salustri has used DS in teaching course and students have found it to be very useful. A new tool has been introduced to assist designers, design schematics, which is in line with generic design processes and is based on concept maps, augmented with certain features from other diagramming systems. The focus of DS is on the nature of the representation, how it helps in thinking processes, and not on the significant computational aspects. Clarity in communication is increased especially concurrent engineering processes. The information in this thesis is a significant step towards a system to collect and represent early design process information. This is highlighted in the case study of a coffee maker where PDS is re-drawn and more design specifications have been added to it by way of re-thinking the design. This study is a productive approach towards understanding good designs since it covers all the required criteria. Several examples are given to indicate how DSs can capture information meaningfully during the early stages of product design, when Â· Â· Little or no information about product geometry is available and Decisions have the greatest impact on product performance.

5.2 Future Work
This research extends the current line of research in diagrammatic techniques and reasoning to support design engineering. Software to support drawing and managing DS would be highly beneficial, especially features such as hierarchies of nested DS diagrams (i.e. a whole diagram at one level "collapsing" into a single node at a coarser level of detail). DS diagrams can become complex very quickly. It is unreasonable to expect them to be hand-drawn. Though there are many packages available (e.g., Smartdraw, Visio etc) that can help to draw DS diagrams, there are many features that are unavailable today. This is because none of the existent tools apply specifically to engineering design. New software needs to be developed. The missing functionality depends on the grammar of DS. For example, automating the different shades of line (e.g., dark, light, dotted) and the graph layout of DSs will require new code to be developed. Also, if the distinctions between different types of nodes and links were captured then some automated reasoning

98

tasks based on diagram topology and geometry could be possible. The capacity to develop knowledge bases of product families can also help turn DS software into a visual knowledge management system that can assist other management areas, which work close to designers [4]. Generally, text is still used in DS, but only to fill in nodes and label links and their anchors to nodes. It is possible to develop a set of graphic symbols, or glyphs, to

represent those text fragments (similar to icons used by many graphically based computer programs), but that would introduce another set of symbols that users would have to learn. Such an undertaking falls outside the scope of the present work. While the author does not discount this possibility, it may make the DS system as a whole harder to learn and use by introducing yet more symbols that users must understand. Any set of icons could be used in a specific application of DS. The point is that the labels, whether they are text or icons, be immediately understandable to engineering designers. It was easiest to just use simple text labels. Designing icons that any design engineer would understand would be a major undertaking. Also, DS must be formally validated against the needs of practicing design engineers. This is difficult to do if one is forced to draw the diagrams without intelligent computer support. Once a prototype implementation of a computer-based tool for DS is written, a proper study of its usability and capability must be undertaken.

99

REFERENCES
[1] Larry 1. Constantine, Lucy A.D. Lockwood," Software for use", a practical guide to the models and methods of Usage centered design. New York, pp 38-42, March 1999. Salustri, F.A., "Visualizing Early product design information with enhanced concept maps",. International Conference on Engineering Design ICED 03 Stockholm,pp 2-4, August 19-21,2003. Amheim R.: Visual Thinking. University of California Press, Berkeley, CA.1969 Larkin, J.H. and Simon, H.A., Why a diagram is (sometimes) worth ten thousand words. Congnitive science, pp 11,1987. Chandrasekaran, B., Narayanan, N.H. Towards a theory of commonsense visual reasoning. In foundation of software technology and Theoretical Computer science. Springer, Berlin, 1990. Novak, G.and Buiko, W., Uses if diagrams in solving physics problems. AAAI Symposium on Reasoning with Diagrammatic Representation, Standford, CA, 1992. Lindsay, R.K., Diagrammatic reasoning with simulation, AAAI Symposium on Reasoning with Diagrammatic Representation, Standford, CA, 1992. Chandrasekaran, B., Narayanan, H. & Iwasaki, Y.,"Reasoning with diagrammatic representation; a report on the AAAI Spring Symposium", March 25-27,1992. AI Mag., 142, pp 49-56, 1993. Salustri, F.A., "Visualizing product design information." Proceedings CANCAM, pp 106-107,2003. Shirley Tessler & Yumi Iwasaki and Kincho H.Law., "Redraw-a diagrammatic reasoning system for qualitative structural analysis." Advances in Engineering Software 25, pp 149-159, 1996. Mackinlay and Genesereth., M.R "Expressiveness and language choice," Data and Knowledge engineering {1}, pp 17-29,1985.

[2]

[3] [4] [5]

[6]

[7]

[8]

[9]

[10]

[11]

100

[12]

Vessey, L, and conger, S.A."Requirement Specifications: Learning Objects, Process, and Data Methodologies," Communication of the ACM, ppl02-l 12, 1984. Object Management Group, Inc. Introduction to OMG's Unified Modeling LanguageTM (UMLTM) 2002 [http: // www.omg.org /getting started/ what is uml. htm] Aug 21,2002. Pavel Hruby, "Structuring Specification of Business Systems with UML" (with an Emphasis on Workflow Management Systems), OOPSLA'98 Business Object Workshop IV [http://jeffsutherland.org/oopsla98/pavel.htmI] Sept 21,2003. Hans - Erik Eriksson and Magnus penker. Unified Modeling language, `UML Toolkit', pp 7-10,1998. Paul R.Seesing and ARMA international. Basic Systems Analysis Tools for Computer Users, pp 4. @1993. Steven D.Eppinger, Daniel E.Whitney, Ali A.Yassine.," The Design Structure Matrix - DSM." [http://web.mit.edu/dsm/Tutorial/Component-Based.htm] SeptlS, 2003. John Hauser, Don Clausing., "The House of Quality."Havard Business Review. pp-12.May-jime 1988. Brad Temple and Helen Marshall, "Using concept maps to evaluate Teaching and Learning, "Original ultiBASE STAR Report, Royal Melbourne Institute of technology University. Novak, Jospeh.D, "The Theory Underlying Concept Maps and How to construct them."2000[http://www.cmap.coginst.uwf.edu/info/printer.html.] Feb 15,2002. Novak, J.D. Handbook for learning How to Learn Program New York, Cornell University Press, (p. lll-l), 1980. Arun K. Samantaray.," About Bond Graphs." High Tech Consultants. Copyright Â© 2001 [http://www.bondgraphs.com/about.html ] Jan 20,2004. Keith McConnelly," Introduction to IDEF Modeling: Function and Information Modeling"[http://wvyw.c3i.osd.mil/bpr/bprcd/0066.htm] Knowledge Based Systems, Inc. (KBSI).,"A structured approach to enterprise modeling and analysis" [http://www.idef.com/idefO.html]Aug 26,2003.

[13]

[14]

[15] [16] [17]

[18] [19]

[20]

[21] [22]

[23]

[24]

101

[25]

Mayer, Richard J., et al., IDEF Family of Methods for Concurrent Engineering and Business Re-engineering Applications, Knowledge-Based Systems, Inc., 1992. Modelica Association, ModelicaTM - A Unified Object-Oriented Language for Physical Systems Modeling, Tutorial Version 1.4, December 15,2000 [http://www.modelica.org/ documents/Modelica Tutorial 14. pdf] May 25,2002. Larry L.Constantine, Lucy A.D.Lockwood,"Software of Use, "A Practical guide to the Models and Methods of Usage- Centered Design, pp 69-71.March 1999. Karl T.Ulrich, Steven D.Eppinger, "Product Design and Development", pp 19-21. Julie M.Hirtz &Robert B.Stone, Simon Szykman, DanielA.McAdams, Kirstin L.Wood.,"Evolving a functional Basis for engineering design". Proceedings OF DETC'Ol, 2001 ASME Design Engineering Technical Conferences, September 912,2001 .Pittsburgh, Pennsylvania. Pugh S.,"Total design", Addison-Wesley, London, 1991. Dym C.L. and Little P.,"Engineering design: a project -based approach", Wiley and Sons, New York, 2000. Robert B.Stone, Kristin L.Wood and Richard H.Drawford.,"Using quantitative functional Models to develop Product architectures.". Quantitative Functional model.,pp 2-3. Dec 12,1999. Tomoyuki Hata, satoru kato and Fumihiko Kimura.,"Design of Product Modularity for Life Cycle Management." The university of Tokyo.pp 2-4. P.Gu, S.Sosale.'Troduct modularization for life cycle engineering." Robotics and computer Integrated manufacturing, p p l-4 .1999. M.A.Hassanain, T.M.Froese, D.J.Vanier.,"Development of a maintenance management model based on lAI standards.". Artificial intelligence in Engineering 15,pp 177-193 .2001 Filippo salustri.. Course on "Mechanical System Design [http://deed.ryerson.ca/~fil/t/pds lclasses.html] Sept 18,2003. MEC723"

[26]

[27] [28] [29]

[30] [31]

[32]

[33]

[34]

[35]

[36]

102

[37]

Chun-Hsien Chen, Li Pheng Khoo and Limin Jiao.,"A General Model for Managing Design Iterations of a Coupled Design Process in Product Development."pp 5.1999. Ivan Herman, Guy Melancon, and M.Scott Marshall., "Graph Visualization and Navigation in information visualization: a survey.", IEEE CS Society. Mike J.Wie, James L.Greer, Mathew I.Campbell, Robert B.Stone, Kristin L.Wood.,"Interfaces And Product Architecture.", Proceedings OF DETC'Ol, ASME 2001 International Design Engineering Technical Conferences And Computers and Information in Engineering Conference, September 9-12, 2001.Pittsburgh, Pennsylvania, 2001.

[38] [39]

103

Appendix: Design Schematics for various products

Black Box (chair)

relative rotation^human force,weight,bo(fy

human force,weight,noise Provide sitting body relaxed sitting

manual use

A1

Filing

user interface processing

process and control fiinction

punched paper

couple paper

position punch

press punch

punch holes on paper

import hand

dissipate force

release punch secure paper

l/P processing
unibnnity in holes punched

maintenance & self test

01? processing

A1

Adjust back Support

If not proper,adjust

hei^t

Import Body

Position Chair

Transmit Force

Relative Motion

Check for Height/Back SiÃ§port

Release Force

Secure Position

A1

PDS -Stapler

Product Characteristics Functional requirements Functionality The Stapler must staple The Stapler must be able to unclench improper staples

Constraints materials that can be stapled (papers, plastic, cloth)

Performance Metrics

Durability The stapler must have proper guideway so that it can hold papers while stapling

Number of staples that can be inserted into The stapler must staple fast paper during one operation Stapler must Staple without any effort The stapler must assist in removing defective staples The Stapler must sustain repeated performance Bending staples in The Stapler must staple different fashion during uniformly stapling operation(say in a opposite way) The Staple must last long Life time The staple must survive heavy use The stapler must survive drops from sensible height The staple must be light in weight Stapler must not be bulkv Minimum loading time for loading of staples inside stapler The Stapler must have provisions to fit different size of staples

The Staple must be portable

Stapler must have sufficient storage space for staples

PDS -Stapler

Product Characteristics Functional requirements The stapler must have additional space to cany excess staples for longer use. The staple must be light in weight The staple must be comfortable in use

Constraints

Performance Metrics

Stapler must give a clear view while operating Stapler must make only pleasant sounds Stapler must not cause injury to operators (i.e. during pressing staples into paper)

The stapler must be well balanced in the hand The stapler must be manufacturable The stapler must be strong The stapler must be affordable Stapler must be maintainable Stapler must be safe In case of any malfunction during operation, the staples should not protrude out. Stapler must be marketable Stapler must have a nice appearance Stapler must protect user from hurting his hand during operation

PDS -Stapler

Product Characteristics Functional requirements The stapler must be able to align easily against the paper that needs to be stapled. The stapler must have easy replaceable parts in case of any breakage The stapler must have a flat smooth surface at the bottom so that it can rest easily on table.

Constraints

Performance Metrics

Curriculum Vitae
Name Jayesh Parmar

Post Secondary Education and Degrees

Master of Applied Science-Ryerson University Toronto, Canada (2004)

Bachelor of Engineering -- Nagpur Univerity, India.(1993)

Related Work Experience

Teaching Assistant, Ryerson University (2001-2003) Manufacturing Engineer, GM. India Division (1995-2000) Mechanical Engineer, Steelco. India (1993-1995)

Publications F.A. Salustri and J. Parmar, "Product Design Schematics: structured diagramming for requirements engineering," Dubrovnik, Croatia. Design 2004 Conference,

F.A.Salustri and J. Parmar, "Diagrammatic visualisation to promote collaborative/concurrent design," 5th Inti Symp on Tools and Methods of Competitive Engineering, 2004.
r '

