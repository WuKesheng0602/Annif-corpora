NOTE TO USERS

This reproduction is the best copy available.

UMI

FLUTTER SUPPRESSION OF AN AIRFOIL USING NEURO-FUZZY CONTROL
by

Chun Meng B.E. (Mechanical Engineering) East China University of Science & Technology (China), 1989

A thesis presented to Ryerson University in partial fulfillment of the requirements for the degree of Master of Applied Science in the program of Mechanical Engineering

Toronto, Ontario, Canada, 2003 © (Chun Meng) 2003

UMI Number; EC52936

INFORMATION TO USERS

The quality of this reproduction is dependent upon the quality of the copy submitted. Broken or indistinct print, colored or poor quality illustrations and photographs, print bleed-through, substandard margins, and improper alignment can adversely affect reproduction. In the unlikely event that the author did not send a complete manuscript and there are missing pages, these will be noted. Also, if unauthorized copyright material had to be removed, a note will indicate the deletion.

UMI
UMI Microform EC52936 Copyright 2008 by ProQuest LLG. All rights reserved. This microform edition is protected against unauthorized copying under Title 17, United States Code. ProQuest LLC 789 E. Eisenhower Parkway PC Box 1346 Ann Arbor, Ml 48106-1346

Author's declaration
I hereby declare that I am the sole author of this thesis. I authorize Ryerson University to lend this thesis to other institutions or individuals for the purpose of scholarly research.

I further authorize Ryerson University to reproduce this thesis by photocopying or by other means, in total or in part, at the request of other institutions or indiUduals for the purpose of scholarly research.

1 1

Borrower's page
Ryerson University requires the signatures of all persons using or photocopying this thesis. Please sign below, and give address and date.

Ill

ABSTRACT FLUTTER SUPPRESSION OF AN AIRFOIL USING NEURO-FUZZY CONTROL
© Chim M eng, 2003 Master of Applied Science in the program of M echanical Engineering Ryerson University

Flutter, a self-excited vibration of wings and control surfaces, can lead to catastrophic failure o f aircraft structures. Classical methods have been applied successfully for flutter suppression and for increasing the flutter critical speed. With the demand of higher speed and more flexible aircraft, more advanced active flutter control techniques are required.

hi this study, a neuro-fuzzy methodology for flutter suppression of a two dimensional airfoil is explored. A MATLAB simulation environment is used for the modeling and analysis. The airfoil model is simulated according to a set of aero elastic equations o f motion. A neuro-fuzzy controller, called NEFCON, is then embedded in the airfoil model for increasing the flutter speed.

NEFCON learns from the motion of the airfoil and automatically produces fuzzy rules. The simulation results show that these fuzzy rules can successfully increase the critical flutter speed. The performance of the fuzzy rules is tested with different airfoil parameters.

IV

Acknowledgement
I would like to thank my first supervisor, Dr. Farrokh Sharifi, for his kindly guidance on m y early Master's degree study. He takes great care of his students.

I would like to express my appreciation to Ms. Leah Stanwyck for her consistent and timely assistance on graduate study affairs. She is always so sweet and willing to help you.

I am grateful for the support of Mr. Reg Michie on software searching. Mrs. Diane Ewen provides a lot of help on paper writing, thank you.

I would like to thank my wife, X. Sun, for her love and tolerance. Without her help, it will be almost impossible for me to finish this thesis.

Finally, I would like to thank my supervisor. Dr. Hekmat Alighanbari, for his support, direction and encouragement. It is under his inspiration that I decided the research subject in an effort to explore the neuro-fuzzy method on flutter suppression. His valuable advices and suggestions have an important role in my success.

V

Table of Contents
A u th o r's declaration ................................................................................................ ü Borrower's p a g e .......................................................................................................üi A B ST R A C T ........................................................................................................... iv Acknowledgement .....................................................................................................v Table o f Contents .....................................................................................................vi Table o f Figures .................................................................................................... viii List o f T ables ............................................................................................................ x Nom enclature ........................................................................................................... xi C hapter 1 Introduction............. 1 1.1 Purpose....................................................................................................... 1 1.2 Flutter......................................................................................................... 2 1.2.1 Flutter Definition ...............................................................................2 1.2.2 Flutter Suppression ........................................................................... 4 1.3 Artificial Intelligence................................................................................6 1.3.1 Artificial Neural Networks ................................................................6 1.3.2 Fuzzy Logic ...................................................................................... 12 1.3.3 Neuro-fuzzy Systems........................................................................ 22 1.4 Previous works in flutter control............................................................25 1.5 Obj ective of the thesis.............................................................................27 1.6 Thesis overview...................................................................................... 27 C hapter 2 Governing Equations & Simulation M odel............................. 29 2.1. Mathematical model................................................................................29 2.2. ODE and Control Model........................................................................ 31 C hapter 3 NEFCON and Flutter C ontrol................................................... 37 3.1 NEFCON introduction:...........................................................................37 3.2 NEFCON learning algorithm.................................................................40 3.3 Control model with NEFCON...............................................................42 3.3.1 New NEFCON creation ..................................................................42 3.3.2 NEFCON learning set-up ...............................................................45 3.3.3 NEFCON training ............................................................................51 C hapter 4 Flutter Suppression...................................................................... 53 4.1 Modified Energy Method Flutter Control............................................. 53 4.2 NEFCON flutter suppression................................................................. 58 4.3 Neuro-fuzzy control and energy method control comparison............ 61 4.4 Neuro-fuzzy controller performance test.............................................. 62 4.4.1 Sensitivity Test--2% change in to^................................................. 62 4.4.2 Performance under new system --10%parameters ..................... 67 C hapter 5 Conclusion........................................................................................... 78

VI

References Appendix I Appendix I I

......................................................

80

Equations fo r Ts.............................................................................. 84 Simulink® blocks fo r ms, ns and qs ..............................................85

Appendix III Ordinary differential equationscalculation .................................94 Appendix IV M-files fo r simulation .....................................................................96

Vll

Table of Figures
Figure 1. Three degree-of-freedora airfoil model (Alighanbari 2000)................ 3 Figure 2. Airfoil deformations................................................................................. 4 Figure 3. Biological neural network.........................................................................7 Figure 4. Artificial neuron.........................................................................................8 Figure 5. Neural networks activation functions.......................................................9 Figure 6. Three-layer neural networks....................................................................11 Figure 7. Classical (crisp)(a) and flizzy(b) se ts ....................................................13 Figure 8. Fuzzy logic membership functions......................................................... 14 Figure 9. Fuzzy Rule Inference............................................................................... 21 Figure 10. Neuro-flizzy structure............................................................................23 Figure 11. Activation function parameter effect................................................... 24 Figure 12. Three degree-of-freedom airfoil-flap (Alighanbari, 2000)................ 30 Figure 13. Sample ODE model in Simulink®........................................................33 Figure 14. Airfoil-flap combination Simulink® model.........................................34 Figure 15. Airfoil displacement without controller.............................................. 36 Figure 16. NEFCON structure diagram (Numberger, Nauck and Kruse)..........39 Figure 17. Classical neuron and NEFCON comparison..................................... 40 Figure 18. NEFCON model creation..................................................................... 44 Figure 19. Nefcon Control window.......................................................................45 Figure 20. Nefcon error definition..........................................................................47 Figure 21. Nefcon input processing........................................................................48 Figure 22. Nefcon learning algorithm.....................................................................50 Figure 23. NEFCON produced fuzzy rule base.....................................................52 Figure 24. Energy method based flutter suppression scheme.............................. 54 Figure 25. Airfoil-flap flutter speed atU = 6.139 without control......................55 Figure 26. Airfoil-flap flutter speed a t U - 8.25 with control............................. 56 Figure 27. Airfoil motion without control at

17= 8 .............................................. 57

Figure 28. Airfoil motion with control at 7 = 8 ................................................... 58 Figure 29. Flutter suppression ( 7 = 6.139)............................................................ 59

Vlll

Figure 30. Flutter suppression {U= 6.7).................................................................60 Figure 31. Flutter suppression ((7= 6,9).................................................................61 Figure 32. Neuro-fuzzy control under o)^ = 0.204 and U= 6.139......................63 Figure 33. Neuro-fuzzy control under oe^ = 0.204 and U = 6 . 1 ........................... 64 Figure 34. Neuro-fuzzy control under co( --0.204 and U --6.9 w ith................. 64 Figure 35. Neuro-fuzzy control under a> ^ = 0.196 and [ /= 6.139......................65 Figure 36. Neuro-fuzzy control under cu^= 0.196 and 17= 6 .6 .......................... 66 Figure 37. Neuro-fuzzy control under tu^ =0.196 and U= 6 .9 .......................... 67 Figure 38. Neuro-fuzzy control at new flutter speeds........................................... 68 Figure 39. Neuro-fuzzy control at co^-0.22 with other parameters unchanged. 69 Figure 40. Neuro-fuzzy control at co/}= 1.55 with other parameters unchanged 70 Figure 41. Neuro-fuzzy control at ra = 0.55 with other parameters unchanged 71 Figure 42. Neuro-fuzzy control when rp= 0.0426 with other parameters unchanged......................................................................................................... 71 Figure 43. Neuro-fuzzy control at oe p- 1.55with other parameters unchanged 72 Figure 44. Neuro-fuzzy control at rp- 0.0426 with other parameters unchanged ............................................................................................................................ 73 Figure 45. Neuro-fuzzy control at co^=2.2 with other parameters unchanged... 74 Figure 46. Neuro-fuzzy control at a p - 1.55 with other parameters unchanged 75 Figure 47. Neuro-fuzzy control at = 0.55 with other parameters unchanged 75

Figure 48. Neuro-fuzzy control at rp-- 0.0426 with other parameters unchanged .................................................................................................................................76 Figure 49. Neuro-fuzzy control when = 0.55 with other parameters unchanged......................................................................................................... 77

IX

List of Tables
Table 1. Biological neural network and artificial neural networks terms............. 9 Table 2. NEFCON input setting...............................................................................47 Table 3. NEFCON amplifying gains for different speeds.................................... 58 Table 4. New critical flutter speed under increased parameters.......................... 67

X

Nomenclature
ah dimensionless distance from airfoil mid-chord to elastic axis; airfoil pitch displacement; coefficient in the approximate formula for Wagner function; ar, C ^ coefficients of the transfer function of the energy control law equation; flap rotation; flap rotation command; coefficient in the approximate formula for Wagner function; dimensionless distance measured from mid-chord to flap hinge; coefficient in the approximate formula for Wagner function; coefficient in the approximate formula for Wagner function; coefficient in approximate formula for Wagner function; nondimensional airfoil plunge displacement,h/b; ra(ralpha) /-/3 (rbeta) dimensionless radius o f gyration about elastic axis; dimensionless radius of gyration about flap hinge;

a

P
Pc

b\v

cacheta)

T c^ ( Tcxi), T c a ( Tcalpha), T q^( T cxi) and T o a ( Tcalpha):

coefficients of energy control law equation; dimensionless time, tV/b; membership value of an element (x) in set (A);

XI

airfoil-air mass ratio, m/Tipb"; U V cû=(oniegaxi) cu/3(oinegabeta)-. Xa(xalpha) x/3 (xbeta) dimensionless free stream velocity, V/bcOa; free stream velocity; uncoupled frequency ratio in plunge; uncoupled frequency ratio in flap; dimensionless distance from elastic axis to mass centre; dimensionless distance from the flap hinge to the flap center o f mass; auxiliary variable; auxiliary variable; viscous damping ratio in plunge; viscous damping ratio in pitch; viscous damping ratio in flap hinge; density of air; Wagner's function;

yi y2 ^ z e ta x i)
^o(zetaalpha)

i^zetabeta) P < f>

Xll

Chapter 1 Introduction

1.1 Purpose

The aircraft bring a new era in the human history. They make our dream of flying like a bird come true. In developing the aircraft, many diverse fundamental laws of nature are applied, some of which invoh s aeroelasticity [1], Among aero elastic phenomena, flutter, the self acti'' ited divergent oscillations of the aircraft wings and control surfaces, has caused intensive studies. Traditional control methods have been applied succès fiilly in flutter prevention.

Artificial intelligence has already numerous applications in vai ous industries despite its short history, but its application in the aerospace area is quite new. When implemented in flutter suppression, artificial intelligence is often used to optimize classical control laws. In the present study, the author will utilize the neuro-fuzzy methc'd to suppress flutter o f an airfoil. Flutter suppression of an airfoil is achieved by moving a flap attached to the airfoil. In the next chapters, the author will explain neural

1

networks theory, fuzzy logic theory and neuro-fuzzy method. The equations used to simulate the airfoil model and to develop the neuro-fuzzy controller model will be also presented. Finally, the author will present the flutter suppression results of the neuro-fuzzy controller and suggestions for future study.

1.2 Flutter

1.2.1 Flutter Definition
Flutter which is critical for an aircraft's operation is an aerodynamics induced oscillation of a wing, tail, or control surface. For a clear facet of this physical phenomenon, let us consider a cantilever wing, without sweepback and without flap, mounted in a wind tunnel at a small angle of attack and with a rigid support at the root. The wing oscillation will damp gradually to its original (stable) position after a transient shake when there is no air flow passing around the wing. When the airspeed increases gradually in the wind tunnel, the wing oscillation will first damp faster. As the ..peed increases flirther, a point can be reached at which the damping of the wing rapidly decreases, and there is a certain speed at which an oscillation can just maintain its amplitude. This speed is called the flutter speed. At speeds above this critical one, a small accidental disturbance o f the wing can serve as a trigger to initiate an oscillation of great violence, which can result in a total structural failure in just seconds [2].

An aircraft wing is continuous and has an infinite number of degrees-offreedom. For most practical theoretical studies, the simplified model of an airfoil wing with finite degree-of-fteedom is used. A two degree-of-freedom airfoil model is shown in Figure 1. The model will be described later in detail in

Mean Position

Elastic Axis / Center of Mass

I"
b-

I

I

·

b

Figure 1. Three degree-of-freedom airfoil model (Alighanbari 2000)

Chapter 2. The flutter motion o f the airfoil has both flexural and torsional components (Figure 2). Classical binary flutter requires at least two degree-offreedom; for example, plunge and pitch degree-of-freedom. The phase shift between plunge and pitch motions plays an important role in the flutter phenomenon. It is mainly this phase difference that causes the flutter.

Flexural deform ation

Torsional deformation-

Figure 2. Airfoil deformations

1.2.2 Flutter Suppression

The critical effect of flutter has been attracting a lot of attention for several decades especially when people want to design faster fighter aircraft. Before the 1930s, little was known about flutter. Flying in those days did really need to take great risks with the new sports. It is almost impossible to know how many brave souls succumbed to flutter. In the 1930s, airplanes were expected to achieve high speed with better engines available. At that time, flutter analysis and prevention became more serious especially for faster fighter aircraft. There are basically two types of flutter suppression; passive flutter suppression and active flutter suppression.

a. Passive Flutter Suppression
This method includes mass balancing and stiffening of aircraft structure. From the data analysis on several aircraft in which wing flutter has been observed, and on others that showed no tendency to flutter, the following critical flutter speed equation for aircraft wings with mass-unbalanced ailerons was found [2]:

(Ucr - the critical mean flutter speed, feet per second; oe = the ^Kr fundamental frequency o f the wing in torsional oscillation in still air, radians per second; c = the length of the vibrating portion of the wing, feet; kcr = the critical reduced frequency, 0.9+0.12 radian). From this Ucr equation, it is obvious that the flutter speed can be raised by increasing the wing torsional stiffness. Systematic study has shown that mass balancing can increase critical flutter speed substantially [2]. Passive flutter suppression is sometimes achieved through an automatic control system, which can be referred to as semi-active flutter suppression. By using a microcomputer controlled micromotor to adjust the stiffiiess, Yang et al [3] increased the flutter speed of a two-dimensional wing effectively with this semi-active method.

Passive flutter suppression is an easy way to increase critical flutter speed. However, as it increases the aircraft weight in order to raise flutter speed, it may not be practical if light aircraft with high flutter speed are expected.

b. Active Flutter Suppression
With the demand of higher speed and light-weight aircraft and to overcome the shortcomings o f passive flutter suppression, a new control method, called "active-suppression" was c weloped in the 1970s. Here, an onboard automatic control system actuates a control-surface on the wing in response to sensed structural motion of the an bil-flap in order to suppress flutter. The first active control practice was carried out by the U.S. Air Force in their Load Alleviation

and Mode Stabilization(LAMS) program, which resulted in a Boeing B-52 bomber flying 10 knots faster than its open-loop flutter speed.

1.3 Artificial inteiiigence 1.3.1 Artificial Neural Networks
Artificial neural networks, often referred to as neural networks, is a branch of artificial intelligence (AT). It is developed based on present understanding of the human brain. There are various definitions of neural networks. Initially, a neural network is a parallel processor modeling the human brain that can learn [4]. It resembles the human brain in two ways: 1) acquiring knowledge through a learning process; 2) storing knowledge as the inter-neuron weights which are the connections among neurons that represent the inputs' contribution to the outputs.

Research about the human central nervous systems began as early as the Middle Age, but their detailed structure was only revealed a century ago. The brain's most basic components--neurons--are connected through trillions of synapses [4]. Each neuron (Figure 3) is composed of a central body, called soma, a number of root-like extensions, called dendrite, and a main transmission line, called axon.

4 P arts of a Typical NervB C ell

Dendrites- Accept inputs

Soma : P rocess the inputs Axon : Turn the processed inputs into outputs

Synapses: The electrochem ical contact between neurons

Figure 3. Biological neural network

Signals are transmitted electrically or chemically in the neural networks. The electrical transmission is within a neuron, while the chemical one happens among the neurons. The soma electrical potential changes as receiving chemical from synapses. When this potential reaches a certain level, an electrical pulse is transmitted by the axon and reaches other synapses, causing them to change the potential.

One of the most important characters of a neural network is its plasticity. It can form new connections or modify the strength among neurons in response to the circumstance changes. Even though single neuron is not as powerful as silicon logic gates, the brain can perform much faster by organizing neurons than the fastest computer in existence today [4,5,6] .

Learning ability is another critical character of a biological neuron network. In a person's early days, the connections in the nervous systems are formed at a very

fast manner while learning the outside world. Later on, these connections may be modified when new knowledge is available. This also leads to attempts to mimic the biological neural network for scientific computation. An artificial neuron is analogous to a biological neuron (Figure 4). It is the basic computing cell in artificial neuron networks. The inputs, either from external circumstances or other neurons within the neuron network, are first summed up. Then, the difference between this summation and the threshold is passed to the

Computing Part

-M Sum

Output

Threshold
Figure 4. Artificial neuron

activation function. There are four common activation functions used for different purposes: step, sign, linear and sigmoid functions (Figure 5). In the backpropagation neural network, normally the sigmoid function is used [4]:
y s ig m o id

:

l+e"

The terms in biological neuron networks and artificial neuron

networks are summarized in Table 1.

step function L +1 w -1 --

sign function i +1

sigmoid function i +1 -----------

linear function
+1

- -1

-1

y //n e a r

jy

Figure 5. Neural networks activation functions

Biological Term
Axon Dendrite

Artificial Term
Connection Connection

Function
Signals transmission channel Signal receiving, carrying for processing cell Basic unit of neftvorks Computing cell Knowledge representations

Neuron Soma Synapse

Neuron Sum, Activation Function Weights

Table 1. Biological neural network and artificial neural networks terms

The first artificial neuron model was introduced by W. McCulloch and W. Pitts in 1943. In the recent two decades, this artificial branch has expanded more rapidly than ever before. A lot of neural networks models are proposed [4, 5] and their applications have been mentioned quite often. In this study, the author will only discuss the feedforward backpropagation neural networks that will be

used in this study. The introduction on others types of neural networks is available in [5], A multiple layer neural network is composed of an input layer, an output layer and at least one hidden layer. Every layer is made up of a number of neurons. The input layer neurons accept the external signals and pass them to the next layer neurons for process; the output layer neurons export the neural networks' outputs. The neurons in the hidden layer(s) act as signal processors. The weights pattern of a neural network is formed in the learning stage and can be changed if the neural networks is on-line. The number of hidden layers can be more than just one, but the increase in the hidden layers will increase the computation time dramatically. In practice, three-layer neural (Figure 6) networks are capable of approximating continuous functions to any degree of accuracy [7]. Here, the author will explain the supervised learning process with a three-layer feedforward backpropagation neural network (Figure 6). The typical learning process includes initialization, input feedforward and error backpropagation. Before starting the learning process, one should prepare the training data sets and know the expected results.

10

Input Feedforward

Xi

t

m
Input Layer Hidden Layer Output Layer

Error Backpropogation Figure 6. Three-layer neural networks

a. Initialization:
The weights and threshold levels for the neural networks are set to random numbers uniformly distributed within a narrow range. Normally, this range is ± 2.4/F/, where F/ is the total number of inputs of a neuron [5].

b. Input Feedforward:
During this stage, the training data and expected outputs are presented to the neural networks. The neural networks will do the calculation based on the

11

provided inputs and pass the training data or calculated intermediate results from one layer to the next layer. The output layer will present the final calculated results.

c. Error Backpropagation;
In this stage, the errors between the neural networks produced outputs and the expected output is calculated and passed from the output layer to the input layer. The weights in the neural networks are adjusted.

d. Iteration;
Iterate the steps b and c by presenting a new set o f training data until the defined error is satisfied or other termination criteria are reached.

So far, the author has discussed the supervised training. The neural networks structure pattern for the same problem will not be unique. Its parameters depend on lots o f factors, such as initial weights, learning rate, etc. There are also other learning algorithms in [4] and [5].

1.3.2 Fuzzy Logic
The fuzzy set concept was founded by Lofti Zadeh in 1964. It extended the classical two-value logic. Even though founded in 1960s, fuzzy logic was not accepted as a scientific theory until 1980s after a wide range successful applications [4]. Fuzzy sets, linguistic variables and fuzzy IF-THEN rules are the most basic concepts in fuzzy logic.

12

a. Fuzzy sets:
Unlike classical (crisp) logic, the fuzzy set has a smooth boundary. This fuzzy set concept can express knowledge more naturally. For example, when people talk about engine power, in classical logic, there is an accurate value (say 30hps) that splits the power domain into two subsets: weak and strong. The engine with power higher than 30hps will be said to be strong, while the engine whose power is less than 30hps will be said to be weak. But what about a 29.9hps engine? According to classical logic, it will be weak, but in fact, it is still quite strong. So in fuzzy logic, this can be expressed as a membership function value, say it is strong with a 0.8 membership function value (Figure 7).

Strong
0.8
0.5 0.5

strong

0

10

20

30

40

50

0

10

20

30
(b)

40

50

(a)

Figure 7. Classical (crisp)(a) and fuzzy(b) sets

Hence, instead of yes-or-no in classical logic, the element and set relationship is expressed in a matter of degree with value from 0 to 1 in fuzzy logic. The membership value is said to be zero when an element is completely out o f a set; it is one when an element is totally in a set; and G~1 when an element is partially in a set.

13

There are four commonly used fuzzy logic ra

^.;hip functions: triangular,

trapezoid, Gaussian and sigmoid function (Figure 8). No standards exist for fuzzy function selection. As a guideline, a membership function can be decided by consulting the experts in the relevant area, constructing formula, or learning it from the system performance. It is worth pointing out that with a simple formula and high computation efficiency, triangular and trapezoid membership functions are popular in fuzzy set partition, especially in control.

I
(a) Triangular

È

(b) Trapezoid

§

0.5

I
(c) Gaussian

0.5

(d) Sigm oid

Figure 8. Fuzzy logic membership functions

14

b. Linguistic variables:
The linguistic variable concept is the foundation in fuzzy logic. It is the combination of both sj'mbolic variables and numeric variables. The universe of discourse is expressed in a series of fuzzy sets, such as weak, medium and strong for the engine power example, so the linguistic variables can be described quantitatively with corresponding fuzzy terms, such as " engine power is strong". When a crisp value is given for the power, a degree of membership value can be found in a corresponding fuzzy set. This application will be seen later when fuzzy inference is presented.

c. Fuzzy rules:
The fuzzy rule concept was first introduced by Lofti Zadeh in 1973 [4]. A fuzzy rule is a statement that associates an antecedent in the "i/ " part with the consequent in the ''then" part. It is also called the fuzzy "IF-THEN" rule. Unlike classical rules, a variable in a fuzzy rule's antecedent is expressed in fuzzy values, and the conclusion is also given in fuzzy values that should be defuzzified. The following two rules show the difference: Conventional logic. I f the engine power is hisher than 30hps, Then the

propulsion force is 200Ns. Fuzzy logic: I f the engine power is strons. Then the propulsion force is high. The antecedent part of a fuzzy rule may include more than one condition, and the consequent part may also have more than one conclusion.

15

In the above discussion, it may have been noticed that both antecedent and consequent parts of a fuzzy rule are fuzzy values. But in real world engineering applications, the inputs are given in numerical values and the outputs are expected in crisp values. So a fuzzy rule must be interpreted. There are two common inference methods: Mamdani and Sugeno. In this study, the Mamdani inference method is used and the author will show this method with the following two inputs, one output system. The three fuzzy rules for the example are as follows:

1) IF the engine power is medium AND the friction is low THEN the speed is high. 2) IF the engine power is strong OR the fic tio n is normal THEN the speed is normal. 3) IF the engine power is low THEN the speed is low. The Sugeno inference method is introduced in [4]. Input fuzzification, rule evaluation, summation of fuzzy rules and defuzzification are the four steps in the Mamdani inference [4] :

Stage 1. Input Fuzzification:
In practical engineering applications, the inputs are given in numerical values. They are first converted to membership values in appropriate fuzzy sets, say for IShps engine input, the membership values are 0.53 in a weak set and 0.3 in a medium set [Figure 9(a)].

16

Stage 2. Rule Evaluation;
The fuzzy operations are applied to antecedents of fuzzy rules for finding consequent membership values with the clipping method [Figure 9(b)-(d)]. For example, as shown in the figure, the "ylA©" is the operation for intersection-minimum, so the resulting consequent membership value for Rule 1 is min[/i^g^,.,,,, {enginepower),/Ui^^^ifriction)] = min[0.3,0.5] =0. 3.

Stage 3. Fuzzy rules summation:
The clipped result of the individual fuzzy rule is unified to get one fuzzy result as shown in the lower part of Figure 9(e).

Stage 4. Defuzzification:
This is the final stage to get the crisp or numerical output from the fuzzy logic system for real world applications.

There are two common defuzzification methods: mean of maximum(MOM) and centre of gravity(COG). In this study, the COG is introduced. The formula for p^{x)xdx this method can be expressed as COG [4], where a and b are the

upper and lower limits of the output universe. In practice, an approximation to

17

b this integration is adopted, COG =
x=a

. This means that the universe of

discourse is divided into a limited number of points and the output is evaluated based on these points indicated by the arrow in the lower part of Figure 9(e)].

18

weak

tnediutn

strong

normal

high

0.5
0

0.5

10

VO

I
a 5

3 "S l-t fD V O 4

20 30 40 engine pow er

50

0

5

10

(a) Input fuzzification

15 friction

20

25

I

I fD
medium strong

" low

normal

higli

lo w

normal

high

0.5

AND(min)

0

10

20

30

40

50 AND

0

5

10

15

20

25 THEN

0

20

40

60

80

100

(b) Rule 1; engine pow er-- medium

friction-- low

speed-- high

mfclium

strong

normal

high

lo w

normal

Ingh

1 05
J L J U

0.5 -

OR(max)

/O.5.

\

0
*c 3 Tl

10

20

30

40

50
OR

0

10

15

20 25
THEN

0

20

40

60

80 100

(c )R u ie 2 : enginepov/er-- strong

friction-- normal

spec d-nonnal

I
P

I
n

I

w tal: ) 0.510 _L 10

m e d iu m

s tro n g

low

"O'mal high

n >

\
20

-0-5'T
\

\J
30

JL

Li

40

50

0
THEN

20

40

60

80

10

( d ) Rule 3. engine power--weak

spced--slow

low

nom ai

high

low

normal

high

normal

high

0.5-

0.5-

S)

I
s

s vo 4

0

20

40

60

80

100

0

20

40

60

80 100

20

40

60

80

100

g

I

1

'

0.5

0

20

40

60

80 100

(e) Fuzzy summation and Defuzzification

i.3 .3 Neuro-fuzzy Systems
Neural networks and fuzzy logic systems are both universal approximators and have seen a lot of successful real world applications. Both systems have their advantages and disadvantages. For neural networks, knowledge can be learned through backpropagation process, but it is difficult to explain neural networks, so it works as black box. For fuzzy logic systems, knowledge can be clearly expressed in fuzzy rules, but the fuzzy rules and the partition of the universe of discourse need expert knowledge, which limits its application.

It is natural to explore the possibility of combining these two artificial intelligent models to overcome their disadvantages. The hybrid system, normally called neuro-fuzzy systems, is first introduced by Lee and Lee [8 ] in the early 1970s. The neuro-fuzzy systems have a similar structure with multiple layer neural networks (Figure 10). The inputs are fed forward and the errors are backpropagated in the learning stage. As shown in Figure 10, a neuro-fuzzy system normally consists of one input layer, three hidden layers and one output layer.

Each layer has its particular function:

Layer one: This is the input layer which communicates with external circumstances. The crisp inputs accepted externally are passed to the next layer. This layer does not process these crisp inputs.

22

w
t
RE

Output

W r,,

RE

Input Layer

Hidden Layer

Output Layer

Figure 10. Neuro-fuzzy structure

Hidden layers: The first hidden layer represents the antecedents of fuzzy rules. Its neuron number equals the total fuzzy sets of all the inputs in fuzzy rules. For the example used in sectionl.3.2, tliere are two inputs and each input universe is divided into three fuzzy sets, so six (2 x 3 ) neurons are included in this layer. Wlien crisp inputs enter this layer, their membership values are decided. For example, IShps engine power membership values are 0.3 in the weak set and 0.53 in the medium set. To decide the membership values, the triangular activation functions are used in this example. The parameters of the activation

23

functions can be adjusted in the learning stage in order to achieve expected neuro-fuzzy system outputs. The parameters effect on the membership value can he shown with Figure 11.

0.5

0.35

0

10

20

30

40

50

Figure 11. Activation function param eter effect

The second hidden layer represents the fuzzy rules with its neurons. Its neuron number equals that of the fuzzy rules. For this example, the hidden neurons number is tliree. The fuzzified results from the first hidden layer enter this layer to produce fuzzy rules output membership values. Fuzzy set operations will be apphed if there is more than one antecedent in the fuzzy rules. In rule one of the example in section 1.3.2, the "AND"(min) operation is applied resulting in a membership value of 0.3. Hidden layer three represents die membership function values of the fuzzy rules' consequent. If there is more tlian one input from the fuzzy rule layer, then the union fuzzy operation will be applied for the final membership function values.

24

Output layer: This layer produces the final crisp output using different defuzzification methods, such as COA or MOM. The learning process of a neuro-fuzzy system can be the same as that of feedforward backpropagation neural networks. When a set of training inputs is provided to a neuro-fuzzy system, the output is produced and then compared with its expected value. The difference or the error will be backpropagated in order to modify the activation function and the weights.

Expert knowledge can be applied to a neuro-fuzzy system as in a standard fuzzy logic system; or appropriate sets of representative data can be used to train a neuro-fiizzy system to produce a set of fuzzy rules.

1.4 Previous works in flutter control
To the author's knowledge, there are no reports on the application of neurofuzzy controller in flutter suppression. The author will hence review some of the active flutter suppression works with the other methodology.

Haley and Soloway [9] validated the effectiveness of generalized predictive control in flutter suppression. This generalized predictive control was implemented to control the trailing-edge of an airfoil in a transonic wind tunnel. The experimental results showed that this control method with control parameters derived from the simulation model can increase critical flutter speed significantly.

25

Mukhopadhyay [10] designed suppression control laws using classical, linear quadratic Gaussian and minimax techniques. The control laws, based on the analytical state-space equations of the wing, adopted trailing-edge accelerator signals as flutter suppression inputs. The tests in a wind tunnel showed that the designed control laws could suppress flutter. Crowther and Cooper [11] used neural networks in flutter prediction during flight flutter testing in aircraft manufacturing. The neural networks method prediction results were compared with the prediction results of a statistical method and the noise effect was also investigated. The authors concluded that the neural networks method showed improved accuracy under the noise-free condition. Under the noisy condition, neural networks prediction accuracy

remained good if it was trained with noisy data, but the statistical method was unacceptably poor.

Scoot and Pado [12] were the first who presented experimental applications of neural networks on flutter suppression for an airfoil with a trailing-edge and upper- and lower-surface spoilers in a transonic wind tunnel. Neural networks were applied to flutter suppression in three ways. First, a neural network was trained to generate gains for every control law under different Mach number and pressure. The control laws with neural networks generated gains improved the flutter suppression over a fixed-gain control. Secondly, a neural network was used to produce flutter control signals based on the data derived from the plant model. The third flutter suppression application of neural networks was the

26

inverse model control. Both simulation and experimental results showed the successful performance of the last two methods in flutter suppression.

1.5

Objective o f the thesis

Flutter can cause dramatic structure failure in a matter of seconds. Before thel930s, little was known about flutter. After that time, when airplanes were expected to achieve high speed and light weight, flutter analysis became more serious, especially for faster fighter aircraft.

Both passive and active methods can suppress flutter successfully. But passive suppression application is limited by its way on flutter suppression, and active flutter suppression can be applied in many different ways and will need complete understanding of airfoil behavior.

The present study intends to analyze a two-dimensional airfoil performance with flap as a controller and develop a neuro-fuzzy system to suppress the flutter and increase critical flutter speed. The neuro-fuzzy system will learn from the airfoil behavior. The fuzzy rules for flutter suppression will be

produced by the neuro-fuzzy system automatically. The neuro-fuzzy results will be analyzed and compared with classical control methods.

1.6 Thesis overview
This study explores the neuro-fuzzy applications in airfoil flutter suppression. The significant point of this application is the attempt to develop a neuro-fuzzy system that can generate the effective fuzzy rule base automatically. 27

Chapter 1 includes two parts. The first part presents the theory on flutter and the previous approaches to flutter suppression. In the second part, the theory about neural netv,'orks, fuzzy logic and neuro-fuzzy system is introduced. The reasons for choosing neuro-fuzzy system are explained. Chapter 2 deals with the airfoil motion equations. Eight ordinary differential equations(ODE) used for the Simulink® model are presented. The airfoil-flap combination model is built based on these ODEs under Simulink® environment.

The soflware(NEFCON) which is used in this study as the control part is introduced in Chapter 3. Detailed descriptions of NEFCON, NEFCON model and the complete model are available in this chapter.

Chapter 4 presents the fuzzy rule base generated by neuro-fuzzy system, the control result and the comparison of neuro-fuzzy result with other control schemes.

Chapter 5 provides the conclusion of this study and suggestions for future research.

28

Chapter 2 Governing Equations & Simulation Model
2.1, Mathematical model

Aeroelasticity is the theory dealing with the interaction between structures and aerodynamic forces. Two deformations, pitching and plunging, are considered in the flutter analysis of aircraft wings. Instead of analyzing a three dimensional wing, a three-degree-of-freedom (3D0F) airfoil with a flap is considered for preliminary study on neuro-fuzzy flutter suppression in this thesis.

The airfoil-flap combination (Figure 12) employed here consists of an airfoil and a trailing edge flap. The combination is mounted by a transitional and a torsional springs at the elastic axis. The plunging deflection denoted by h is measured at the elastic axis and is positive in the downward direction. The airfoil rotation about the elastic axis is represented by a and is positive nose-up. The flap is fixed to have only angular deflection (fi) about the flap hinge, positive for the flap tail down. The airfoil-flap combination has a chord of 2b. The elastic axis is located at a distance bai, from the mid-chord, the mass center of the entire airfoil is located at a distance bxa from the elastic axis and the flap

29

hinge is located at a distance hcp from the mid-chord. The mass center of the flap is at a distance bxp from the flap hing . All distances are positive toward the trail edge.

C.G . o f E ntire xA.!rfoil

-o -

iC.G. o f A ile ro n -^ A ileron H inge /

Figure 12. Three degree-of-freedom airfoil-flap (Alighanbari, 2000)

For active flutter suppression of the airfoil in this study, the control command rotation y5c should be applied to the flap. This Pc command can be derived from different control laws, such as classical feedback control techniques, linear quadratic Gaussian theory, eigenspace techniques and the aerodynamic energy method. In this study, the following rotation command [13] will be applied to the flap. The control result will be compared with that of the neuro-fuzzy control algorithm;

30

where a is the airfoil pitch angle, ^ = h/h is nondimensional plunge displacement, and Tea, Tea, Tea, Tca are control gains. The denominator, s^+2^/c,,s+A;^ , is the transfer function for a second order system with damping Ç and natural frequency kn. In practical control, the aj, Q and kn parameters which decide the damping amount should be determined to optimize the control system. The transfer function equation (2-1) can be converted to the following time domain form [13]: (T « + a rT o q ) f" + (T ..+ a rT o .) = " - A + 2 ft.% # '+ T , where T<,,a-Æ) = 0 (2-2) is the flap angle and ( )' denotes differentiation with respect to

nondimensional time r.

2.2.

ODE and Control Model

Governing aeroelastic equations of the airfoil-flap combination are given as a set o f ordinary differential equations (ODEs) by Alighanbari [14];

+7722(2 + 7722/9 + 772^ ^ +7 7 2 g (2 + 772g/9

+ m^a + m^/3 +

772jiyi+ 772]2T2 ""0 72,^ +7120! +713/9 + 7 2 4 ^ +72g(%
+ ? 2« + 93/9' + ?4^ + 9 5 0 :' +

(2-3)

+ 72g/9' + T lgO ! + 71g/9 + 7 2 ; ' Û .7^10 ' + --------------- /9 7 T
k

+ Tl,;)/]

(2-4)
(2-5)

+ 9gO! + 99/9 + 9 , 1^1 + 912^2 = -qi3 A

1 1 1 It 2^21 " ' -fl^ (---o/,)q: - a ^ y - -- +yi = z i;r -Cw^"
I I
k

(2-6) (2-7)

-1-72=Cvv«' + ^ ^ ! ^ / 9 ' -d ^ y 2

T' s are given in Appendix I;

7 7 2's, 7 1's and q 's are given in Appendix II;

31

aw,bw,Cw,dw and a/, are given in Nomenclature', y I and y 2 are auxiliary variables.

The /3c is the flap control command used to suppress flutter. We can now use Simulink® to solve these second order ODEs.

To illustrate the Simulink® model building method and procedure, we will use the following simple second order ODE :

9y + 2 3 y + 4 5 y = 80

(2-8)

This equation can be rewritten as; y " --(-- 23y -- 45y + 80) (2-9)

Now Simulink® must be started and a window for building a new model should be open. Then "Integration" blocks from the "Continuous"; "Scope" block from the "Sink" and the "Gain" blocks from the "Math" in the "Simulink" library are dragged into the new model window. These blocks should be connected according to the given equation (Figure 13). In this new model, one "Integration" block represents y" and the output from this block is equal to y ' or input to y ' block; the other "Integration" block is y'. The above equation (equation 2-9) means that the input of y " is the right side, so the cormection shown in the lower part of Figure 13 can be built and connected to y" block input. The output from y" block is connected to y ' block for final y result. A

32

scope block is connected to the y ' block output port for graphic result. For the function explanations on these blocks, one may refer to Matlab® Help.

1/s intergratorl

1/s intergrator2


Scope

G ain i

Gain C o n s ta n t

Figure 13. Sample ODE model in Simulink®

In a similar way, the author develops the Simulink® model for the airfoil-flap combination (equation 2-3~equation2-7). The detailed procedure is given in Appendix III. The model is shown in Figure 14.

33

F ig u re 14. A lrro ll-fla p c o n it-in a tlo n S im u lin k * m odel

With this Simulink® model, the critical flutter speed of the airfoil-flap combination is found to be 17 = 6.139(Figure 15), which is in agreement with the eigenvalue method. The proposed neuro-fuzzy controller will be included later in this Simulink® model for flutter suppression.

0.4 0.3 0.2

i

' - 0.1

- 0 .2

-

0.3 0.4 0 300 600 900
1200

-

1500

Nondimensional time(-c)

(a) nondimensional plunge displacement at flutter speed (U= 6.139)
12

£

-4

-8

- 12

3 0 0

GOO

9 0 0

1 5 0 0

N o n d i m e n s i o n a l t i me ( x . )

(b)

pitch displacement at flutter speed (17= 6.139)

Figure 15. Airfoil displacement without controller

35

i

Q -

 f M
-2

-3

3 0 0

GOO

9 0 0

1200

1500

N o n d im e n s io n a l tim e (x )

(c) nondimensional plunge displacement above flutter speed ( t/= 6.16)
8 0

6 0

4 0

20

-4 0

-6 0

-8 0

3 0 0

6 0 0

9 0 0

1200

1 5 0 0

N o n d i m e n s i o n a l time(x)

(d) pitch displacement above flutter speed ([/= 6.16)
F igure 15. A irfoil displacem ent w ith ou t controller

36

Chapter 3 NEFCON and Flutter Control
3 .1 NEFCON in troduc tion :

Artificial neural network is inspired by the human brain and has been successfully applied in many fields, such as classification, recognition, and controls. Neural network's distinguishing characteristic is that it can learn and is adaptive to a changing environment. Neural networks can leam from given information to adjust itself to produce required results. Unfortunately, people don't know how it does this. Fuzzy logic can represent human knowledge in a natural way. The expert knowledge for fiizzy logic can be expressed in fuzzy "ZF-TTffiN" rules. Expert knowledge on a system must be available for fuzzy logic application [4, 5].

The disadvantage of neural networks is that it works as a black box, which means it can not be interpreted. For fuzzy logic, its application is limited by the availability o f expert knowledge. So, the combination of these two systems, neuro-fuzzy system, which adopts the neural networks' learning ability and

37

fuzzy logic's knowledge representation, can overcome the shortcomings. The combined neuro-fuzzy system can leam and express itself in a set of rules. Neuro-Fuzzy Controller, which will be referred to as NEFCON, is a neurofuzzy system that adopts reinforcement learning. Under reinforcement learning algorithm, the controller does not rely on the accurate solution of the control problem, instead the controller can leam to control a system by the reinforcement signal or error signal. NEFCON controller uses an error signal in the learning process. It is supposed that the desired state of system is known. The difference between the current state of system and the desired state of system can be expressed in a suitable way. The knowledge of a certain problem can be used by NEFCON for practical control, or it can also leam from scratch if no knowledge of a problem is available. After learning the behavior of the system which will be controlled, NEFCON can express the control law for the system in a set of fuzzy rules.

The NEFCON system, like other neuro-fuzzy systems, has the multiple-layerperceptron (ML?) structure (Figure 16). The NEFCON, that is used here for explanation, has two inputs (^/ and ^2 ), five rules (Ri-Rs) and one output ( 7 7 ). The inputs to the neuro-fuzzy system are the state variables of the system to be controlled, and the output of the NEFCON system will be applied to the system as a control command. The neurons in the only hidden layer correspond to the fuzzy rules. For instance, R2 can be:

is A^i`^ and

^ 2

is A 2 ^ then

77

is

38

Figure 16. NEFCO N structure diagram (Nurnberger, N auck and K ruse)

where respectively.

cindB^^^ are the fuzzy sets of inputs ^i, ^ and output p

The connections between the input layer and the fuzzy rule layer, and between the fuzzy rule layer and the output layer are fuzzy weights. This is shown in Figure 17. For classical neurons, the connections between two layers are crisp numbers used as weights. For NEFCON, these weights are actually fuzzy membership function values decided by the inputs and membership flmction in corresponding fuzzy sets.
an

classical neuron

NEFCON rule layer

NEFCON ouput layer

F igure 17. C lassical neuron and N E FC O N com parison

As shown in Figure 16 by the ellipse, some connections share the same weights. For example, the input to rule R4 and R 5 connections share tire same which means the linguistic variable for input ,

in tire antecedent part of R4 and

R5 comes from the same fuzzy set. The shared weights will be modified identically for aU fuzzy rules in the learning process if necessary.

3.2 NEFCON learning algorithm
Wlren control laws are not available for a system control problem, the NEFCON controller can be used as it can learn from scratch and express the control law in a set of fuzzy rules. This procedure begins by learning the behavior of the system to be controlled. The NEFCON learning algorithm includes two stages: learning fuzzy rules and learning fuzzy sets.

a. Learning fiizzy rules:

40

This stage is dedicated to building an initial fuzzy rule base. There are two classes of rule learning: décrémentai rule learning and incremental rule learning. The author will present the incremental rule learning here. Details on the décrémentai rule learning are available in [16].

The incremental rule learning consists o f two phases. In phase one, the highest membership function values are calculated in corresponding fuzzy sets for each newly entered set o f state variables. If there are no rules in the existing fuzzy rule base with these variables in the antecedent, an output is "guessed" based on present error. The fuzzy rule produced is added to the fuzzy rule base. This phase is repeated the number of stipulated times. In phase two, this input set is propagated through the NEFCON system to update the existing fuzzy rules contribution. This can also be iterated the number of predefined times. In this phase, fiizzy rules which are used less than a certain percentage are deleted from the rule base.

b. Learning the fiizzy sets:

It is assumed that the fuzzy rule base which is built the way described in last section is adequate, and the possible lack o f performance is due to an inappropriate rule organization. The purpose o f the learning fuzzy sets is to modify the membership functions o f the NEFCON system for optimal performance.

41

The difference betw'een the desired output and the current output will be used as a reinforcement signal. This process is very similar to the backpropagation process in the neural networks. The reference signal is backpropagated from the output layer to the input layer. Only the parameters of the membership function activated in the fuzzy rules at present stage will be modified to reduce the error. This indicates that those fuzzy rules which are not applied to the current state will not be changed. At the same time, the fuzzy rules with higher activation are assumed to have a bigger influence. This will also affect the modification degree together with the learning rate and the error value. This process will be repeated for a predefined number of times.

3.3

Control m odel with NEFCON

The NEFCON controller is added to the airfoil-flap combination model, which was built in section 2.2 based on the set of airfoil aeroelastic equations of motion (equation 2-3~2-7) under the Simulink® environment.

3.3.1 New NEFCON creation

The author simplifies the Simulink® model built in section 2.2 by creating an airfoil subsystem(named "Airfoil Model", orange part in Figure 18) with outputs; a , p, a and p, and input; Pc. The "Nefcon System" coming with

the NEFCON software is added into the airfoil window (Figure 18). The two small windows o f Figure 18 are used for new NEFCON controller parameters setting. "Nefcon Signal Generator" is selected as NEFCON signal generator is 42

used, and "Nefcon Learning System" will be used to leam the airfoil-flap control. According to equation (2-2), the author will use four inputs-- ^, a , E , and a -- for flutter suppression. The final result is shown in the upper part of Figure 18.

S igna l

N ô to on

System

A nim ation

R esponse

cr5'

(= 3
00

signal

betac

n 4^

i
& fp 0 n
o

Uni xj
File E d it W in d o w H elp
T h e N E F C O N M odel

3

A ii to ij M o d e l

E ic o i D e fin itio n

L e a r n i n g A lg o rS h m

1
o

-

5
S y s t e m will b e g e n e r a t e d u s i n g .. I N e ï c o n S ig n al G e n ^ a to r I N e f c o n L e a r n i n g S y s te m N u m b e r o f in p u t s ;

-loi xj
In p u t F ^ e p fo c e s s ih g ( 4 in p u ts ) F u t o y C d n l r O 'l e i ,

zJ'
S t a r t tim e

zi

0.0
I 90

S e le c te d M o d el C y c le s

j NEFCON
n

S to p S im u l a t e

S l o p tim e

R eset Ok C ancel H e lp S ta tu s ; S to p p e d r? Init p/ R u le P I p/ R u le P 2

I '

^ ^ H e lp < p â O p tim iz e p/ C o n tr o l

3.3.2 NEFCON learning set-up

The NEFCON controller is now ready to learn to control the airfoil system. Before starting tlie NEFCON controller to learn the airfoil system behavior, one should set up the learning environment first. Figure 19 shows the `N^efcon Control" window for set-up.
_ _ _ .........................

M R

Rie

Edit

Window

Help The MEFCOH Mode!

Etiw Definition

Learning Algorithm

-<3l

--

- O

Input Preprocessing (4 inputs )

-O

FurzÿÊontTofe

Start tine Stop line

1 0.0 1

. Selected M odel

1 ;,nuW .3do!ar]irf,E j

: Stop S ta d *

il 1 I

f"

I»
R eset . Help

:

Create Status: Stopped

D ose < j

[7 Init

R Rule PI

R R u leP 2

R Optimize

R Control

Figure 19. N efcon Control window

3.3.2.1 Error definition (Figure 20)
There are four choices for error definition:

a. Using a Fismatix:

45

This method uses a fuzzy inference system for error definition. As there are four inputs into the controller, the inference system will be too complicated, so it is not used here.

b. Using Input One as error:

The input one means the difference between the desired state value and the current response. In this airfoil-flap system, there are many inputs and this input can not be modified, so it is not selected.

c. Bounded error calculation:

The NEFCON bounded signal generator is used to calculate tlie error. This method is not used here as the author does not select bounded signal generator which is used for manual error set up.

d. Using a Matlab Function:

In this method, the error range can be easily controlled and hence the learning process. Thus, it is adopted in this study (Figure 20).

46

Fuzzÿ Ertof will b e c a lc u la te d using...

I External Function (feval) tèsou icefiîe j~

siisert

Edit Eir

H elp

C lose

Figure 20. Nefcon error definition

3.3.2.2 Input processing (Figure 21)

This window is designed to define tlie input number, input range and gains. For the flutter suppression problem, the sets are;

Number Input 4 1 No.l
-2 -2 N o.2

Range
No.3 -2 -2 N /A

Gain No.4 -1.5-1.5
N /A

1 1

-1.5-1.5
N /A

Output

N /A

T able 2. NEFCO N input setting

47

Input Preprpcèssfng

r X;v

O u lp u ttelaled iseU in g s

"W

Outpul qaiftj
H elp Close

Figure 21. Nefcon input processing

33.2.3 Learning algorithm (Figure 22)
This window is divided into two parts: rules learning and optimization.

Rule learning:
There are four types of learning algorithms which can be selected:

a. Bottom-Up Learning:

The universe of discourse of inputs and outputs is evenly partitioned. The equally distributed membership flmctions are assigned to each partitioned set. The number of the partition and the membership ftinction types can be defined in the "Partitioning" column. The rule base is initially empty. If any prior rule base is loaded through "fismatrix" column, then its membership fimctions and rules will be the initial data and more rules will be added during the learning

4R

stage. Under tliis learning algorithm, the fuzzy rule base is initially empty and new rules are added by learning the system to be controlled, so this guarantees that every rule is active in system control and is selected in this thesis. The learning rate is set to 1; rules used less than 5% will be deleted in phase two. The cycle time of this airfoil-flap combination is found to be very small, so the learning time is set to 90 seconds. The cycle numbers in two phases are all set to one.

b. NEFCON:
The universe of discourse of inputs and outputs is evenly partitioned. The equally distributed membership functions are assigned to each partitioned set. The number of partitions and the membership function type can be defined in the "Partitioning" column. If prior rule base is loaded through "fismatrix", then its membership function and rules will be the initial data. Otherwise, a full set of rules will be produced based on the number of inputs, output and fuzzy sets. The "bad" rules will be deleted during the learning process. As this is décrémentai algorithm which is not selected for this study, so this "NEFCON" is not used.

c. Disable_Tnitial Fismatrix:
The fuzzy rule learning process is disabled. A valid initial rule base must be loaded in the "fismatix". As the effective control rules are not available, this algorithm can not be adopted in this study. 49

i Learning Algorithm

StxiwMF
V t ,\ . 7* .

-jBoUom-Upleafning Edit Rules

|J^pT"|lrimf/liapnnf

±1 # $

Sw face

W i3

d #
pn'cnt ^' li i. a' ' \.-if 1,1

EdÜFis

1 1

i j cycles ÿ cycles Optiniization

jJ i 't 1

 U

' - V

'

' d

 r i -,

Sij Nefcon 1 (modified) / f leam laie

l e 005 V . \ >

Help t t ., ' Y z l 'Close

optimize '

 1

4

j cycles

.if'
Figure 22. Nefcon learning algorithm

U

d. Disabled_Current Fismatrix;

The Fizzy rule learning process is disabled. And the current rule base will be used as initials. As the initial fuzzy rules are not available, this algorithm can not be used here.

50

Optimization:
The fuzzy rule base is optimized by shifting and/or modifying the support of the fuzzy sets. There are tliree possible optimization methods. The NEFCON I(modified) optimization method is introduced as before in section 3.2.b. It uses the cunent enor to modify the membership function. The NEFCON II optimizes the membership fimctions based on the error change trend. If the optimization is disabled, then no optimization will be made. The NEFCON I method is adopted with four cycles at 10'^ learning rate, where the learning rate will decide fuzzy sets shifting and/or modifying degree.

3.3.3 NEFCON training

Up to now, all the learning parameters have been decided, except the airfoil-flap structural data, initial motion data and speed. All these data are included in an m-file called initmSdof and should be connected to the model by the Matlab® command: setj)aram('airfoilalleron3dof', 'InitFcn 'initmSdof) where: "aiffoilaileronSdof': the name of the model to assign tlie initial value; "InitmSdof"'. the m-file contains the initial values to be assigned to the model. After the learning environment for NEFCON is set up, the learning process can be ignited by "Simulate" (Figure 18). The cycle of the airfoil-flap combination oscillation is very small, so the learning time is set to Üie 90sec. During this

period, tlie NEFCON system will get enough motion information about lire airfoil-flap combination. Anotlier point to be mentioned is that after a niunber of trials on NEFCON learning, it is found that the produced flap comrnand(y5c) should be magnified by a gain before apphed to flutter suppression. The NEFCON is trained at a speed higher than the critical flutter speed. The fuzzy rules produced at higher speed can successfully suppress flutter that happened at a low speed after the amplifier is adjusted. The final fuzzy rule base is given in the standard Matlab® Fuzzy Conholler window (Figure 23) with ten rules. Rule Editor: N E FC 0N _H SB E T A 69
'Edi: ;· 1 If Iinpi.it1 2. If (inputt 3. If (hputl 4. If (inputi 5. If (inputi I G. If (inputi 7. If [inputi i? :e1 and lin p u tîr zel and (inpulS is zel and (input4 is zel then (output is ml7l (1 is ze) and (input2 is ze) and (inputs is pz) and (input4 is ze) then (output is m(7) (1) is nz) and (inpul2 is ze) and (inpul3 is ze) and (inpul4 is ze) then (output is m(6) (1 ) is pz) and (inpul2 is ze) and (inpul3 is ze) and (inpul4 is ze) then (output is m(8) (1) is ps) and (inpul2 is ze) and (input3 is ze) and (inpul4 is ze) then (output is mil 0) (1 ) is ns) and (inpul2 is ze) and (input3 is ze) and (input4 is ze) then (output is mf4) (1 ) is ns) and (inpul2 is ze) and (input3 is nz) and (inpul4 is ze) then (output is mf4) (1)

9. If (inputi is nz) a n d (inpul2 is ze) a n d (inputS is nz) a n d (inpul4 is ze) th e n (output is m(4) (1)

9. If (inputi is ps) and (input2 is ze) and (inputs is pz) and (input4 is ze) then (output is mil 0) (1 ) 10. If (inputi is pz) and (inputs is ze) and (inputs is pz) and (input4 is ze) then (output is mfl 01 (1 )
and

zi
" 'I ;

.a

and ne nm ns nz

and

p u W ' ^ m A /^ishi
nb ne nm ns nz ^ __ 1 m(5

.output.
J
m(8 m(9 not

J J

1

il'
not P itG Qonnecliqn onm ction: -i F and ^weignL Add itlle

r^npt

'V f 'S S jf

y

Ic

&'

D e lete tule

11 Change tule Help

id id

FIS Nam e NpFC0N_F(SBETAB9^

j

Clo e

Figure 23. NEFCOIM produced fuzzy rule base

52

Chapter 4 Flutter Suppression
In tliis chapter, both the neuro-fuzzy control and the modified energy method (equation 2-2) are implemented in flutter suppression. The flutter suppression results of these two methods are compared. The neuro-fuzzy controller flutter suppression performance is tested under different conditions.

4 .1 Modified Energy Method Flutter Control

The modified energy based control method (equation 2-2) is implemented in a Simulink® model (Figure 24). There are basically three parts in this model: controller (red), airfoil model (orange) which is built in Chapter 2 and results display (gray). The inputs to the controller are the acceleration (f ), velocity (^) and displacement ( ^ in plunge and acceleration (or"), velocity (or) and displacement (or) in pitch. These conhol inputs come from the airfoil-flap model (orange part). Tlie output of the controller (fic) passes to the airfoil model for flutter suppression. The airfoil model is designed to simulate the airfoil motion in plunge, pitch and flap rotation. The display part uses Simulink® scope blocks to show graphically the airfoil motion.

For an airfoil-flap combination, the modified energy method based conholler (equation 2-2) is implemented with the following parameters which have been used by other researchers [13]: ^ = 100, = 0.25, % = -0.5,

r j= 0.25, i-p = 0.0015 andx^= 0.002. For a control surface that covers 20% of the airfoil chord, cp = 0.6; and Tcç = 0, Tea = -1.86, Tqç = 4 and Tca = 2.84(a/,+0.4). The coefficients in the hansfer function (equation 2-1) are decided by optimization: a r = 4, 0.6 and k,, = 0.04. No structural damping is considered

in this study. The critical airfoil-flap flutter speed without conhol is foimd to be U = 6.139 (Figure 25). Witli conhol applied ^equation 2-2), the critical fluher speed can be increased up to U = 8.25 (Figure26). [/nstable condition occurs at critical fluher speed (U -- 6.139) under modified energy conhol. However it is not a part of this study, the author does not explore this problem.

A n im a tio n

A irfoil M o d e l C o n tr o lle r

Figure 24. Energy method based flutter suppression scheme

54

12

-4

-8
3 0 0 6 0 0 9 0 0

1200

1 5 0 0

N o n d i m e n s i o n a l tim eC x)

(a) pitch displacement below flutter speed {U= 6) 12

i
s-8

-12

3 0 0

6 0 0

9 0 0

1200

1 5 0 0

N o n d im e n s io n a l tim e(x )

(b) pitch displacement at flutter speed (U = 6.139)
8 0

GO
4 0

20 -20
-4 0

-GO
-8 0 3 0 0 6 0 0 9 0 0 1 5 0 0

N o n d im e n s io n a l tim e(x )

(c) pitch displacement above flutter speed (U =6.16) Figure 25. Airfoil-flap flutter speed at U= 6.139 without control

55

200 IS O

lO O
50

-SO

-10Q
-IS O
-200

SOD

1SOO

(a) pitch displacement below flutter speed (C/== 6.139)
1 5 0

9 0 GO 3 0

-3 0

-9 0

-120
-1 5 0 3 0 0 BOO N o n d im e n s io n a l 9 0 0

1200

1 5 0 0

(b) pitch displacement at flutter speed (17= 8.25)
4 0 0

3 0 0

200

-100
-200

-3 0 0

-4 0 0

3 0 0

6 0 0

9 0 0

1200

1 5 0 0

(c) pitch displacement above flutter speed ( U -- 8.3)
Figure 26. Airfoil-flap flutter speed at i7= 8.25 with control

56

The following figures (Figure 27, Figure 28) show the airfoil motion both without and with modified energy control at U= S.
150

100

i .1

-100

30

90 60 N o n d im e n s io n a l tim e(x.)

120

150

(a) nondimensional plunge displacement
3 5 0 0 3 0 0 0 2 5 0 0

2000
1 5 0 0 1 OOO 5 0 0

. g - -5 0 0 5 ^ -1 Q O O -1 5 0 0 -2000 -2 5 0 0 -3 0 0 0 -3 5 0 0

SO N o n d im e

1 SO

(b) pitch displacement Figure 27. Airfoil motion without control at [7=8
30

20 10

II

-10 -20
-3 0 300 GOO 900 N o n d im e n s i o n a l tim e ( x )
1200

1500

(a) nondimensional plunge displacement Figure 28. Airfoil motion w ith control at 17= 8

57

10G
8 0 GO

20 -20 -60
-8 0

-100

3 0 0

6 0 0

9 0 0

1200

1 5 0 0

N o n d i m e n s i o n a l tim e ^ x .)

(b) pitch displacement
Figure 28. Airfoil motion with control at C/= 8

4.2 NEFCON flutter suppression
The NEFCON fuzzy rule base produced in the previous chapter has been optimized and is applied for flutter suppression.

The neuro-fuzzy rule base is loaded into the NEFCON controller for the airfoilflap system. The learning and optimization processes are disabled.

As the fuzzy rule base used here is produced at speed U =6.9, the magnifying factor must be optimized for other lower speeds. A set of amplifying factors applied to different speeds can be found in Table 3.

Speed gain

6.14 0.9

6.3 1.1

6.7 1.11

6.9 1.2903

Table 3. NEFCON amplifying gains for different speeds

58

Based on the above set of data, Matlab polynomial fitting method is used to find an equation on speed-gain relation which can be expressed as: Gain = 94.1*i7^+614.3*i7-1335.5. This equation must be put in the Simulink® model of the NEFCON model. The fuzzy rules can suppress flutter successfiilly and quickly for speeds up to 6.7. Figure 29 and Figure 30 show the performance of the Nefcon controller. When speed increases to U = 6.9, tlie suppression happens slowly and drift happens at x = 1500 (Figure 31).

2.5 N E F C O N c o n tro l E n ^ g y c o n tr o l N o c o n tr o l

1 .5

- 1 .5

-2
- 2 .5 -3 300 600 900 N o n d im e n s i o n a l tim e (x )

1200

1500

(e) nondimensional plunge displacement

IS O

1 DO SO

-so

(b) pitch displacement
Figure 29. F lutter suppression (Z7= 6.139)

59

PRO P.Em YO F RYER90N miVEmiTY UBRAflV

5
4 3

A.

P.ON c.tWtfpJ _. .Çne.ray_çpn.trgi

-- s

i i

2 1 1
2
3
·4

li

·5

0

300

600

900 N ondim ensional !ime('c)

12 00

1500

(a) nondimensional plunge displacement
5 0

3 0

20 10

C O N _c g n t r o l

a rg y ^ p n t rg 1 _

-3 0 -4 0 -5 0 3 0 0

GOO 9 0 0 N o n d i m e n s i o n a l t i m e (- c )

(b) pitch displacement
Figure 30. Flutter suppression (1 7 = 6.7)

WE F C O N . c o n t COL

E n o p g y -oootr-oJ

I
-2
-4
-5

-B
-7

300

600 900 N an o nd di im e n s i o n a l tim e(-c)

1200

1500

(a) nondimensional plunge displacement
Figure 31. Flutter suppression {U = 6.9)

60

50
4 0 3 0

20 1G -1O ·20 -30
-4 0 -5 0

NEFCQN

control^

c o n tro l

3 0 0

6 0 0

9 0 0

1200

1 5 0 0

N o n d im en sio n al tie m (t)

(b) pitch displacement Figure 31. Flutter suppression {U = 6.9)

4.3 Neuro-fuzzy control and energy method control comparison

Both of the control methods can successfully suppress flutter. Witli the modified energy control method, the plunging displacement amplitude will f'rst jump to a higher level; whereas under the NEFCON control, the plunging displacement amplitude is maintained within a small range and then will be suppressed (Figure 29 u Figure 31). So under the modified energy method, the airfoil-flap combination needs to be stronger to resist the higher plunge deformation.

The energy method can suppress flutter at much higher speeds such as U - S (Figure 28), but not the NEFCON method.

The significant result from this study is that the neuro-fuzzy control methodology can be applied to flutter suppression successfully without any

61

prior control command knowledge required. The NEFCON controller adopted in this study can learn itself from the motion of the airfoil-flap to produce a set of fuzzy rules for flutter suppression. The NEFCON controller can then use these fuzzy rules to suppress the flutter successfully. The NEFCON control method should be considered first in flutter suppression.

4.4 Neuro-fuzzy controller p ./fb; : ,ance test
In this section, two performance tests Oi. die fuzzy rules produced in Chapter 3 are implemented. First, the value of the o parameter is changed slightly (±2%) for fuzzy rule sensitivity test. Second, four parameters-m^ cop.ra and rp- will be increased with a higher percent (say 10%) of the initial values to find out the flutter suppression performance of the fuzzy rule base under the new airfoil-flap system. The author will also try to find out which parameters are critical to the flutter suppression in the second test.

4.4.1 Sensitivity Test--2% change in 2% increase in parameter (co^ = 0.204)
The neuro-fuzzy controller can successfully suppress flutter until the airspeed is 6.7 (Figure 32, Figure 33). When airspeed reaches 6.9, the amplifying factor should be changed to 1.315 for successful flutter suppression (Figure 34). The successful flutter suppression at airspeed 6.7 indicates that the slight change in the parameter co^ does not affect the neuro-fuzzy controller performance.

62

0.25

0.2
0 .1 5

i

0.1
1

2S

1

0 .0 5

J t
J g * - 0 .0 5

" -0.1
- 0 .1 5

-0.2
- 0 .2 5 600 900 N o n d im e n s io n a l tlm B(x)

(a) nondimensional plunge displacement 12

A

-

-8 -12
3 0 0 6 0 0 9 0 0

1200

1 5 0 0

N o n d i m e n s i o n a l t i m e (x.)

(b) pitch displacement
Figure 32. Neuro-fuzzy control under co^= 0.204 and U = 6.139

0 .4 0 .3

0.2

-0.1 -0.2
- 0 .3 - 0 .4

300

BOG 900 N o n d im e n s i o n a l t i m e ( t )

1200

1500

(a) nondimensional plunge displacement
Figure 33. Neuro-fuzzy control under

= 0.204 and U = 6.7

63

12

-A

-S

-12

3 0 0

BOO 9 0 0 N o n d i m e n s i o n a l ti m e ("c )

1200

1 5 0 0

(b) pitch displacement
Figure 33. Neuro-fuzzy control under o)^- 0.204 and U = 6.7
0 .4 0 .3

Ü -2

-0 .1

-0.2
-0 .3 -0 4

0

300

600 900 N o n d im e n s io n a l timo(T,)

1200

1500

(a) nondimensional plunge displacement 12

-8

-1 2

3 0 0

BOO 9 0 0 N o n d i m e n s i o n a l ti m e ( x .)

1200

1 5 0 0

(b) pitch displacement
Figure 34. Neuro-fuzzy control under = 0.204 and U= 6.9 with (amplifying factor = 1.315)

64

2% decrease in parameter (a)^ = 0.196)
From Figure 35-Figure 37, the same conclusion as that in previous section on the neuro-fuzzy controller's perfonnance can be drawn for this decreased co^ parameter.

0 .2 5

0 .1 5

E 0 .0 5

0 .1 5

600 900 N o n d im e n s io n a l tim e (x )

(a) nondimensional plunge displacement 12 8

e



-8

-12 O

3 0 0

BOO 9 0 0 N o n d i m e n s i o n a l tim e ('c )

1200

1 5 0 0

(b) pitch displacement Figure 35. Neuro-fuzzy control under co^ = 0.196 and U = 6.139

65

0 .2 5

0.2
0 .1 5

1 S 0.05
,0 .0 5
-0 .1

-0 .1 5

-0.2
- 0 ,2 5

O

300

600 900 N o n d im e n s i o a n I tlm e ( x )

1200

1500

(a) nondimensional plunge displacement 12

-8

-12

3 0 0

6 0 0

9 0 0

1200

1 5 0 0

N o n d i m e n s i o n a l t i m e ("c)

(b) pitch displacement Figure 36. Neuro-fuzzy control under 0.196 and t/= 6.6

0 .4 0 .3

0.2

0.1

lî

-0.1 -0.2
-0 .3 -0 .4 300 600 900 N o n d im im e en ns sio ion n;a l tim e (x )

1200

1500

(a) nondimensional plunge displacement
Figure 37. Neuro-fuzzy control under (o^= 0.196 and U = 6.9 (amplifying factor = 1.268)

66

12

-8 -12
3 0 0 6 0 0 9 0 0

1200

1 5 0 0

N o n d i m e n s i o n a l timeCx.)

(b) pitch displacement
Figure 37. Neuro-fuzzy coutrol under (o^= 0.196 and C/= 6.9 (am plifying factor = 1.268)

4.4.2 Performance under new system -- 10% parameters increase
Unlike the slight (±2%) parameter change, a 10% increase will change the critical airfoil-flap combination flutter speed (Table 4). The performance test starts at the new flutter speeds and continues at several critical speeds.

10% increased parameter New flutter speed

Cüp

ra

rp

6.07

&149

&59

6.153

Table 4. New critical flutter speed under increased parameters

A t new flutter speed
The following figure (Figure 38) indicates that the neuro-fuzzy controller can successfully suppress flutter at new flutter speeds.

67

0.3

0.2
0.1

-0.1 -0.2
300 BOO 900 N o n d im e n s io n a l 1iem(-c)

1200

1500

(a) nondimensional plunge displacement 12

-a

-12

3 0 0

BOG SOO N o n d im e n s io n a l tim e(x)

1 5 0 0

(b) pitch displacement
Figure 38. Neuro-fuzzy control at new flutter speeds

Air speed U = 6.65
It can be seen in Figure 39 and Figure 41 that the increase of two parameters {o)^,rcf) will not degrade the nemo-fuzzy control performance in flutter suppression. After changing the amplifying factor produced by the equation4.8*!/ -94.1*!/+614.3*!/-1335.5 to 1.0(for a> p) and 0.9(for r^), the neuro-ftizzy conholler can suppress flutter better under the increased a > p and (Figure 43,

Figure 44) compared with the results shown in Figure 40 and Figure 42 . As the air speed increases, the control result will become more and more sensitive to

68

the amplifying factor of the neuro-fuzzy controller output. The equation produced by the regression method for amplifying factor calculation is not accurate enough, so the adjustment of this amplifying factor does not indicate that the neuro-fuzzy controller is inefficient.
0 .4 0 .3

1 .1

0.2 0.1
g -0 .1

-0.2
- 0 .3 - 0 .4

300

600 900 N o n d im e n s i o n a l tim e ( x )

1200

1500

(a) nondimensional plunge displacement 12

-a

3 0 0

SOO

1200

1 5 0 0

(b) pitch displacement

Figure 39. Neuro-fuzzy control at (Of=0.22 with other parameters unchanged

69

G.4 0 .3

0.2

0.1
z §-0.1

-0.2
- 0 .3 - 0 .4

0

300

600 900 N o n d i m e n s i o n a l tim e (i:)

1200

1500

(a) nondimensional plunge displacement 12

-12
N o n d i m e n s i o n a l ti m e("c)

1200

(b) pitch displacement Figure 40. Neuro-fuzzy control at oip= 1.55 tvith other parameters unchanged

0 .2 5

0.2
0 .1 5

0.1

g

w - 0 .0 5

-0.1
- 0 .1 5

-0.2
- 0 .2 5 300 GOO 900 N o n d im e n s io n a l ttm e(r.)
1200

1500

(a) nondimensional plunge displacement Figure 41. Neuro-fuzzy control at ra ~ 0.55 with other param eters unchenged

70

12

-a

-12

3 0 0

6 0 0

9 0 0

1 5 0 0

N o n d i m e n s i o n a l tim e(n:)

(b) pitch displacement
Figure 41. Neuro-fuzzy control at / ,, = 0.55 with other parameters unchanged

0 .2 5

0.2
0 .1 5 i 0 .0 5

-0.1
- 0 .1 5

-0.2
- 0 .2 5

0

300

600 SOO N o n d im e n s i o n a l tim e("c)

1200

1500

(a) nondimensional plunge displacement 12

-0

-12

3 0 0

6 0 0

9 0 0

1 5 0 0

N o n d im e n s io n a l tim e(x )

(b) pitch displacement
Figure 42. Neuro-fuzzy control when rf= 0.0426 with other parameters unchanged

71

0.4 0 .3

0.2 0.1

i
g-0.1

-0.2
-0 .3 -0 .4 1500

300

600 900 N o n d im e n sio n a l time(-c)

1200

(a) nondimensional plunge displacement

-8

-12

3 0 0

6 0 0

300

1200

1 5 0 0

N o n d im © nsio n al t i m a M

(b) pitch displacement
Figure 43. Neuro-fuzzy control at (o^ 1.55 with other parameters unchanged (amplifying factor 1.0)
0 .4

0 .3

0 .2

0.1

-0.2
-0 .3
-O 4

300

600 900 N o n d im e n s io n a l; tim e (x )

1200

1500

(a) nondimensional plunge displacement
Figure 44. Neuro-fuzzy control at rp= 0.0426 with other parameters unchanged (amplifying factor 0.9)

72

12

-8

-12

3 0 0

9 0 0 GOO N o n d i m e n s i o n s i tim e(-c)

1200

1 5 0 0

(b) pitch displacement Figure 44. Neuro-fuzzy control at 0.0426 with other parameters unchanged (amplifying factor 0.9)

Air speed U = 6 . 7
At this air apeed, the neuro-fuzzy controller will not be able to suppress flutter with increased o)^ (Figure 45). The increase in ra does not affect the neuro-fuzzy control flutter suppression (Figure 47). After changing the amplifying factor to 1.05(for cop) and 0.9(for rp), the neuro-fuzzy controller can successfully suppress flutter with increased parameters- cop and rp. The reason for this change can be the same under U = 6.65 (Figure 46, Figure 48).

73

0.8

0 .5

0.2

z J

-0.2 -0.4
- 0 .6 - 0.8

50

100

160 N o n tjim e n sm n a l tirnG(r)

250

(a) nondimensional plunge displacement

IS

1O

-5

-1 O

5 0

10G 1 5 0 N o n d i m e n s i o n a l tim e(-c)

2 5 0

3 0 0

(b) pitch displacement Figure 45. Neuro-fuzzy coutrol at o)f=2.2 with other parameters unchanged
0.4 0 -3
0 2

- 0.2

-0 .3 -0 4

300

GOO 900 N o n d im e n sio n a l tim e(x)

1200

1600

(a) nondimensinal plunge displacement (b) Figure 46. Neuro-fuzzy control at o )^ 1.55 with other parameters unchanged (amplifying factor 1.05)

74

12

-A

-8

-1 2

3 0 0

6 0 0

9 0 0

1200

1 5 0 0

N ondim ©

(c) pitch displacement
Figure 46. Neuro-fuzzy control at co/= 1,55 with other parameters unchanged (amplifying factor 1.05)
Ü .4 0 .3
0.2

0.1

I

1

·0 . 1

-

0.2

- 0 .3 - 0 .4

300

600 900 N o n d im e n s i o n a l tim e (x )

1200

1500

(a) nondimensional plunge displacement

-S

-1 2

3 0 0

6 0 0

9 0 0

12 00

1 5 0 0

N o n d i m e n s i o n a l tim©(T.)

(b) pitch displacement
Figure 47. Neuro-fuzzy control at r« = 0.55 with other parameters unchanged

75

0.4 0 -3

0.1

0 .2

- 0 .3 - 0 .4

300

BOO 900 N o n d im e n s io n a l timeCc)

1200

1500

(a) nondimensional plunge displacement 12

-4 .

-a
300
6 0 0 9 0 0 1 5 0 0

N o n d i m e n s i n n a l timsCT^)

(b) pitch displacement Figure 48. Neuro-fuzzy control at rp= 0.0426 with other parameters unchanged (amplifying factor 0.9)

Air speed U = 6.9
At this air speed, the neuro-fuzzy controller will work only under the increased (Figure 49).This is not surprising as the fuzzy rules used here are produced at this speed (U - 6.9) and the parameter changes will affect the neuro-fuzzy controller's performance easily.

76

From the performance of the neuro-fuzzy controller's performance at different air speeds under increased airfoil-flap combination parameters, it can be concluded that the fuzzy rules are capable in flutter suppression.
0 .5 0 .4 0 .3
0.2

1

·0.1 - 0.2

- 0 .3

-0 .5

300

BOO 900 N o n d im e n s io n a l tim e (x )

1500

(a) nondimensional plunge displacement
12

e

A A

1O

-8

·12

Ü

3 0 0

6 0 0 SOO N o n d i m e n s i o n a l lime(x.)

1SOO

(b) pitch displacement
Figure 49. Neuro-fuzzy control when = 0.55 with other parami :ers unchanged

77

Chapter 5 Conclusion
The neuro-fuzzy controller application to the flutter suppression of a three degree-of-freedom airfoil-flap combination in a two-dimensional

incompressible in viscid flow is studied. The airfoil Simulink® model is simulated according to a set of airfoil aeroelastic equations of motion. A NEFCON controller is then included in the Simulink® model of the airfoil to learn the airfoil behaviour and increase the critical flutter speed. A fuzzy rule base with ten rules is produced by the NEFCON controller from learning the dynamic behavior o f the airfoil.

The NEFCON output, flap rotation command, is decided by the fuzzy rules and magnified by a gain. The NEFCON controller can increase critical flutter speed
by 12.4%.

For the purpose o f comparison, the modified energy control law is also applied on the same airfoil-flap combination. When the modified energy method is applied, the plunging displacement first jumps to a high level and then reaches a stable state. The modified energy method increases the critical flutter speed by 35%. The present study shows that the neuro-fuzzy control methodology can be

78

successfully applied to flutter suppression without any prior knowledge of the flutter suppression command required.

Further research is suggested on the application of neuro-fuzzy control in flutter suppression of airfoils. Further study is required to improve the NEFCON controller's performance by adjusting its structural parameters, finding out why the gain factor must be applied and why different gain factors are needed for training and control.

79

References
[1], Bisplinghoff, R. L., Ashley, H. and Halfman, R. L., "Aeroelsticity," Dover Publications, Inc., Mineola, New York, 1996. [2]. Fung, Y.C., "Introduction to the theory of aeroelasticity," John Wiley and Sons,Inc. London. Champman & Hal, Limited, 1955. [3]. Yang, Z.C, Zhao, L.C. and Jiang, J.S. "A semi-active flutter control scheme for a two-dimensional wing", Journal of Sound and Vibration
(1995) 184(1),1-7

[4].

Negnevitsky, M., "Artificial intelligence: a guide to intelligent systems," Addison-Wesley, 2002.

[5].

Haykin,

S.,

"Neural

networks:

a

comprehensive

foundation,"

Macmillian College Publishing Company, 1994. [6]. Rojas,R., "Neural networks; a systematic introduction,"
1996.

Springer,

[7].

Homik, K., Stinchcombe, M., and White, H., "Multilayer feedforward networks are universal approximators," Neural Netwoks 2 (1989) 359-366

[8].

Rutkowska, D., "Neuro-Fuzzy architectures and hybrid learning," Physica-Verlag A Spronger-Verlag Company, 2002.

[9].

Haley,P., Soloway, D., "Generalized predictive control for active flutter suppression," Journal of Guidance, Control, and Dynamics, Vol.24,No.l, J anuary-F ebruary 2001.

[10]. Muklropadhyay, V., "Transonic flutter suppression control law design using classical and optimal techniques with wind-tunnel results," 40`'' AIAA/ASME/ASCE/AHS/ASC Structures, Structural Dynamics and

Materials(SDM) Conference, April 12-15, 1999/St. Louis, MO.

80

[11].

Crowther, W.J., Cooper, J.E., "Flight test flutter prediction using neural School of Engineering, University o f Manchester, M l3 9PL,

networks

23 O ctober, 2000. [12]. Scott, R. C., Pado, L.E., "Active control of wind-tunnel model

aeroelastic response using neural networks," Journal of Guidance, Control and Dynamics Vol.23, No.6, November-December 2000. [13]. Alighanbari,H., " Flutter analysis and chaotic response of an aircraft for structural nonlinearity," PH.D Thesis McGill

accounting

University, 1995 [14]. Alighanbari, H., "The aeroelastic response of a 3-dof airfoil with

structural nonlinearities," Third International Conference on Nonlinear Problems in Aviation and Aerospace May 10-12, 2000. [15]. Alighanbari,H., in "Stability and biftircation of an airfoil-aileron flow,"

combination

two-dimensional

incompressible

inviscid

Proceedings of 43'' ^ AIAA/ASME/ASCE/AHS/ASC Structures, Structural Dynamics, and Materials Conference, Denver, CO, USA,April,2002. [16]. Alighanbari,H., "Aeroelastic response of an airfoil-aileron combination

with fteeplay in aileron hinge," Journal of Aircraft, Vol.39, No.4; Engineering Notes, 2002. [17]. Numberger,A.,Nauck,D., and Kruse,R., "A neuro-fuzzy development

tool for fuzzy controllers under Matlab/Simulink," Proc. 5th European Congress on Intelligent Techniques and Soft Computing (EUFIT'97), pp. 1029-1033, Aachen, 1997. [18]. Nauck,D., Klawonn,F., and Kruse,R., "Foundations of neuro-fuzzy

systems,; John Wiley & Sons,1997.

81

[19].

Numberger, A., Nauck,D., Kruse,R., "Neuro-fuzzy control based on the

NEFCON-model: recent developments," Soft Computing 2 (1999) 168-182 Springer-Verlag 1999. [20]. Nauck, D., and Knise,R., "A fuzzy neural network learning fuzzy

control rules and memebership functions by fuzzy error beckpropogation," Proc. IEEE Int. Conf. Neural Networks ICNN'93, San Francisco, Mar.28Apr.l(1993), 1022-1027. [21]. Numberger,A., Nauck,D., and Kruse,R., "Neuro-Fuzzy control based on

the NEFCON model under MATLAB/SIMULINK" 2^° On-line World Conference on Soft Computing in Engineering Design and Manufacturing,
1997.

[22].

Numberger, A.,

and

Kmse,R.,

"Neuro-Fuzzy

techniques

under

MATLAB/SIMULINK applied to a real plant," Proc.IEEE Intemational Conference on Fuzzy Systems 1998 (FUZZ-IEEE '98), pp. 572-576, Anchorage, Alaska, 1998. [23]. Lanas, A. I., Pacheco I, M.A., Vellascol, M.M., Tanscheit, R., "Neuro-

Fuzzy control of a multivariable nonlinear process," The 7th European Congress on Intelligent Techniques and Soft Computing. EUFIT '99 Magdeburg, Germany, 1999 . [24]. Mukhopadhyay,V., "Transonic flutter suppression control law design

and wind-tunnel test results," Joumal of guidance, control, and dynamics, Vol.23, No.5, September-October 2000. [25]. Alighanbari, H., and Price, S.J., "The post-hopf-bifurcation response of

an airfoil in incompressible two dimensional flow," Nonlinear dynamics 10: 381-400 © 1996 Kluwer Academic Publishers. Printed in the Netherlands. [26]. Alighanbari, H., and Hashemi, S.M., "Bifurcation analysis of an airfoil

containing a cubic stmctural nonlinearity and subjected to two-dimensional

82

incompressible flow," 43*^^ AIAA /ASME/ASCE/AHS Structures, Structural Dynamics, and Materials Conference, April 22-25, 2002/ Denver, CO. [27]. Bemelli-Zazzera,F., Mantegazza,P., Mazzoni,G., and Rendina, M.,

"Active flutter suppression using recurrent neural networks," Joumal of Guidance, Control and Dynamics, Vol.23, N o.6, November-December
2000 .

[28].

Lee, B.H., and Wong, Y.S., "Neural network parameter extraction with 1:

application to flutter signals," Joumal of Aircraft, Vol.35, No. Engineering Notes, 1998.

83

A ppendix I

E quations fo r T^s

1 T T l = --X scb X (2 + c b e ta ')+ c b e ta x acs T 3 = ( --+ c b e ta " ) X acs" +0.25 x cbeta x scb x acs x (7+2 x c b e ta ") 8
X ( l- c b e ta " )(5 x cbeta" +4) 8 T 4 = -acs+ cb eta x scb - --

T 5 = ( l-c b e ta " ) - a c s " + 2 x cbeta x scb x acs T 7 = ( --+ c b e ta " ) X acs+ --x cbeta x scb x (7+2 x cbeta )
8 8
1 ) 1
?

T8=

-- X

1

scb

X

 ) (2 X c b e ta " + l)+ c b e ta

x

acs

T 10= scb+ acs T l l= a c s X (1 -2 x cbeta)+scb x (2 -cbeta) T 12=scb X (2+ cbeta)-acs x (2 x cbeta+1) where; 9 zbeta = rbeta~ + {cbeta --ah) x xbeta ahbar = --- ah 9 scb = y[ --cbeta~ acs = axccos{cbeta)

84

Appendix II

Simulink® blocks for m's, n^s and a's

These are the m's, n's and q's equations; ju + l M
m r,

m, =

xalphax /J --U f, _

? ri:

_ -- T l + xbcta xTtxju
7 tX /J

niA = 2

U X Iw+zetaxi x omegaxi x p U xp
+1

2 X /w(0.5 --
=

nu =

-T4 + lwxTU
/T X p

m-,

^ omegexi ^ U 2 x lw

T O S =·

85

mg

2x.lwxTlO --------------- : TlXJU
=0;

77 2 ,0

-2 7 7 2 11 = ---

-2

m^2 - ·

86

xalpbax/2-- af^
g î

mlpha~ x u ralpha~ x p
^

H " )--

+ 0 .1 2 5 +

ralpha~ x p zbeetaxKX / i +
H x q ^

- T lx c b e ta - T l _

l'O lp llC r X K X p

/K{l+2xa, ) "4 = -- 7 - ^ -- ;
ralpha x p

[-IxJJxajj xhv-Uxlw+U^x(0.5-ajj)+2xzetaalphaxralpha~ x p
,

Uxralpha'xp T l\+ lx 'n -- hvxT \\+ lxT A xa,.-lxT A xch eta-2xT % -xlxa], x /w x 7 1 1

«6 =
Hj = 0 ,

ralpha xrcxp

^

;

'h --

-hvxU~ + ralpha' x p -- 2xIwxxU~ ralpha xJJ x p

-- - - --

,

7 1 0 - 2 x a . x /M 'x 7 1 0 + r 4 - /w x J 1 0

"9=-------------T T l------------------: ralpha xnxp
'ho

«11= 4 1 - ralpha , , 2x p 
l+ 2 x a i,

l+2xa.

"i2 -

ralpha x p

rr~ ï

·

87

q^ -

- T \ + xbeta xzrx u Tvxrbeta x /i

ry i

'

zbetaxKX u + Tlxa,, - T l x c b e t a - T l q , = ---------------- :------ -- 1 -----------------------; n X rbeta x /j -T 3 -r rbeta" x n ' x a

~

rheta

,

2x k 2 x

jj.

'

ri2x/w
n X rbeta" x jj. licbeta" - l\\jl-cbeta~ -- 6 x T l - 3 x T A + 6xT l2xlw {0.5-ah)
q . = ----------------------------------------------- -------------------------------------------;

;

T~

6x7t x rbeta" x n Axzetabetaxomegabetaxrbeta" XTT" x j a - v U x T \ l x h v x T \ \ -- U x 74x711 2xUXrbeta" xn~ x ja

h =0;
712x/w % =-- -- 1-- ; n X rbeta x fx
-U" xTAxTl O + U" xT5 + omegabeta" xrbeta" xtP' x fx+U~ x 7 1 2 x /w x 7 1 0 rbeta" xU" X TT" x jj.

%=

?io --0;

1

-712

T Vxrbeta xfj.
-7 1 2

TT"!

'

In

T VX rbeta" x u ( om egabeta\

TT^

'

" " i -- E T -j

88

The followings show the Simulink® models of ms, ns and qs:

mu mu reciprocal * Out1

xalpha xalpha

0 -K D Ï 0 'J t2

xbeta xbeta
O uM

Î

Out3

Constant

mu mu

Product mu mu Gain

Product

m1

m2

m3

Constant

P roduct mu Product Product Product

Product

< 3
OuW Constant Constant mu

Constant P roduct om egaxr

mu

m4

m5

89

O uti

omegaxi omegaxi Product
Out1

Product

K I3
Product square 0Ut7

mu mu Gain

T11

m6

m7

anh ' L_ Constant

Constant Product

-- MUD
Outs

Product

Out9

Constant mu mu

h-Km)
Product OutlQ

Iw 2
O utl

mu mu

T1Q

Gain

tn8

m9

m11

alpha
Constanti mu mul

hKD
Productl

xalpha mu mu ah ah ralpha ralpha

Constant Product Outl 2 Products Constant Product square ralpha square ralpha ralpha -- square m u ----------------mu 0.125 Outl 3

Gum

m12

n1

n2

90

O utl -iw
G u ll

-KH)
O utl 5 Product Constant Product

c b E ta c b e ta O utl G ain

-K ID
Product Product Out14
C o n s ta n t

Product

mu mu Product

ralpha ralpha ralpha

mu
ra lp h a ra lp h a

Product raplha
sq u a re

Gain

n3

n4

C o n stan t P ro d u ct z e ta a lp h a z e ta a lp h a

C o n s ta n t Outl P ro d u ct

-+ 0 -K 3 E )
O ut16 Outl

u

Outl C o n sta n t ah ah P ro d u ct

712
C op s ta n t

P ro d u ct

C o n s ta n t
tw

P ro d u ct P ro d u ct mu Pro d u ct ralpha ralp h a Outl T5 c b e ta cb e ta ralp h a  u ralp h a ralpha G am sq u are -------------P ro d u c t P ro d u ct P ro d u ct

-Km
O u tl 7

ralphqT 4
sq u a re

0
n5
mu

n6

91

Out1

Constant Product Constant Product

"

O ut18
Out1 T13

Product

Constant

ralpha ralpha mu mu ralpha square

Constant Product

-K ÎD
Product mu mu O utl 3

square

U*2 reciprocal

ralpha ralpha ralpha square Gain

n8

n9

xtieta Constant Constant

Xbeta

f Gam e u
H

%
Product f -------

Const; Product

KS)
Product

Product

K S)
Product
Out21

mu mu

-K2D
Out22

ah
ralpha ralpha

Out20 I ralpha j--  u ralpha ralpha

g
T9 roeta

Product

HZ}ralpha square

square

rbeta

rbeta square

Gain

n11

n12

qi

Outl T15 Outl T14

P roduct cb e ta cb e ta P roduct

C onstant
Outl

r>
P roduct rb eta -

Products

T17

Producth
Outl

rbeta Gain P roduct mu

Gain sq u are rbeta rbeta rbeta Gain isq u are m u -------------------mu

zbeta mu mu G ain rbeta rbeta rbeta square

q2

q3

q4

92

Constant C onstant cüeta cbeta cbeta square Oull T18 om egabeta rbeta rbeta Gain square Fen Gain zetab eta Product

Dut1
T20

-f> Gain

O utl
T19 Products

mu mu

in s t a n t r»
rbeta rbeta rbeta Gain4 squ are! mu mu2 an Product -- V Products
Outl

-K2D
Out27

T22

P ro d tk r

P ro d u ctl 0

O utl
T21

q5

q6

O u ll O u tl
T24 T27 P ro d u ct

O utl
T25

-K2D
O ut28 rb eta rbeta mu mu rbeta sq u are

O u tl
T7B P ro d u ct P roduct

->0-K2D
Out29

T'
G am

P ro d u ct

O utl
T26 rbeta rb eta o m e g ab eta o m e g ab eta G am

u
sq u a re resu lt sq u a re P ro d u ct

q8

q3

utl
f29
rbeta rbeta Gain

O u tl --
T30 Out3D rbeta rbeta rb eta sq u are Gain Gam

o m eg ab eta

u ^
rbeta square Gain

-M3D
o u ts i Product P roduct

o m e g ab eta

iu
P roduct

-ul

u^ [xiD
sq u are
Out32

q11

q12

q13

93

Appendix III
+m2a

Ordinary differential equations calculation
+mj<^+ m^a-t-mg/S+
m,2>'2 = 0

+ ^ 4 ^ +m^a

+
(2 -3 )

«[4^ + « 2« +«3/5 + « 4^ +n^a +«6/5 + « g « +779/5+ «i

+ « 12>'2 = 0

(2 -4 )

+ 9 2 ° : + 93^

+ 9 4 ^ + 95° : + 9 6 ) 5 + 9 8 ° : + 9 9 / ^ + 9 i i ^ i + 9 i 2 > '2 -

" 9 i3 /^ c ( 2 - 5 )

In order to solve the
my<^ + 7772°: + « ^ 3 / 5
=

a and /?, the above equations are rewritten as;
- (

7774( ^

+

7775(2:

+ 777g/5 +

7777^

+ 7?7g(2: + 7 7 7 9 /5 + 777] I > > 1 + 77712372)

77j(^ + 7 7 2 (2 :

+ « 3 /5

-

- ( « 4 ( ^ +«5<% + « 6 ) 5

+ »8& + « 9 )5 + « l l 7 l + «

12^ 2 )

9i^"+92a" + 93/?" = - ( 9 4 ^ + 9 5 « + 9 6 / + 98« + 99^ + 9 i m + 9 i 2 y 2 + 9 i 3 ^ )

The right parts o f the above three equations are expressed in the following way:
S = -(7774^ + 7775a + 7 « 6/5 + 7777)^+ 7 ng(2: + 7 « 9/5 + 7 «i ,371+T«i 2372)

T = -(«4<#' + «5a +«6/5 +«ga + «9/5 +«1,^1+« 1 2 ^ 2 )
U = - ( 94 ^ +95°: +96^ +9b°: + 99-5 + 9ii>'i + 912T2 +9i3^c)

so:
7«i^ +7«2<% +7«3/5 = S

«((^ +«2<2: + « 3 / 5

=T

9

,^' +92°: +93)5' = U

94

Solving these new formed equation, we have;

^=

-(/Z2X%-»3xg2)xS/rH-(/?^x%-y?^xg2)xT/D-(m^XM2-m;XM2)xljyD

a = (njXÇ3-n3xgj)xS/D-(wîjxg3-/?î3XÇj)xT/D-(-77îixn3+/ï^x/îi)xU/D
/? = -(») xg2-»2Xgj)xS/Df(y?^xg2-fM2Xgr;)x'iy[H-(-7?^ XMg+zy^x/zJxU/D

where: D
= - m | X M2 X ^ 3 + m ^ X M3 X ^ 2 + X ?M2 X ^ 3 X /M3 X ^ 2 - g ; X ^ 2 X

»3 +

X^3 X«2 We can now build the airfoil-flap combination model under Simulink® (see Figure 14 ).

95

Appendix I V

M -files fo r simulation

Initial condition:
% This file contains the airfoil-flap structure parameters, initial motion information % and energy control law parameters. This file will be called every time when % simulation begins. 11= 100; cof= 0.2; (üj3= 1.5; r,, = 0.5; = sqrt(0.0015); ai, = -0.5; Xa = 0.25; Xp = 0.002 ; = 0.6; 4f = 0; G = 0; 4)9 = 0; /w = 1; aw = 0.165; bw = 0.0455; cw = 0.335; dw = 0.3; [/= 6 .9 ; Tc^=0; Tea = -1.86; T%= 0.0698; Tga = 2.8;

96

ttT --4; C=0.6; kn = 0.04;

97

Animation:
fonction [sys,xO]=AIRFOIL_Anim(t,x,u,flag,ts); % AIRFOIL_Anim S-fonction for animating the motion of a 3D 0F airfoil-flap. % The animation shows the relative pitch and plunge motions and the % associated control surface deflections.

% This file is written based on bact_anim.m by % Marty Waszak, 7-31-95 % % NASA Langley Research Center Hampton, VA 23681-0001
(804) 864-4015

%

m.r.waszak@larc.nasa.gov

global yAF xAF xFP yFP AIRFOIL % global icount B_Movie

if fla g = 2 , if any(get(0,'Children')=AIRFOIL), if strcmp(get(AIRFOIL,'Name'), AIRFOIL Animation'), set(0,'currentfigure', AIRFOIL);

xyA F = [...
-12 0

8 0 ];
xyF P = [... 8 0
12 1 ];

xAF=xyAF(:,l);

yAF=xyAF(:,2);

98

xFP=xyFP(;,l);

yFP=xyFP(:,2);

dLE = abs(xAF(l));

dH2 = abs(xAF(2)); dFP = abs(xFP(2) - xFP(l));

hscale = 50; ascale = 50*pi/l 80; dscale = 10*pi/180; bias = -2*dscale;

xi = -u(l)*hscale/5; alpha = u(2)*ascale; beta = ti(3)*dscale;

xLE = -dLE*cos(alpha);

yLE = xi + dLE*sin(alpha);

x H 2 - dH2*cos(alpha);

yH2 --xi - dH2*sin(alpha);

xFP = xH2 + dFP*[cos(beta)]; yFP = yH2 - 30*dFP*[sin(beta)];

xl=[xLE; xH2]; x2=[xH2; xFP];

yl=[yLE; yH2]; y2=[yH2; yFP];

hndl_vec=get(gca, 'UserData') ; hndll = hndl_vec(l);

99

hndl2 = hndl_vec(2);

set(hndll,'XData',xl,'YData',yl); set(hndl2,'Xdata',x2,'YData',y2);

drawnow;

% %

icount = icount + 1; B_Movie(:,icount) = getframe;

end end sys-[];

elseif flag -- 4 % Return next sample hit

% ns stores the number of samples ns = t/ts;

% This is the time o f the next sample hit. sys = (1 + floor(ns + le-13*(l+ns)))*ts;

elseif fla g = 0 ,

% Initialize the figure for use with this simulation AIRFOIL_AnimInit('AIRFOIL Animation') ; [flag, AIRFOIL] =figflag('AIRFOIL Animation'); axis([-15 15-15 15]); hold on;

xyA F=[...

100

-12 0
8 0 ];

xyFP=[...
80

12-1 ];

xAF=xyAF(:,l);

yAF=xyAF(:,2);

xFP=xyFP(:,l); yFP=xyFP(:,2);

xl=[xAF]; yl=[yAF]; x2=[xFP];y2=[yFP];

% Draw the reference line for the model plot([-15 15],[0 0],'w','LineWidth',l); plot([0 0],[-10 10],'w','LineWidth',l); text(-12,-12,'(This is only for motion demos, purpose!)')

%

hndl=plot(xl,yl,'y',x2,y2,'r',x3,y3,'g','EraseMode','background','LineWidth,3); hndl=plot(xl,yl,'y',x2,y2,'r','EraseMode','normal','LineWidth',3); s et(gca, 'U s erD ata', [hndl]) ; %set(gcf,'Color','w');

% icount = 1; % B_Movie(:,icount) - getframe;

sys=[0 0 0 3 0 0]; % sys=[0 0 #outputs #inputs 0 0]; xO=[]; end;

101

Animation initialization:
function figNumber=AIRFOIL_AnimInit(namestr) % BACT_ANIMINIT Initializes a figure for the BACT SIMLfLINK animation.

% Ned Gulley, 6-21-93 % Copyright (c) 1984-94 by The MathWorks, Inc.

if (nargin == 0) namestr = 'SIMULINK Animation'; end

[existFlag,figNumber]=figflag(namestr);

if -existFlag, % Now initialize the whole figure... position=get(0,'DefaultFigurePosition'); position(2) = [50]; position(3:4)=[400 300]; figNumber=figure(... 'Name'.namestr,... 'NumberTitle','off,... 'BackingStore','off,... 'Position',position); axes(... 'Units','normalized',... 'Position',[0.05 0.05 0.70 0.95],... 'V isible','off,... 'DrawMode', 'fast') ;

%=

102

% Information for all buttons labelColor=[0.8 0.8 0.8]; yInitPos=0.90; top=0.95; bottom=0.05; left=0.80; btnWid=0.15; btnHt=0.10; % Spacing between the button and the next command's label spacing=0.04;

% The CONSOLE frame frmBorder=0.02; yPos=0.05-frmBorder; fimPos=[left-frmBorder yPos btnWid+2*frmBorder 0.9+2*frmBorder]; h=uicontrol( ... 'Style','frame',... 'Units','normalized',... 'Position',fraiPos,... 'BackgroundColor',[0.5 0.5 0.5]);

%=

% The CLOSE button labelStr='Close'; callbackStr='close(gcf)'; closeHndl=uicontrol( ... 'Style','pushbutton',... 'Units','normalized',... 'Position',[left bottombtnWid btnH t],... 'String',labelStr,...

103

'Callback',callbacks tr); end;

cla reset; set(gca,'DrawMode','fast'); axis off;

104

