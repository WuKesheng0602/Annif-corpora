t.pA
~,,~

HIGH LEVEL SYNTHESIS DESIGN FLOW FOR' MULTI PARAMETRIC OPTIMIZATION WITH HYBRID HIERARCHICAL DESIGN SPACE EXPLORATION

,+11)
z-'1~
2.0( 0

by

Zhipeng Zeng Bachelor of Electrical and Computer Engineering. Ryerson University, Canada, 2006

A thesis presented to Ryerson University

in partial fulfillment of the requirements for the degree of Master of Applied Science in the Program of Electrical and Computer Engineering

Toronto, Ontario, Canada, 2010 © Zhipeng Zeng 2010

PRQPfiIljV Of . RYERSON IMvRlt . . MY

Author's Declaration
I hereby declare that I am the sole author of this thesis.

I authorize Ryerson University to lend this thesis to other institutions or individuals for the purpose of scholarly research. Signature:

~

~

~

I further authorize Ryerson University to reproduce this thesis by photocopying or by other means, in total or in part, at the request of other institutions or individuals for the purpose of scholarly research.

Signature:

iii

Abstract
Thesis Title: High Level Synthesis design flow for Multi parametric optimization with Hybrid Hierarchical Design Space Exploration Submitted by: Zhipeng Zeng, Master of Applied Science, Electrical and Computer Engineering Program 2010 Directed by: Reza Sedaghat, Electrical and Computer Engineering Department, Ryerson University

High Level Synthesis (HLS) ·has definitely bridged the pathway between the Electronic System Level (ESL) and its respective structural block at the Register Transfer Level (RTL). However, the most critical task during HLS is to assess and find a superior architecture from the design space that meets the design objectives. This thesis introduces a novel mechanism for efficient Design Space Exploration (DSE) based on Priority Factor using the Fuzzy search technique to achieve the optimum result. This novel approach is more efficient than traditional DSE approaches and is capable of drastically reducing the number of architectural variants to be assessed for architecture selection. The proposed method, when applied to a number of benchmarks, yielded improved results with remarkable speedup compared to the existing approach. The HLS design flow shown in this thesis uses the proposed approach for DSE with optimization of three parameters, hardware area, execution time and power consumption.

iv

Acknowledgements

I would like to thank very much Dr. Sedaghat and Optimization Problems Research and Applications Laboratory (OPR-AL) members for their continuous contribution and support.

I would also like to express my appreciation to my friends for understanding me and encouraging me to pursue my goal.

I am indebted to my parents and my sister for their constant love and support.

v

Table o,f contents
Abstract .......................................................................................................................................... iv Acknowledgements ......................................................................................................................... v Table of contents ............................................................................................................................ vi List of Tables ................................................................................................................................. ix List of Figures ................................................................................................................................. x Nomenclature ................................................................................................................................ xii Chapter 1 Introduction .................................................................................................................... 1 1.1 Overview on High L.evel Synthesis ................................................................................... 1 1.2 Related Work on Design Space Exploration ..................................................................... 5 1.3 Summary of Contribution .................................................................................................. 6 1.4 Organization of Thesis ...................................................................................................... 7 Chapter 2 Proposed Mathematical Frameworks For Design Space Exploration ............................ 9 2.1. Hardware Area Analysis of the Resources ..................................................................... 10 2.2. Analysis for Ti me of Execution ..................................................................................... 12 2.3. Analysis for Power Consumption ................................................................................... 16
vi

2.4. Organize Design Space with Priority Factor Values ...................................................... 19 Chapter 3 Proposed Theory for Fuzzy Searching Technique for DSE ......................................... 20 3.1 Theoretical Overview on Fuzzy Logics and Fuzzy Set Theory ...................................... 20 3.2 Building the Fuzzy Set .................................................................................................... 21 3.3 Approach to the Border Variant in the Arranged Design Space ..................................... 23 3.3.1 Approach to a Larger Value in an Increasing Trend Line ............................................ 23 3.3.2 Approach to a Larger Value in a Decreasing Trend Line ............................................. 25 3.3.3 Approach to a Smaller Value in an Increasing Trend Line .......................................... 26 3.3.4 Approach to a Smaller Value in a Decreasing Trend Line ........................................... 28 3.4 Pseudo-code for the Proposed Fuzzy Search ................................................................... 29 Chapter 4 The High Level Synthesis Design Flow Design Flow ................................................. 32 4.1. Problem Formulation and Technical Specifications ...................................................... 34 4.2. Problem Formulation and Description ........................................................................... 35 4.3. Presentation of Variants in the Design Space ........................... ~ .................................... 36 4.5. Calculation of the Priority Factor for Available Resources and Arrangement of Design Space in Increasing Order for Area Parameter.. .............................................................. 37 4.6. Fuzzy Search Technique for the Determination of the Border Variant for Area Parameter ......................................................................................................................... 39
vii

4.7. Calculation of the Priority Factor for Each Available Resource for Execution Time Parameter ......................................................................................................................... 42 4.8. Determination ofthe Border Variant for the Time of Execution Parameter .................. 45 4.9. Determination of the Pareto-optimal Set of Design Architecture .................................. 48 4.10. The Scheduling of Operations through the Sequencing Graph for the Best Variant Obtai ned .......................................................................................................................... 50 4.11. Determination of the Multiplexing Scheme ................................................................. 54 4.12. Development of the System Block Diagram ................................................................ 56 4.13. Development of the Centralized Control Unit ............................................................. 58 4.14. Schematic Structure Development for the Whole System and Verification ................ 59 Chapter 5 Experimental Results and Analysis .............................................................................. 62 Chapter 6 Conclusion And Future Work ...................................................................................... 69 6.1 Conclusion ....................................................................................................................... 69 6.2 Future work ..................................................................................................................... 70 Publications ...................................................................................................70 References ................................................................................................................................... 712

viii

List of Tables
Table 4. 1 System Specifications .................................................................................................. 34 Table 4. 2 The variants obtained for area when fuzzy search technique was applied .................. 42 Table 4. 3 The variants obtained for execution time when fuzzy search technique was applied 47 Table 4.4 Multiplexing table for resource adder/sub (AI) .......................................................... 55 Table 4.5 Multiplexing scheme for multiplier resource (MI) ..................................................... 55 Table 4. 6 Multiplexing scheme for multiplier resource (M2) ..................................................... 56 Table 4. 7 Timing specification of data path ................................................................................ 59 Table 5. 1 Comparison of Fuzzy search technique with binary search technique when they are applied to the hierarchy configuration tree during DSE............................................... 63 Table 5. 2 Experimental results of the proposed hybridized DSE approach compared with the current approach ............................................................................. ~: ............................ 66

ix

List of Figures
Figure 4. 1 The high level design flow for mUlti-parametric optimization requirement using the proposed DSE approach .............................................................................................. 33 Figure 4. 2 Design space with all possible resource combinations .............................................. 37 Figure 4.3 Hierarchy Configuration Tree for area ....................................................................... 39 Figure 4. 4 Hierarchic Configuration Tree for execution time .................................................... 44 Figure 4. 5 Hierarchic Configuration Tree for power consumption ............................................. 49 Figure 4. 6 Data Flow Graph ........................................................................................................ 51 Figure 4. 7 Timing diagram for the schedule obtained for best variant ........................................ 51 Figure 4. 8 Sequencing graph with binding information .............................................................. 52 Figure 4. 9 Sequencing graph with data registers showing the portion of pipelining .................. 53 Figure 4. 10 Block diagram ofthe Data path circuit.. ................................................................... 57 Figure 4. 11 Schematic view of the system (Xilinx ISE 9.2i) ...................................................... 60 Figure 5. 1 Comparsion of different search techniques ................................................................ 64 Figure 5. 2 Comparison of different approaches .......................................................................... 67 Figure 5. 3 Simulation results for the implement filter. ................................................................ 68

x

Figure 5.4 Final routing of the chip (Cadence encounter SoC) .................................... 68

xi

Nomenclature
A Ri
Rclk

Total Area of the resources The resources available for system designing The clock oscillator used as a resource providing the necessary clock frequency to the system

NRi KRi
WL L

The number of resource Ri The area occupied per unit resource 'Ri' Workload to finish all the tasks Latency of execution Cycle time of execution Number of data elements to be processed Number of clock cycles needed by resource 'Ri' Time period of the clock Power consumed per area unit resource at a particular frequency The transfer function of the filter in the frequency domain The constraint for Power Consumption The constraint for Execution Time

Tc N TRi Tp pc
H(z)

P optimal T
optimal

xii

·
Vi

N umber of variants 'i' Total power consumption Total execution time Membership value of variant v Membership value of the border variant Variant's value for a parameter (e.g. area, power and execution time) The maximum possible value for a certain parameter The minimum possible value for a certain parameter Border variant's value for a certain parameter

P
Texe 'tv
1:8

Vvariant Max Min Vvariant

xiii

Chapter 1 Introduction
1.1 Overview on High Level Synthesis
High level synthesis (HLS) is the process of translating the behavioral algorithmic description into a structural building block which realizes the algorithm. During the HLS, the hardware circuit generated from behavior description (as opposed to structure description) consists of a structure composition of data paths, control and memory elements. Therefore, HLS is also known as a transformation from the behavior to structure [1]. HLS can be broadly classified into five major stages: The first stage is the description of the digital system in the form of an algorithm. The second one is the conversion of the abstract behavioral description of algorithm into a sequencing graph or data flow graph. Next is the allocation of the resources for the digital system. The next phase is responsible for allocating many units in the design: the
1

functional units to execute the operations, storage units to store temporary data, and multiplexers/demultiplexers to switch configuration according to the data flow. The final stage is the interconnection of these structural units using the data transfer information obtained from the sequencing graphs. HLS offers many advantages, such as the productivity gains and the efficient design space exploration. One of the reasons is that performing design space exploration (DSE) at a higher level of abstraction is more profitable than at a lower level of abstraction, or at transistor level. Traditional high level synthesis design methodology is much simpler than modem techniques. The first step of the synthesis involves compiling the behavioral specification into an internal representation. The second step is to apply the high level transformation techniques in order to optimize the behavior as per the desired performance. To realize the structure, the final step is to perform scheduling. Scheduling involves not only the determination of the time at which each operation is executed but also the allocation, which is
~ynthesizing

the necessary hardware to perform the operations [26J. Scheduling can have two

divisions: time constrained scheduling and resource constrained scheduling. Time constrained scheduling refers to finding the schedule with minimum cost and the same time. The schedule also needs to satisfy the given set of constraints with the given maximum number of control steps. In contrast, resource constrained scheduling refers to finding the fastest possible schedule that satisfies the given set of constraints with the given maximum number of resources. Resource constraints are generally specified by the area occupied by the functional units such as adders/sub-tractors, multipliers, dividers and ALUs. Although the data path of the system

2

consists of registers and interconnections, they are not considered to be included as resource constraints [19J. For modern multi objective Very Large Scale Integration (VLSI) and System-on-Chip (SOC) designs, analyzing the huge design space has become increasingly significant for translating the algorithmic description of the application into its respective architecture within a reasonable and manageable amount of time. Traditional high level synthesis flow may not suitable for the modern generation of complex VLSI and SOC designs because the conventional design flow takes into account the optimization of two parameters i.e. area and latency. However, the new generation of the system designs requires multi parametric optimization strategies in HLS while simultaneously utilizing rapid and efficient DSE approaches to find the best suitable architecture. This conversion from the algorithm to architecture is known as high level synthesis. This process of translating the algorithmic description into its respective architectural building block involves many interdependent subtasks such as scheduling, allocation and module selection. Therefore, the problem of searching the optimum solution within the huge design space is certainly the conflict between the quality of concurrently optimizing all the selected parameters and the time spent in exploring the huge design space [26]. Furthermore, the complex design space, consisting of numerous functionally equivalent design points, must be analyzed appropriately to meet all the design objectives and the constraints specified as system requirements. For example, portable appliances such as laptops, Personal Digital Assistant (PDA) and MP3 players consisting of embedded applications require high throughput. Embedded applications widely used in the high-end segments i.e. Application

3

Specific Integrated Circuits (ASICs) for hardware routers and server CPUs require high perfonnance with limited hardware resources. These computation intensive applications should work under certain operational timing constraints at the expense of minimum power consumption. Moreover, such computation intensive applications used in portable devices should also consume minimal power as they operate in power constrained environments. The tradeoffs linked to the choice of architecture selection during DSE must be addressed in order to find a balanced architecture that satisfies all contradictory conditions of the perfonnance requirement
[2].

The multi objective design space exploration approaches which are used for tuning the SOC architectures, evaluate sets of different parameters such as latency, area, power, throughput etc. for the target application. These perfonnance requirements vary according to the application requirements. Moreover, recent advancements in the areas of communications and multimedia have led to the growth of a wide array of applications, which require heavy data processing at minimal power expense, at the same time, with limited hardware resources. Such systems require hardware solutions that can satisfy multiple contradictory perfonnance parameters, for example, hardware resources, power consumption and time of execution. An efficient design space exploration strategy is therefore highly critical for, the next generation of communication and embedded multimedia platfonns.

4

1.2 Related Work on Design Space Exploration
Many researchers have addressed the problem of efficiently exploring the architecture design space due to time-to-market pressure conditions. According to the work done in [3], which is based on Pareto optimal analysis, the design space is arranged in the form of an Architecture Configuration Graph (ACG) for architecture variant analysis and optimization of performance parameters. Although the results obtained through that method prove quite promising for architectural synthesis of digital systems, the results lacks efficient searching techniques. The problem of obtaining a comprehensive Pareto optimal set is addressed in [4], which suggest the order of efficiency to assist in determining preferences between the different Pareto optimal points. An evolutionary algorithm, namely the Genetic Algorithm (GA) has also been suggested in [5] as a framework for DSE of data paths in high level synthesis. GA is used to concurrently search the space of data path schedules and module/storage selection. An indirect chromosome representation is combined with an efficient heuristic method to derive a· solution for chromosome decoding. Moreover, using an evolutionary algorithm in DSE, researchers in [6] successfully evaluate the design for an application specific SOC. Furthermore, authors in [7] and [8] described another approach for DSE in high level systems based on binary encoding of the chromosomes. Again in [9] the GA has been suggested for design space exploration process to yield better results with different encoding technique for creating chromosome. In addition to the above design space exploration methods, many different optimization techniques exist which provide ESL design space exploration, namely CHARMED [10], MILAN

5

[2] and Sesame [11]. Several published works in the area of DSE use optimization techniques that consider different objectives, as [12] [13] [14]. Furthermore, authors in [15] propose a heuristic approach based on Pseudo Boolean solvers (PB solvers) and a complete multi-objective
PB solver based on their backtracking algorithm. Moreover, in [16], authors present an overview

of the Artemis workbench, which provides modeling and simulation strategies for efficient performance evaluation and exploration of heterogeneous embedded multimedia systems. Additionally, authors in [17] developed a model that can assist designers at the system-level DSE stage to explore the utilization of the reconfigurable resources and evaluate the relative impact of certain design choices. Finally, authors in [18] aim to design multi-processor system-on-chip architectures for a given multi-task signal processing application, which would minimize system cost while satisfying the real-time constraints. The approach proposed in this thesis solves the problem of multi objective DSE by introducing an efficient framework based on priority factor f!1ethod and fuzzy search technique which is unique in itself.

1.3 Summary of contribution
This thesis introduces a novel design space
expl~ration

approach during high level synthesis

for a multi parametric optimized high level synthesis design flow. The proposed approach finds the accurate architectural variant in a very short exploration time and the multi-parameters are optimized by satisfying the provided operating constraints. The overall contribution can be summarized as follows:
6

·

Developed the mathematic model in order to arrange the design space in increasing order for area

·

Developed the mathematic model in order to arrange the design space in increasing order for power consumption

·

Developed the mathematic model in order to arrange the design space in decreasing order' for execution time

· · ·

Developed a searching technique based on Fuzzy Theory Created the interconnection of the different block components Produced control signals for different circuit components so that they can cooperate with each other

·

Created the whole system's circuit diagram and chip layout

The results of the proposed DSE approach when tested on various established HLS benchmarks yielded superior results compared with a current DSE approach for optimization in
HLS.

1.4 Organization of the Thesis
After the brief theoretical background on high level synthesis and the introduction of the related work on DSE in high level synthesis, the theoretical background related to the thesis will be introduced in the next chapter. Chapter 2 describes in detail the proposed mathematical

7

framework for DSE. The proposed fuzzy search technique is presented in Chapter 3. Chapter 4 presents the high level synthesis design flow with the use of the proposed DSE approach while Chapter 5 analyzes the proposed DSE approach and also discusses the implementation of the design flow using the proposed DSE method on FPGA. Finally. the thesis is concluded in Chapter 6.

8

Chapter 2 Proposed Mathematical Framework for Design Space Exploration
The proposed framework provides the foundation for the design space exploration approach and the HLS design flow. The process of exploring the design space is very tedious and time consuming for the designer. It demands great accuracy and elaborate analysis to determine the optimum design configuration. Therefore, the exploration of the best design variant in an extensive design space within a short period of time is extremely significant. The mathematical framework behind the proposed DSE approach is discussed in the coming section followed by the application of this DSE approach on a real example during HLS.

9

2.1. Hardware Area Analysis of the Resources
Let the total area of the resources be given as 'A'. Ri denotes the resources available for system; where 1<kn.

R:1k refers to the clock oscillator used as a resource providing the necessary clock frequency
to the system. The total area can be represented as the sum of all the resources used for the designed system. Hence total area can be given as:
1\

L

A(Ri)

(2.1)

The area can be expressed as the sum of the resources i.e. adder/subtractor, multiplier, divider, and also the clock frequency oscillator. Therefore, for a system with 'n' functional resources equation (2.1) can also be represented as:
(2.2)

/ represents the maximum number of the resource 'Ri' and 'KR/ represents the area 'NR
occupied per unit resource' Ri' (1 <=i<=n). Applying partial derivative to equation (2.2) with respect to (2.3), (2.4) and (2.5) respectively as shown below:
NRh NR2 ···· NRn

yields equation

(2.4)

10

~=K aN Rn Rn

(2.5)

According to the theory of approximation by differentials [20], the change in the total area can be approximated by the following equation in (2.6):

Substituting the equations (2.3), (2.4) and (2.5) into equation (2.6) yields equation (2.7):

dA =

(!:Nm . KRJ)

+

(!:NK1.' K{(l)

+ .·. +

~n'~n

+

M(~IJ

"-y--'
The change of the area contributed by resource RI

"-y--'
The change of the area contributed by resource R2

"-y--'
The change of the area contributed by resource Rn

"--y--'
The change of the area contributed by resource clock

t

t

t

t

The above equation indicates the rate of change of the area with respect to the change in the number of the resource Rl, R2 .... , Ro. In this analysis the clock oscillator is also considered as a resource which contributes to the area occupied by the hardware resources. The term priority factor will be used often during the process of exploring the design space in the proposed approach. The priority factor is a determining factor which helps to judge the influence of a particular resource on the variation of the optimization parameters namely area, time of execution and power consumption. This priority factor will be used to organize the architecture design space consisting of the variants in increasing or decreasing order of magnitude. The priority factors for area for the resource RJ. R2 ..... Ro are defined as:
11

PF(RJ) = ilN RI · K Rl
NRI

(2.9)

PF(R2) = ilN R2 · K R2
NR2

(2.10)

(2.11)

PF(Rclk) = M(Rclk) N Rdk

(2.12)

The factor defined above determines how the variation in area is affected by the change in the number of certain resources. Hence, the priority factor reflects the rate of change of area with respect to the change in number of resources.

2.2. Analysis for Time of Execution
The term 'workload' of a resource can be defined as the time taken (or clock cycles needed) by each resource to finish its assigned operation during scheduling. Hence the total workload (WL) of all the resources for finishing their respective operations can be represented by (2.13):
WL = (N RI
· TRI

+ N R2 · TR2 + .... + N Rn · T Rn)

(2.13)

Where NRi represents the number of resource 'Ri' and 'TRi' represents the number of clock cycles needed by the resource 'Ri' (l<=i<=n) to finish each operation. 12

The execution time is directly proportional to the product of 'the number of times the data elements needs to be processed' and the 'workload' of all the resources. Hence, T.u
ex

(D· WL) ,

where '0' is the number of times the data elements need to be processed for all sets of data. Furthermore, the execution time is also directly proportional to the clock period of the system. Hence we can say that:
TeX<! =K·D·WL·Tp

(2.14)

Where, K is the proportionality constant. Substituting (2.13) in (2.14) gives (2.15): (2.15) From the theory of approximation of differentials the change in execution time is approximated in (2.16). (2.16)

Now, applying partial derivative to the (2.15) with respect to NRL .... NRn and Tp will produce the following set of equations:
aT",
III

-- =

aN

a[(N III' TNI + N R2 ·TR2 + ... + N lin' TRn )· Tp' D· K] _ - Till' T . D· K aN Nl p

(2.17)

_aT_<._" ;:; _a[_(_N.:.;..Rl:...-·_T~Nl_+_N-.:.:.::1I2:...-·_T~R2:...-+_._ ·· _+_N....;.N_n_.T-cR_")_'-,,-_ _ (JN R2 iJN R2

13

(2.18)
irr.u _ d[(NR1·TRI +NR2 + ... +N Rn ·TR.)·Tp·D·K] iJTp aTp

=(N III. · TNl + N R2 · TR2 + '" + N Nn . TRn ) · D . K

(2.19)

Now, substituting (2.17) (2.18) and (2.19) into (2.16). The substitution yields the following (2.20):

(2.20) Equation (2.20) represents the change in the total execution time with respect to the change in the number of all the resources and the clock period (clock frequency).
t:;N RI
· TRI

·n· K = The

change of 'Texe' contributed by the change in the number of

resource Rl. Similarly,
t:;N Rn · TRn · D· K

= The change of 'Texe' contributed by the change in the number of

. resource Rn. Finally,
!1Tp . (TR1 ·NR1 +TR2 ·NR2 + ... +TRn ·NRn)·D·K

= The

change of 'Texe' contributed by the

change in clock period (clock frequency). The priority factor for the 'time of execution' parameter can be defined as it was defined for the area parameter. Therefore, the priority factor' for the 'time of execution' parameter in this chapter is defined as follows: 14

PF(Rl)

(2.21)

PF(Rn )

MY ·T Rn Rn .(T )""" P N Rn

(2.22)

(2.23) The factors defined above reflect the impact on the average change in the execution time (Texe) with the change in the number of resources. 'D' and 'K' are not included in the expression for the priority factor because they are constants for different resources, and the values of 'D' and 'K' do not affect the order in which the proposed theory organizes the design space for the' execution time. The priority factor yields a real number, which suggests the extent to which the change in the number of that particular resource contributes to the change in the execution time. For example, if the priority factor value for R 1 is larger than the priority factor value for R2, the execution time will be more sensitive to the change of the number of resource R 1 than the change of the number of resource R2.

15

2.3. Analysis for Power Consumption
For a system with on' functional resources the total power consumption (P) of the resources in a system can be represented by the following equation (2.24):

P=

L (N
i=1

n

Ri ·

K R)' Pc

(2.24)

(2.25) where 'NR / represents the number of resource 'Ri' as mentioned before. 'KR/ represents the area occupied per unit resource 'Ri' (1 <=i<=n) and 'Pc' denotes the power consumed per area unit at a particular frequency of operation. Using the theory of approximation of differentials, the change in the power consumption can be formulated as shown in equation (2.26) :

dP=(-·t/II +_.t/II + ...+-t/II )+An . -

ap

ap

ap

dN

RI

RI

aN

K1

K1

dN

Rn

'-+'c

Rn

ap ap
c

(2.26)

Now, applying the partial derivative to equation (2.25) will produce the following equations: (2.27)
R,

aN

RI

aN

aN R2

aN R,

16

(2.28)

ap = a[(N
dpc

RI ·

KIIJ +NR2 · KR2 + ... + N R·· KRn )· Pc]

(2.29)

apc

(2.30) Substituting the equations (2.27), (2.28) and (2.30) in equation (2.26) yields the following equation (2.31):

(2.31) Equation (2.31) represents the change in the total power consumption with respect to the change in the total number of all the resources and the clock period (clock frequency).
!::.N RI · KRI · Pc = The change of 'P' contributed by the change in the number of resource R 1;

Similarly,
!::.NRn · K Ro · Pc = The change of 'P' contributed by the change in the number of resource Rn;

Finally,
Ap, . (K RI · N HI + KHZ' N H2 + ... + K
Hn ·

N Ho)

=The change of 'P' contributed by the change in clock

period (clock frequency).

PF(RI)

=!::.N KHI '(Pc)1lW<
HI' NHI

(2.32)

17

(2.33)

PF(Rclk)

N RI · TRI

+ N R2 :R2 + .. + N Rn . TRn
R""

. (flpc)

(2.34)

The priority factors defined above from equations (2.32) to (2.33) indicate the average of change of the total power consumption with respect to the change in the number of resources. For example, equation (2.32) indicates the average of change of the total power consumption of the system when the number of resource RI changes (e.g. change in number of adders/subtractors from one to three). The priority factor helps to arrange the architectural variants of the design space in increasing order of magnitude for the parameter of the power consumption. This arrangement further helps the selection of the optimal design point that satisfies all the operating constraints and optimization requirements specified.
~

The priority factor yields a real number, which suggests the extent to which the change in the

number of a particular resource contributes to the change in the total power consumption for the system. The calculated priority factor will be used later in the determination of the arrangement of the design space.

18

2.4. Organize Design Space with Priority Factor Values
The priority factors are a measurement of the change in different parameters (e.g. area, execution time, power consumption, etc.) with respect to the change in the number of certain resources. The larger the priority factor value for a resource is, the more the resource affects the parameter. Therefore, we can arrange the design space in a form of hierarchic format according to the priority factor values. The resource which affects the parameter the most is assigned to the top of the hierarchic structure, while the resource which affects the parameter the least is located at the bottom of the hierarchic tree. The configuration tree can be build according to the priority factor value of different resources for the parameters such as area, execution time, and power consumption. The resource that has the highest priority factor value will stay on the root of the tree and the resource that has the lowest priority factor value will be the bottom of the hierarchic configuration tree. With that kind of arrangement, the variants will be automatically arranged in certain order (either increase or decrease order).

19

Chapter 3 Proposed Theory for Fuzzy Searching Technique forDSE
3.1 Theoretical Overview on Fuzzy Logics and Fuzzy . Set Theory
. The focus of this section is on the proposed theory of fuzzy search technique for design space exploration in high level synthesis. Before deducing the functions of fuzzy search for design space exploration, the general concept behind the proposed theory shall be explored. In the proposed theory, a membership value shall be assigned to each respective element of the set. Compared to the traditional search technique using binary search algorithm, the proposed fuzzy search technique produces the appropriate result within a very short time during DSE. The aim of this chapter is to emphasize the importance that the use of fuzzy search can have in decision 20

making during DSE and how it can help in drastically reducing the architectural variants to be analyzed for architecture selection. The fuzzy set theory involves manipulation of the fuzzy linguistic variables [21]. The basic difference between the fuzzy set and classical theory is that in fuzzy set theory every elementxE U is assigned to the value from the interval [0, I] while in the classical set theory the _ assignment is from the values of two element set

to,

I}. In fuzzy set theory, the characteristic

function is generalized to a membership function that assigns every element 'x' a membership value. The membership function J.1F of a fuzzy set F is a function of the following:
flF : U ~ [0,1]

3.2 Building the fuzzy set·
A graphical representation of the proposed approach takes into consideration that architectural variants in the architectural design space are already organized in increasing or decreasing order. These architectural variants of the design space will be represented in the form of a fuzzy set where each variant will have a certain assigned membership value based on the characterized membership function as shown later. The membership value will be assigned to each variant, while the values of the design space variants are organized in either increasing or decreasing from the left to the right extreme of the fuzzy set. In this theory, only the extreme elements' actual values (which are the minimum and the maximum values or maximum and 21

mini~um

values) are calculated at the beginning. The membership value of the variants between

the two extremes will be considered to be directly proportional (sorted increasing order or sorted decreasing order) to the position of the variants in the sorted arrangement. Therefore, the membership value of a variant can be calculated by the equations (3.1) or (3.2) for design space arranged in increasing or decreasing orders of magnitude:

'!=--

x-a

fi-a

(3.1)

Or,

'!=--

x-p

a-fi

(3.2)

The actual value of the variant is assumed to be proportional to the position of the variant in the sorted arrangement. In equation (3.1) and (3.2), 'x' is the position of the variant;
'T'

presents

the membership value of the variant which is the xth element in the sorted arrangement; 'u' and 'Ware the order of the first element and the last element in the same sorted arrangement. Thus, 'u' is equal to 1 and 'W is equal to the total number of variants in the sorted arrangement. The above function represents a straight line which will aid in finding the border variant, e.g. the first variant which satisfies the execution time constraint and the last variant in the arranged design space which satisfies the specified constraint for area/power. In all the figures, the x-axis refers to the architectural variants of the design space and the yaxis refer to the actual values and its membership values respectively. orB' is the membership value of the border variant for the parameter in the architecture space. Similarly, membership value for the variant under test and 22
VVarianl 'TV'

is the
'TMin'

is its respective value. Similarly,

and ''tMax.' are the membership values for the minimum and maximum variants in the architecture space, while 'Min' and 'Max' are their respective values. The increase in trend line for area
Ipower consumption and the decrease in trend line for execution time from left to right extreme

of the design space are represented by membership value of each variant. Therefore the actual value of each variant is directly proportional to its associated membership value. An algorithm has been developed to search for the border variant with the given actual value. The graphical representation of this algorithm is shown in Figures 3.1 to 3.4.

3.3 Approach to The Border Variant in The Arranged Design Space
3.3.1 Approach to A Larger Value in An Increasing Trend Line
The trend line shown in Figure 3.t represents the increase in membership value variants in the design space for the area/power parameters. The membership values in this theory are calculated by applying equation (3.1). After the design space is arranged in increasing order by determining the priority factors, the membership values of each variant are also arranged in increasing order. The actual values of the variants in the design space are directly proportional to the membership values of those variants.

23

Membership value I
TMax

Actual values Max R

- - - - - - - - - - - - - - - - - - - -

i i 4 t - - - + - - - - - - I Y Sorder

jI'---+-------lIVVarianl

Min · ~--~~----~~-----~~ VI :....--...: V 2 V. A Architectural variants

:Q

s

Figure 3.1 Graphical representation of the algorithm for area/power for searching a greater value in the design space

In Figure 3.1, membership value increases for a specific parameter (e.g. actual area increase in the arranged design space). The actual value is approximated by the straight line (OR) drawn from origin (0) to the maximum (R). 'V2' is the border variant with the actual value (e.g. for area/power) VBorder. The goal here is to search for V2 with VBorder given. 'M' refers to the point in the line (OR) with membership value
1'8

which is obtained from the border value (VBorder). 'VI'

indicates the initial variant obtained from 'M'. 'P' is a point in the straight line corresponding to the actual variant value (VVariant) of 'V 1'. If the variant value (V Variant) is less than the value of border variant (VBorder. which could be the value of area/power for V2), then the search should be performed between the points 'P' and 'R'. A second straight line (PR) is drawn to approximate the increasing values for area/power parameter. In this straight line, point 'N' corresponds to the

24

actual area/power value of variant V2. Therefore, the following function (3.3) can be easily derived.

(3.3)

3.3.2 Approach to A Larger Value in A Decreasing Trend Line
The trend line shown in figure 3.2 represents the decrease in the membership values variants in the design space for execution time parameters. The membership values in this theory are calculated by applying equation (3.2). After the design space is arranged in decrease order by determining the priority factors, the membership values of each variant are also arranged in decrease order. The actual values of the variants in the design space are directly proportional to the membership values of those variants.

In figure 3.2, the membership value decreases for the execution time in the arranged design
space. The actual execution time decrease is approximated by the straight line (RU) drawn from the maximum (R) to the minimum (U). 'V2' is the border variant with the value (e.g. for execution time)
VBorder.

'M' refers to the point in the line (RU) with the membership value
(VBorder).

1"8

which is obtained from the actual border value

'VI' indicates the initial variant

obtained from 'M'. 'P' is a point in the straight line corresponding to the actual variant value

25

(V Variant) of variant 'V 1'. If the variant value (VVariant) calculated is less than the value of the boarder variant (VBorder, which is the value of execution time of V2), then the search should be performed between the points 'P' and 'R'. A second straight line (PR) is drawn to approximate the decreasing values for the execution time parameter. In this straight line, the point 'N' corresponds to the actual execution time value of variant V2. Therefore, function (3.3) can still be used.

Membership value

Actual values Max

R

Tv~------~~--.

s

Q

~------~---~~~--------~. V.......--..· VI
2

in

~

Architectural variants

Figure 3.2 Graphical representation of the algorithm for execution time for searching a greater value in the design space

3.3.3 Approach to A Smaller Value in An Increasing Trend Line
The trend line shown in figure 3.3 also represents the increase in the membership values of each variant in the design space for the area/power parameters. The membership values are

26

calculated according to equation (3.1). After the design space is arranged in increasing order by determining the priority factors, the membership values of each variant are also arranged in increasing order. The actual values of the variants in the design space are directly proportional to the membership values of those variants.
Membership value Actual values

-------------------TV

Max
R

TMjn-{F-----;v::::;::;::\;;------~

o

w
VI

~

V 2 : ..

A

II:

L1

Vn Architectural variants

Figure 3.3 Graphical representation of the algorithm for area/power for searching a lesser value in the design space

In figure 3.3, the membership value increases for a specific parameter, i.e. area/power. The actual value is approximated by the straight line (OR) drawn from origin (0) to the maximum (R). 'V2' is the border variant with value (e.g. for area/power) VBorder. The goal here is to search for V2 when V Border is given. 'M' refers to the point in the line (OR) with the membership value
1'B which is obtained from the actual border value (VBorder). 'VI' indicates the initial variant

obtained from 'M'. 'P' is a point in the straiglit line corresponding to the actual variant value
(V Variant) of variant 'V 1'. If the variant value (V Variant) is more than the value of boarder variant (VBorder), then the search should be performed between the points 'P' and '0'. A second straight 27

line (OP) is drawn to approximate the increasing values for the area/power parameter. In this straight line, the point 'N' corresponds to the actual border value of variant V2. Therefore, the following function (3.4) can be easily derived.
"Min - "V
"B -"V

= Min - Vvariant VBorder - VVariant

(3.4)

3.3.4 Approach to A Smaller Value in A Decreasing Trend Line
Similar to the previous sections, figure 3.4 represents the decrease trend line for execution time. The actual execution time is approximated by the straight line (RU) drawn from maximum (R) to minimum (U). 'V2' is the border variant with actual value (e.g. for execution time) VBorder. 'M' refers to the point in the line (RU) with membership value
1"B

which is obtained from the

actual border value (VBorder). 'Vi' indicates the initial variant obtained from 'M'. 'P' is a point in the straight line corresponding to the actual variant value (V Variant) of 'V 1'. If the variant value (V Variant) is more than the value of boarder variant (V Border, which could be the value of execution time for V2), then 'P' should located on the top on 'M', and the search should be performed between points 'P' and point 'U'. A second straight line (PU) is drawn to approximate the decreasing values for execution time parameter. In this straight line point 'N' corresponds to the actual border value of variant V2. Therefore, function (3.3) can also be used.

28

Actual values Max

o
1:Min=O

w
VI '..

· , ·
I I

I

~------------~--~~------~~

';'{

in U

..' V~ Vn A Arcnitectural variants

Figure 3. 4 Graphical representation of the algorithm for execution time for searching a lesser value in the design space

3.4 Pseudo-Code for The Proposed Fuzzy Search
In order to find the border variant efficiently, the pseudo-code for this fuzzy technique is described as follows: Procedure for searching for the border variant (Border) Step 1 Define the universe of discourse (The fuzzy set) Step 2 Identify and define the Linguistic variables Step 3 Assign the approximate membership values (1:) based on the function described in the equation (3.3) or (3.4) for each variant in the universe of discourse based on trendline for that parameter (increasing or decreasing).

29

Step 4 Calculate the initial membership value (t ini) based on the function:
. VBorder - Min = ---=-.;;",..;;...,.---

1:. .
In.

Max-Min
f

(3.5)

where

is the initial membership value corresponding to the border variant (V Border).

'Min' and 'Max' are the minimum and maximum value of the variants for that parameter. Step 5 Find the variant (V) closest to
'1'ini'

in the fuzzy set.

Step 6 Calculate the value of the variant "V', indicated by Vvariant Step 7 If Vvariant < VBorder then go to step 8, else go to step 10. Step 8 Solve the membership value (1'8) based on the following function:

Step 9 Jump to step 11. Step 10 Solve the membership value (fB) based on the following function:
T Mill -Tv

=

Min -

Vvarianl

Step 11 Look for the variant "V" which has the closest membership value to in step 8 or in step 10. Step 12 If variant 'V' has already been checked, then

'1'B'

calculated

30

{If Vvariant < V Border then look for the unchecked variant with the next higher membership value in the set, and jump to step 13. Else, if
Vvariant

>

VBorder

then look for the unchecked variant with the next lower

membership value in the set, and jump to step 13}

~Else, variant 'V' has not been checked then go to step 13
Step 13 Calculate the V variant. Step 14 If still the 'Border' is not found then repeat step 7. Step 15 End The above procedure successfully determines the border variant for a given performance parameter during searching in DSE. The border variants for area and power consumption indicate that the variant of architecture is the last variant in the design space (design space which is arranged in increasing order of magnitude) to satisfy the VBorder specified by the user. The border variant is the first variant in the arranged design space (design space which is arranged in decreasing order of magnitude) that satisfies the V Border specified by the user, for execution time.

31

Chapter 4
The High Level Synthesis Design Flow Design Flow
The proposed theory behind the framework for DSE will be applied in the upcoming sections. Additionally the fuzzy search method proposed in the previous chapter will be used as a method for searching the best architecture after our design space is organized in increasing or decreasing order based on the priority factor calculation. During the design flow for high level synthesis, three parameters are optimized: hardware area, time of execution, and power consumption. Optimization of multi parameters refers to searching the optimal variant of architecture in the design space that concurrently satisfies the various hard constraints provided, while minimizing the other metric specified in the design problem. Furthermore, variants which satisfy the stringent operating constraints are thereb.y optimized in terms of area overhead and execution time, as well as quantity of power consumed. The goal of the proposed DSE approach is to find the optimal variant of architecture which satisfies and thereby optimizes, all three

32

parameters of optimization specified. Figure. 4.1 shows the entire design flow for high level synthesis using the proposed DSE methodology.

I

T ech' mcal spec i fication

~
Problem fonnulation

User J specifications

j
Get the border design vector for Execution time

~
Create random design space in vectors for area

-

I .....

and constraints

Using Fuzzy search technique

I I
Using proposed approach for DSE

1) Determine the pareto-optimal set 2) Get the Best design vectors for power

I
i

I} Calculate Priority Factor (PF) for each available resource 2) Arrange the obtained PF in increasing order of magnitude

!

J
Sequendng graph and binding graph Scheduling algorithm

.
-::;/

J
SBG with data registers Using proposed algorithm Multiplexing scheme

Arrange the vector design space in increasing order according to the priority order determined

!
!

I
J

II
Using Fuzzy search technique

System block diagram of the data path

Get the border design vector for area

l
I) Calculate PF for each available resource 2) Arrange the obtained PF in increasing order of magnitude

Centralized control unit Determination of timing specifications

f-

Using proposed approach for DSE

,...
Schematic description

j+-

!
Arrange the vector design space in decreasing according to priority order

RTI
LEVEL Using proposed algorithm

Simulation and implementation

~

-(FPGA AND ASIC)

I

.........

Figure 4. 1 The high level design flow for mUlti-parametric optimization requirement using the proposed DSE approach

33

The main idea of the design flow is to first find the optimum configuration architecture of the design, then ailocate resources and interconnect different components. Specific details of the design flow will be introduced in this chapter section by section.

4.1. Problem Formulation and Technical Specifications
Table 4. 1 System Specifications
1)

Maximum hardware area of resources: 160 area units (a.u)

2) Maximum time of execution: 200l1s (For lOoo sets of data)

3) Power consumption: Minimum.
4) Maximum resources available for the system design:

a) 3 Adderlsubtractor units. b) 3 Multiplier units c) 3 clock frequency oscillators: 24 MHz, 100 MHz and 400 MHz
5) No. of clock cycles needed for multiplier and adderlsubtractor to finish each operation: 4

cc and 2cc
6) Area occupied by each adderlsubtractor and multiplier: 12 a.u. and 65 a.u. on the chip

(e.g. 12 CLB on FPGA for adderlsubtractor)
.'

7) Area occupied by the 24MHz, lOOM Hz and 400 MHz clock oscillators are: 6 a.u., lO

a.u. and 14 a.u respectively.
8) Power consumed at 24MHz, lOOMHz ~nd 400 MHz: lOmW/a.u.,32 mW/a.u. and

100mW/a.u. respectively. 34

This stage marks the beginning of the high level synthesis design flow, beginning with the problem description and the technical specifications provided for the designer. The application should be properly defined with its associated data structure. This phase is critical for the designer and the operational constraints should be clearly defined along with the parameters to be optimized. These specifications act as the input information for the high level synthesis tools. To demonstrate the DSE approach through the design flow, assume the following real specifications for initiating the high level synthesis design flow as shown in Table 4.1.

4.2. Problem Formulation and Description
In the problem formulation stage, the mathematical model of the application is used to define the behavior of the algorithm. The model suggests the input/output relation of the system and the data dependency present in the function. In this chapter the digital IIR Chebyshev filter is used as an example benchmark to demonstrate the DSE method through a high level design flow. The transfer function of a second order digital IIR Chebyshev filter can be given as [22]:
II _Y(z)_ O.041(I+z-I)2 (z)- X(z) -1-L4418z-1 +O.6143z- 2

(4.1)

H(z) = Y(z) = O.041+0.082z- +O.041zX(z) 1-1.4418z-1 +O.6143z-2

1

2

(4.2)

y(n) == O.041x(n) +O.082x(n-l) +O.041x(n- 2) -O.6743y(n- 2)+ L44ISy(n-l)

(4.3)

35

Where x(n), x(n-l) and x(n-2) are the input vector variables for the function. The previous outputs are given by y (n-1) and y(n-2), while the present output of the function is given by yen). For simplicity, constants 0.041,0.082,0.6743 and 1.4418 are denoted by 'A', 'B', 'D' and 'E' respectively. While x(n), x(n-l), x(n-2), y (n-1) and y (n-2) are denoted by Xn, Xnl, Xn2, Ynl and Yn2 respectively. The conversion of the IIR filter function to its digital counterpart is not shown here as it can easily be performed by other well known procedures, namely bilinear transformation and impulse invariant techniques [22].

4.3. Presentation of Variants in the Design Space
Different variants in the architecture design space are represented in the form of vectors consisting of the resources available for the system. For example, Vn = (NRJ, N R2 , NR3 ) represents the architecture design space consisting of the resources R 1, R2, and R3. If we use R I, R2 and R3 to represent adders/subtractors, multipliers, and clock, then, the variables NRIt NR2 and NR3 indicate the number of adders/subtractors, multipliers and clock frequencies 3 accordingly. Therefore, according to the specificatio!1 in Section 4.1, values of NRI. NR2 and N R 2<=3, and l<=NR3 <=3. are as followed: 1<=N R1 <=3, l<=NR The design space which is shown in figure.4.2 represents the different combinations of available resources, which are adder/subtractor, multiplier and choice of clock. The following 36

section describes the methodology of calculation of the priority factor for area using the equations obtained in section 2.3. VI = (1,1,1) V2 = (1,2,1) V3 = (1,3,1) V4 = (1,1,2) V5= (1,2,2) V6= (1,3,2) V7 = (1,1,3) V8 = (1,2,3) V9 = (1,3,3) VIO= (2,1,1) VII= (2,2,1) VIZ: (2,3,1) V13 = (2,1,2) Vl4 = (2,2,2) VI5= (2,3,2) V16= (2,1,3) V17= (2,2,3) V18= (2,3,3) VI9= (3,1,1) V20= (3,2,1) V21= (3,3,1) V22= (3,1,2) V23= (3,2,2) V24= (3,3,2) V25= (3,1,3) V26= (3,2,3) V27= (3,3,3)

Figure 4. 2 Design space with all possible resource combinations

4.5. Calculation of the Priority Factor for Available Resources and Arrangement of Design Space in Increasing Order for Area Parameter
The priority factor calculation for area parameter is based on the theory introduced in section 2.1. According to the specification, there are three different types of resources: adderlsubtractor, multiplier and clock. Their priority factor values for area can be calculated as folJowing: For resource adder Isubtractor (R 1):

PF(RI)

=

A "

iJJV lit'

K

lit:::

(3 - 1) . I 2 3

=8
37

NRI

For resource multiplier (R2):

For resource clock oscillator (R3):
PF(Rclk) = M(Rclk)

= (14-6)
3

2.67

N Hell:

The above factors are a measurement of the change in area with respect to the change in number of certain resources. Here for example. the priority factor values for above different resources .indicate that the change in number of multiplier affects the change in the total hardware area the most, while the change in clock frequency from 24 MHz to 400 MHz influences the change in the total hardware area the least. Therefore, we can arrange the design space in a form of hierarchic format, where the resource which affects the parameter the most is located at the top of the hierarchic structure, while the resource which affect the parameter the least is located at the bottom of the hierarchic tree. The configuration tree can be build according to the priority factor value of different resources for area parameter. The resource that has the highest priority factor value will stay on the top of the hierarchic tree and the resource that has the lowest priority factor value will be the bottom of the hierarchic configuration tree. As the area parameter is concerned, the hierarchic tree will have R2 (multiplier) on the top, Rl (adderlsubtractor) in the middle, and R3 (clock) on the bottom since the priority
fa~tor

..

value for

Rl is the highest and the priority factor value for R3 is the lowest. Therefore, the final hierarchic configuration tree is shown in figure 4.3. 38

Based on the above priority factor calculations and hierarchic configuration tree, the variants in design space are organized in increasing orders of magnitude for total hardware area. For example, the arrangement starts from variant 1 on the left to variant 27 on the right, therefore, variant 1 has the lowest area value, and variant 27 has the largest area value. The arrangement of the design variants in increasing order helps to prune the design space for obtaining the border variant for area requirement in the following procedure.

4.6. Fuzzy Search Technique for the Determination of the Border Variant for Area Parameter

39
\

The presented fuzzy search technique is applied on the arranged design space. The design space shown in' figure 4.3 is arranged in increasing orders of magnitude from the left extreme to the right extreme. This arrangement helps to prune the design space in order to obtain the border variant for the area requirement. The membership values are calculated based on the equation
(3.1) since the area value increases from the left extreme variant (VI) to the right extreme variant

(V27). For example, the second variant in the hierarchy configuration tree for area is variant V4, therefore, the membership _value for area for V 4 is:
(2-1)

(27 -1)

0.038 ,since x =2,0.

= I, and P=27.

After the membership value for different variants were calculated, the universe of discourse for area which contains the membership value for area, can be represented by the set shown below. Large area set (/l d

=
{ 0 0.038 0.077 0.115 0.154 0.192 0.231 0.269 0.308 VI' V4 ' V7 'VlO ' Vl3 ' Vl6 ' Vl9 ' V22 ' V25 ' 0.346 0.385 0.423 0.462 0.500 0.538 0.577 0.615 0.654

V2'vs'Vs'Vil'

V14 ' V17 ' V20 ' V23 ' V26 '

0.692 0.731 0.769 0.808 0.846 0.885 0.923 0.962

I

}

V3 ' V6 · V9 ' Vi2 ' VIS' VI8 ' V21 ' V24 · V27

'Large area' is a linguistic variable for the set defined above, indicating that the membership value increases from 0 to 1 from the first element to the last element. After the large area set is built, the border variant can be easily found with the help of large area set. According to the specification provided for area,
40
VBorder

= 160 a.u. while Min = 83 a.u.

and Max= 245 a.u. (according to equation 2.1) are the calculated minimum and maximum values of the variants with the minimum and maximum resources respectively. According to step 4 of the proposed fuzzy search technique, the initial membership value
(T ini)

calculated based on the

values of Min and Max for area according to equation (3.5), is found as the following:
= 160-83 = 0.475 245-83

Tini

From the set f1L, it can be seen that the variant which has the membership value closest to 0.475 is the variant Vll whose membership value is 0.462. Therefore, the area value for Vll will be calculated in order to compare it with the border value. The area of V 11 turns out to be 160 a.u. which is not bigger than the border value. Hence, the search should continue in order to find a variant with larger area value compared to Vil. According to the pseudo-code in section 3.4, the equation (3.3) is applied and the next member ship value is calculated as 0.462. Therefore, V 14 is selected as the next variant whose area value will be compared with the border value. The area value of V14 is calculated as 164 a.u. which is larger than the border value. Therefore, the border variant is found to be Vll because Vll satisfies the area required, while the variant V14 which is just next to VII in the hierarchy configuration tree does not satisfy. It means that in the hierarchy configuration tree, the variants VI to VII satisfy area requirement and the rest should be ignored because they do not satisfy the area requirement. The detailed

Table 4. 2 The variants obtained for area when fuzzy search technique was applied
Equations for obtaining the calculated membership values Calculated membership values('t') Variants corresponding in the set according to the calculated '1:' Area Decision based on the VEIorder

1:j";

140-83 245-83 245-83 160-83

tioi=0.475

0.462IV11

All ==

2*12 + 2*65 + 6

= 160 a.u.
AI4

VBorder. search down in the design space
Stop

AII<=

1:8

1-0.462 -0.462

IS

=0.462

O.500NI4

= 2*12 + 2*65 + 10
== 164 a.u.

As shown in the table, the fuzzy search technique finds the border variant in just two iterations. The border variant obtained is variant 11. This value indicates the last variant in the space which satisfies the constraint for area requirement (V Border).

4.7. Calculation of the Priority Factor for Each A vailable Resource for Execution Time Parameter
After the border variant for area is found, similar procedure for the border variant for execution time can be carried. We can arrange the design space in a form of hierarchy configuration tree for execution time. The resource which affects the execution time the most is located at the top of the hierarchic structure, while the resource which affects the execution time the least is located at the bottom of the hierarchic tree. In order to create the hierarchy configuration tree for execution time, the priority factor value for different resources for execution time should be calculated first.
42

For resource adder/subtractor (Rt):

PF(Rl)

=llN

T
Rl'

RI

o(T )tnax
p

=

(3-1)·2

NRI

3

·(0.0416) =0.055

For resource multiplier (R2):
llN

PF(R2)=

R2' R2 .(T )m.. ;;
0

1":

NR2

P

(3-1)·4 ·(0.0416)=0.1109 3

For resource clock oscillator (Rclk):
(3·2+3·4)·(0.0416-0.0025) =0.2346 3

PF(R )= NR1·TR1 +NR2 ·TR2 . (AT ) = elk N P
Rc/Jc

The factors determined above indicate the extent of the change in execution time with the change in the number of a specific resource. For instance, since the priority factor value for adder/subtractor is the smallest and the priority factor value for clock is the largest, according to the above analysis the change in the number of adder/subtractor affect the change in execution time the least, while the change in clock frequency from 24 MHz to 400 MHz affect the change in execution time the most. Similarly, the change in execution time cost by the change in the number of multiplier is lesser than that cost by the change in clock frequency. On the calculation of priority factor, the minimum clock frequency is used because at this frequency the clock period is the maximum. Hence the change in the number of a specific resource at the maximum clock period influences the change in the cycle time the most, when compared to the change in cycle time at other clock periods.

43

After the calculation of priority factor for different resources, the hierarchy configuration tree can be build according to the priority factor value of different resources for execution time parameter. Similar to the configuration tree for area, the resource that has the highest priority factor value for execution time will stay on the top of the hierarchic tree and the resource that has the lowest priority factor value will be the bottom of the hierarchic configuration tree. As the execution time parameter is concerned, the hierarchic tree will have R3 (clock) on the top, R2 (multiplier) in the middle, and Rl (adderlsubtractor) on the bottom since the priority factor value for R3 is the highest and the priority factor value for Rl is the lowest (PF(R3, clock) > PF(R2, multiplier) >PF(Rl, add/sub». The final hierarchic configuration tree for execution time is shown in Figure 4.4.

~<)3

,1--

i

Figure 4. 4 Hierarchic Configuration Tree for execution time

44

Based on the above priority factor calculations and hierarchic configuration tree for execution time parameter, the variants in design space are arranged in decreasing orders of magnitude for execution time. For example, the arrangement starts from variant I on the left to variant 27 on the right, therefore, variant 1 has the largest value for execution time parameter, and variant 27 has the lowest value for the same parameter. This arrangement of the design variants in decreasing order helps to prune the design space for obtaining the border variant for execution time parameter requirement in the design space exploration process.

4.8. Determination of the Border Variant for the Execution Time Parameter
Similar to the search for the border variant for the area parameter, the search for the execution time parameter will be performed in the arranged design space for execution time. As explained in the last section, the design space is arranged in decreasing orders of magnitude for execution time as shown in figure 4.4. Therefore, the membership values of the variants for execution time can be calculated based on the equation (3.2). For example, the second variant in the hierarchy configuration tree for execution time is VlO, therefore, the membership value for execution for VI 0 is: (2 - 27) (1- 27)

=0.962, since x =2,

(l

= 1, and

P= 27.

45

After the membership value for different variant were calculated, the uni verse of discourse for execution time parameter which contains the membership value for execution time can be represented as: Small time of execution set (J.1s) = _I 0.962 0.923 0.885 0.846 0.808 0.769 0.731 0.692 VI' VIO ' V19 ' V2 ' Vll ' V20' V3 'V12 ' V21 ' 0.654 0.615 0.577 0.538 0.500 0.462 0.423 0.385 0.346 --v-4' Vl3 ' V22 V14 ' V23 '-v6' VI5 ' V24 ' 0.308 0.269 0.231 0.192 0.154 0.115 0.077 0.038 ~ }

{

'vs'

V7 ' Vl6 ' V25' V8 ' VI7 ' V26 ' V9 ' VIS' V27

The 'Small time of execution' is a linguistic variable for the set defined above, indicating that the membership value decreases from 1 to 0 from the first element to the last element The fuzzy search technique, which is also used for finding the border variant for area parameter, will again be applied in this section to find the border variant for execution time parameter. The initial membership value (t
ioi)

is calculated based on the Min and the Max

values of e;xecution time according to the equation (3.5). According to the specification, VBorder = 200 fls, while Min = 20.01J.1s, Max= 833.41 fls are the calculated minimum and maximum values (according to equation 13) of the variants with maximum and minimum resources respectively. The detail process of finding the border variant (V5) is shown in table 4.3. This value indicates the first variant in the design: space, which satisfies the constraint for the execution time specified (V Border)Jn the arranged design space, only the variants to the left of the border variant (V5) satisfy the execution time requirement while others do not (to the left of V5 in the arranged design space). 46

Table 4. 3 The variants obtained for execution time when fuzzy search technique was applied
Variants corresponding in the set according to the calculated 'T'
T 1:..

Equations for obtaining the calculated membership values

Calculated membership values(T)

Execution time

Decision based on the V Border

,nt

200-20.01 =833.4120.0 I 833.41-50.005 = 200-50.005

tin;

=0:2213

0.231N25

=(22 +(10001)*20) *0.0025
exe
25

T exe25 <

V Border,

1-0.231 1:8 -0.231

tB

=0.378
=0.483 =0.568

=50.005 JlS 1S Texe =(12 +(10000.385N15 1)*8) *0.01

search up in the design space
Texe 15

=80.04 JlS
Texe
\4

< VBorder, search up in the design space
l4

1-0.385 833.41-80.04 = 1:a -0.385 200-80.04 1-0.500 833.41-100.04 = 200-100.04 'fa -0.500

=(14 +(1000-

Texe

LB

0.500N14

1)*10) *0.01

=l00.04Jls 22 Texe =(22 +(10000.577N22 0.538N5
1)*20) *0.01

< V BorrIer , search up in the design space
V Border ,

T exe22 >

LB

=200.02 Jls =0.577
(Since V22 has been checked so check V5)
5 Texe

search down in the design space

0-0.577 'fs -0.571

20.01- 200.02 = 200-200.02

LB

= (14 +(10001)*10) *0.01

Stop

=100.04 JlS

47

4.9. Determination of the Pareto-Optimal Set of Design Architecture
Aftet obtaining the border variants for both the area and execution time parameters, the next

step is to find the design variants which simultaneously satisfy the specifications for both area and execution time needed for the design. The border variant for area parameter is VII. Therefore, all the variants from VI to Vll in figure 4.3 should be considered for future analysis. They can be represented by a set A = {V I, V4, V7, VlO, Vi3, V16, V19, V22, V25, V2, V5, V8, VII}. Similarly, as the execution time parameter is concerned, the border variant for execution time parameter is V5. Therefore, all the variants from V5 to V27 in figure 4.4 should be considered for future analysis and they can be represented by a set B = {V5, V14, V23, V6, VI5, V24, V7, V16, V25, V8, V 17, V26, V9, VI8, V27}. The variants which optimize both parameters (area and execution time) by satisfying their constraints are variants AnB= {V5, V7, V16, V25, V8}. Hence, the Pareto optimal set C = {V5, V7, V16, V25, V8}. In order to optimize the third parameter, the power consumption parameter, the hierarchy configuration tree for power consumption can also be built based on the priority factor values for power consumption for different resources (adderlsubtractor, multiplier, and clock). Similar to the procedure described in section 4.5, building the hierarchy configuration tree for power consumption parameter can be very easily obtained by using the equations (2.32) to (2.34). Therefore, the hierarchy configuration tree for power consumption is shown in figure 4.5. 48

Figure 4. 5 Hierarchic Configuration Tree for power consumption.

With the help of hierarchy configuration tree, the variants for power consumption are then arranged in an increasing order of magnitude using the proposed method. According to the specification (see section 4.1) provided, the variant with the minimum power consumption should be selected. When the variants are arranged in an increasing orders of magnitude, the first variant in the order is guaranteed to be the variant with the minimum value (i.e. minimum power consumption) with the value increasing respectively with each next variant of the set. Among all the elements in the Pareto set C, V5 is the first element in the hierarchy configuration tree for power consumption parameter. Therefore, this variant is regarded as the best variant for the system designing as it concurrently satisfies the specification of all the three optimization parameters.

49

4.10. The Scheduling of Operations through the Sequencing Graph for the Best Variant Obtained
Scheduling is mainly classified into two categories: resources constraint and lime constraint scheduling. For resources constraint scheduling, operations will be scheduled within the limited resources, while other parameters (e.g. latency) will be optimized. On the other hand, time constraint scheduling is a process that assigns the time slot for every operation while fixing the timing length (latency) in such a way so that the synthesized hardware structure meets the timing requirement. The scheduling for the best variant is based on resources constraint scheduling, as the number of resources are fixed for a specific variant. Many scheduling algorithms exist for scheduling of operations, such as As Late as Possible (ALAP), List scheduling, Force Directed scheduling, As Soon As Possible (ASAP) algorithm [23] [24], etc. but the ASAP algorithm was selected as scheduling algorithm so that the operations can be done as soon as the resources become free. The data flow graph is a directed graph with the edges showing the data flow among operations. The designed function is represented in the form of data flow graph (shown in figure 4.6) before the scheduling procedure starts, so that the dependence among different operations is evident.

50

y(n)

Figure 4. 6 Data Flow Graph

After the ASAP algorithm is applied, the timing diagram for the obtained schedule for the data flow graph under the resources constraint (which is configuration of the best variant) is shown in figure 4.7.

First process of data Second process of data Resources AI AXn I + +BXnlJ Third process of data AXnJ+ AXn j + +BXnlJ +BXnlJ +AXn2J +AXn2! DYn2! EYnil '. AXn2
8

Latency = 14 cc, cycle time = to cc YI AXn2+ AXnz+ AXnz+ BXnh +BXnl +BXn12 ftAXn2 ftAXn2 ., DYn22 ..
< \'

Y2

~

,('"

MI M2

AXn BXnlJ
4

AXn2 1 DYn2 j

.

AXn2, ·BXnh .....
16

" EYnh·

'10,"

AXIll ,('.\'
BXnh~~:'

DYn2 2

a

12

20

24 CycJeTime

r

Figure 4. 7 Timing diagram for the schedule obtained for best variant

The timing diagram clearly shows in each time slot, which operation should be done with which resource and in which time slot. For example, figure 4.7 shows that from the time 0 to 4 (c.c), the resource Ml should perform the multiply operation AXnl ·
51

However, the timing diagram does not show the data flow among different resources. In order to do so; a sequencing graph with binding information should be created (see figure 4.8) since the flow of data elements through different operators in the data path can be visualized with the help of sequencing graphs [25].
1'0 Tl4c.c. T24.c.c. Latency 14 c.c.

T3 2c.c.
T42c.c. T52c.c. T62c.c.

TI2c.c. T8 2c.c.
1'92c.c. Tl02c.c. .. Til same as T2

Figure 4. 8 Sequencing graph with binding information

Sequencing graph figure 4.8 clearly shows the data flow through different resources at different time slot. With that information, the connections among different hardware resources can be easily deduced. First, registers must be added into the sequencing graph in order to keep the temporary data before it is used by the next resources. 52

The function of registers is to perfonn storage of data and the functions of the wires are to interconnect the different discrete components [25]. The register 1 has been added in time slot T3 because the results of the multiplier (M2) at time slot T2 is not being used until time slot T4. Similarly for the implementation of the pipelining, the register 2 has been added because the output of the multiplier (M2) at time slot T4 is not used until time slot T7.
TO
TI 4c.c.

Latency = 14 c.c.

1'24.c.c.
T3 2c.c.

T42c.c. T52c.c.
T62c.c.

17 2c.c.
T8 2c.c.

T9 2c.c.
. TlO 2c.c.
TI 1 same as T2

Figure 4. 9 Sequencing graph with data registers showing the portion of pipelining

Furthermore, registers 3 and 4 have been added in the pipelining portion because the output of multiplier (Ml) and multiplier (M2) are not being read until the time slot T8 and TlO respectively. The sequencing graph with data registers is shown in figure.4.9.

53

4.11. Determination of the MUltiplexing Schenle
The binding of the resources shown in Figure.4.9 enable fOlTIlalization of a methodology of incorporating the multiplexers and demultiplexers into the data path circuit of the system. Multiplexing scheme is one of the most important stages for developing the structure of data path in high level synthesis design flow. This procedure represents each resource of a system with respective inputs, outputs, operations and the necessary interconnections and highlights the actual usage of resources at different times. The scheme table acts as an important guide for the designer to develop a systems block diagram before developing the control unit structure for the data path. This scheme prevents the designer from making any errors in the final hardware structure. In this section, three resources perform different functions for the circuit, namely one adderlsubtractor and two multipliers. A multiplexing scheme table was developed for each as shown in table 4.4 , 4.5, and 4. 6 respectively.

54

Table 4. 4 Multiplexing table for resource adder/sub (AI) Time Slot
0
I

Opn

Input 1
-------

Input 2

Output
-------

-------

------M20ut Mlout Regl Mlout
--------

Mlout

2 3 4
5

(+) (+)
(-)

Alout Alout Alout

Alin Alin Alin RegY
-------

(+)
-------

------Reg2 Alout Alout Alout Mlout

6
7

M20ut Reg3 M20ut Reg4 M20ut

(+) (+)
(-)

Alin A lin Alin RegY

8
9

10

(+)

Table 4.5 Multiplexing scheme for multiplier resource (MI) Time Slot Opn Input I RegA RegA RegE RegA RegE RegA RegA Input 2 RegXn RegXn2 RegYnl RegXn2 RegYnl RegXn RegXn2 Output

0
1

-------

------Alin
I

(*)
, (*)

2 3 and 4 5 and 6 7 and 8 9 and 10

Alin A lin Reg3 Reg 4 Alin

I

(*)
(*) (*)

(*)

55

Table 4.6 Multiplexing scheme for multiplier resource (M2) Time slot
0

Opn
-------

Input 1 RegB RegD Reg A RegB RegD RegB RegD

Input 2 RegXnl RegYn2 RegXn Reg Xnl Reg Yn2 RegXnl RegYn2

Output

-----Alin Reg 1 Reg 2 Alin Alin Alin

I
I

1 2 3 and 4 5 and 6 7 and 8 9 and 10

(*) (*)
(*)

(*)
(*)

(*)

Once the multiplexing scheme is created, multiplexers and demulriplexers can be easily constructed and assigned to their respective inputs and outputs.

~

4.12. Development of the System Block Diagram
After the multiplexing scheme has been successfully developed, the next stage of the design

flow is to develop the system block diagram. The system block diagram consists of two divisions, data path and the control path. The data path is responsible for the flow of data through
.'

the data buses to the different components in the circuit block diagram. The data path consists of functional unit for execution of operations, registers for storage of data, multiplexers for preparation of input data, demultiplexers for allocation of output data, and memory elements

56

such as latches for the sinking of data for next stage. In block diagram for the sample application there are three resources (two adderlsubtractors, and one multiplier) to execute their assigned operation that they are in charge of. Another division of the system block diagram is the control unit or the controller. The control unit is basically a centralized control unit that controls the entire data path and provides the control signals for the necessary timing and synchronization purpose which is required by the data traveling through the different components. Based on the mUltiplexing scheme the block diagram of the data path circuit was constructed in Figure. 4.10 for the sample application.

Figure 4. 10 Block diagram of the Data path circuit

57

4.13. Developnlent of the Centralized Control Unit
The control unit plays an important role in allowing the system to perform the objective function. The control unit acts as a finite state machine that changes its state or the value of output control signals according to the requirement of the various elements of the data path at different instant of time, and it is responsible for the coordination of different elements in the data path of the system. Moreover, the control unit is also the circuit component, which is responsible for any mis-co-ordination in timing among the various elements of the data path. The main function of the controller is to activate or deactivate the different elements of the data path based on the timing specification determined for the objective function. For synchronous functioning of all the data elements in the system, the controller has to respond to the requirement exactly at the right instance. Failure to activate or deactivate any block of element in the data path will result in fatal consequences in the system output. In this thesis, Very high speed Hardware Description Language (VHDL) [22] has been used for the design of the control unit. The timing specification table for the data path circuit is shown in Table 4.7, in which clock cycle values are placed on the Y-axis and the control signals are placed on the X-axis. At every clock cycle (or the value of the counter), the values of different control signals can be clearly observed, and the control structure can be easily described in any hardware description language.

58

Table 4. 7 Timing specification of data path
AI

MI
.0

M2

Register strobes

:g
~

e

II)

'"

0
0
I

t--

]
000

~
0

i

TO

" '" :0 ~ 0

~
0

.t::

f;
0

~

-.;

~ 00 00
01

.. ~

.t::

~ 8
0
I

-e l;:;
0

]
00
00

i

.0
.t::

~

~
0

00

~
0
0

01)

!l
M OIl

.....
~
OIl

",.
0(1

"0 .t::

..

~

~

00

0

0

0

~ 0

j

u

;..

0

~ 0

00

11

12

2 3 4 5 6
7 8
9

00 000

0
01

00

0
1

I 0

I 0

0 001

I

I 0

0

00

I

0

01

10
I

0
I

10

1 0

I 0

1'3
T4 T5

10
II

0
010

1

I

0
I

00
01

1
0

0 00
I

to

I

t 0

1

T6
T7
T8 T9

12 13 14 15 16
17

0

0

001

0 I 0
I

0
I
00

0

I

0
1

i
I

t
011

t

0
I

01

1

0 01 1

I

0

I

0

to

0

0
t

0
I

0
I

18
19

0 100
0
101

1
I

1

0

to
00

I

0
00

00

1

0

0
I

TlO
Til

20 2\ 22 23 24 25 26
7

I 0
\

0
I

0 1
00
\

0
I

0

0
I

0 I

0
I

0
I 0 I

00 01

110
I

0

I 0

0

0

01
\

0
1 0

0

000

t 0
t

0

t

0
10

00

t
0

0 10

01

I

I

001

0

0

0

4.14. Schematic Structure Development for the Whole System and Verification
After successful completion of all the above steps, the schematic structure of the device is ready for development in any of the available synthesis tools. The schematic structure comprises

59

the data path unit and the control unit. First, all the components in the data path are described and implemented In VHDL before verification. Then the schematic structure of the whole device is designed and implemented in Xilinx Integrated Software Environment (ISE) version 9.2i [27] [28]. The schematic structure of the whole device as designed in Xilinx ISE 9.2i is shown in Figure. 4.11.

Figure 4. 11 Schematic view of the system (Xilinx ISE 9.2i)

60

Next, the verification of the designed system is carried out in Xilinx ISE simulator. The designed system is checked for wide array of input vectors and the simulation results indicate that the design is successfully accomplished. The successful result of the simulation suggests that the designed system gives the expected output. The design implementation in the Spartan 3E FPGA [34] suggests that the device is working perfectly and is in compliance with all the specifications provided. After the simulation, the design is imported in Synopsys tool for flattening. After flattening, the design is carried out in Cadence Encounter SOC and IC custom design tool respectively for floor planning, power planning, placement, routing and layout.

6l

Chapter 5 Experimental Results and Analysis
The proposed DSE approach was tested on several different size benchmarks including many large size benchmarks from the NCSU CBL high-level synthesis benchmark suite [29], such as
Elliptic, which is an elliptic wave filter, and Diffeq, which· is a differential equation solver.

Furthermore, DSP benchmarks such as discrete wavelet transformation (DWT) [30], autoregressive filter (ARF) [31] [32], and MPEG motion vectors (MMV) [33] were also selected for experiments. For the different benchmarks, the proposed DSE approach which combines the priority factor and the fuzzy search technique is compared to the DSE approach which combines the priority factor and the binary search technique. The experiment results are shown in Table 5.1. The same specifications and constraints for all benchmarks were used during the comparison in order to

62

demonstrate the advantage of using the fuzzy search. technique over the binary search which is used in other approaches, i.e. [3] during the DSE. Table 5. 1 Comparison of Fuzzy search technique with binary search technique when they are applied to the hierarchy configuration tree during DSE
Proposed hybridized approach with Priority Factor method and Fuzzy Search (Number of comparisons between variants) Area 2 Texe 5 Total variants 7 Priority Factor method with Binary Search (Number of comparisons between variants) Area 4 Texe 5 Total variants 9 22.22% Speedup compared with Binary Search

Bench marks

Number of architectural variants in the Design space

Total possible architectural variants in the design space for two parameters

I1R Digital Chebyshev Filter IlR Digital Filter I fiR Digital Filter 2 I1R Digital Filter 3 Elliptic Wave Filter (EWF) (29] Differential Equation Solver (HAL) (29) Auto Regressive Filter (ARF) [3 I J[32} Discrete Wavelet Transformation (OWl) [30J

27

54

32

64

2

4

6

5

5

10

40.00%

36

72

2

6

8

6

6

12

33.33%

40

80

2

4

6

5

6

11

45.45%

78

156

2

5

7

6

6

12

41%

90

180

4

9

13

6

7

13

-21%

144

288

3

8

11

7

7

14

216

432

4

8

12

8

8

16

25%

Figure 5.1 shows the comparison between the proposed fuzzy search technique and the binary search technique for the selected benchmarks. The experimental result indicates that the proposed fuzzy search technique can search the optimum variant faster than the binary search 63

tech niq ue when they are applied to the hie rarchy confi gurati on tree in the DSE. In o ther words, the proposed hybri d approach is capable of achievi ng higher speed up co mpared to the exhaustive search. For example, for the benchmark IIR digital fi lter 3, the speed up o f up to 45.45% and 92.50% are achieved compared to the binary search and the exha usti ve a nal ysis respecti vely.

Comparison of different search techniques
Number of variants 500
'150 - - - - - - - 400 ___.J:.Kila uSll'J_ a$.QJcch..____

__ J!!

Bi ;.lf!ISi¥ ~<..h_l!slmi_m~ __ _

350
300 250

· ru zzy sea rc h t ec hn iqu e

~-------------------------------------------------------

200 l '> U
100 ·

50
U

L
IIR Di ~.il.1
lhelJ v~ h , \j

Di([", ,,"li,,1 Alii" R t'~J" "io:t: Di ' Li " It: lqUdtioll \olv'r Hlt -!' {:- K" j \.·~"d ',,' ' l e t fill", 12 9 J (HA.Li 12 9 ) [31 ]132. ) T,.",rVlllld l ivlI (U',V I_ ) I;U) L -____________________________________________ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ EllilJlic Vlid 'l" Hlter{t. \'\.I" )

IIR Oi ~ ildl Fill e , IIR Oi;,;il . 1 Fillt:., IIR Di l;;ildl H ilt'. 1 l 3

~

Figure 5. I Comparsion of differe nt search techniques The proposed approach is a combination of the pri ority factor method and the fu zz y search techniLjue. This combination will improve the speed during the DSE process . The experiment results compared with the current approach [3] is shown in Table 5.2, a nd the Figure 5.2 sho ws the number of variants analyzed during the nSE process when different approac hes were used 04

for the selected benchmarks. The comparison and speed up results in Table 5.2 indicate that adding the fuzzy search technique to the priority factor method for DSE increases the speed of the exploration process compared to the current approach [3] which is also based on the Pareto optimal analysis. For example, the proposed hybrid approach yields speedup ranging from 26% to 47% for the selected beI1chmarks when compared to [3]. Acceleration of over 96% was also obtained compared to the exhaustive search for Discrete Wavelet Transformation CDWT) benchmark as seen in table 5.2.

65

Table 5. 2 Experimental results of the proposed hybridized DSE approach compared with the current approach
Total possible architecture in the design space for exhausted search Existing approach with binary search I31 (Number of variants analyzed) Proposed hybrid approach (Number of variants analyzed) Percentage speed up compared 10 existing approach [31 Percentage speed up compared to exhaustive approach 79.63% 84.38% 83.33% 87.50%

Benchmarlc applications

fiR Digital Chebyshev Filter IIR Digital Filter 1 lJR Digital Filter 2 IIR Digital Filter 3 Elliptic Wave Filter (EWF)

54
64 72

18 17 22 19

II

38.89% 41.18% 45.45% 47.37%

10
12

80

10 II

156 [29] Differential Equation Solver (HAL) [29] Auto Regressive Filter (ARF) [31][321 Discrete Wavelet Transformation (DWT) [30] 180

19

42.10%

92.95%

23

17

26.08%

90.56%

288

24

15

37.5%

94.79%

432

26

16

38.46%

96.30%

It can be seen that the proposed priority factor technique combined with fuzzy search provides increased acceleration in the design space exploration during the high level synthesis. The above analysis reveals that the proposed approach is able to provide massive acceleration in the design space exploration while simultaneously maintaining the accuracy needed in architecture selection.

66

Num ber of variants analy zed

Comparison of different approaches
------· Exha ustiv e Appro ach · Cl,!rren t t-Q Proac h

500 4 50 400 350
-r-

_____ · er.op.os.eciApproach

i 300 - t - - - . 250 -r-- - - .
200 100
50
T
I

150 -+

o
IIR Di gitdl IIR Di git,,1 Filter IIR Di git,,1 Filter IIR Di gital Filter IlIip ti( W"'ie Differential Auto Regress ive Discrete CheiJysh e'J Filter 1 2 Filter (EWF) 129 J Equation Sok er Filter (ARF ; Wavelet (H ALlIL9 J 131 11 32J Trallsformatioll (D'NT) [30J

Figure 5. 2 Comparison of different approaches

According to the design flow, an optimized filter satisfying all the constraints was successfully designed. In Figure 5.3, the simulation result of the design filter shows that when different values of input vectors were applied to the input term;nal, the designed filter can always provide the correct corresponded output value as expected. With the help of IC design tools, the final IC layout is shown in F gure 5.4.

67

Figure 5. 3 Simulation results for the implemented filter

Figure 5. 4 Final routing of the chip (Cadence encounter SoC)

68

Chapter 6 Conclusion and Future Work
6.1 Conclusion
This thesis presents a novel framework for the design space exploration using the priority factor method hybridized with a new fuzzy search mechanism. Furthermore, a new high level synthesis design flow with multi parametric optimization objective using the proposed DSE approach is also introduced. The proposed hybrid approach offers faster DSE approach as compared to the other approaches for DSE in high level synthesis. This approach first organizes the architecture design space in ascending or descending order and then uses the fuzzy search technique to assess and select the most suitable architecture according to the user specifications. The concept of fuzzy membership value is used for developing the fuzzy search technique. Furthermore, obtaining the optimal architecture with the minimum exploration time and high precision is highly desirable for efficient DSE. The proposed DSE method shows the improvement in speedup compared to the current existing approach. Moreover, the whole

69

process of DSE along with the high level synthesis design flow allows easy automation of the methodology useful for the current high level synthesis tools.

6.2 Future work
In order to get an efficient design according to the design flow, a number of algorithms need to be applied in the design steps within the proposed design flow. Optimization on each sub stage of the design flow can definitely optimize
~e

whole design. Highly efficient algorithms for the

sub stages such as scheduling, and binding etc. can be used along with the proposed DES approach and the design flow. With all the necessary algorithms provided, the proposed design flow can also be easily automated.

70

Publications
1. Zhipeng Zeng, Reza Sedaghat, Anirban Sengupta, "A multi parametric optimized High Level Synthesis design flow with a Hybrid approach to rapid Design Space Exploration using Fuzzy Search technique", Journal of Systems architecture, Elsevier, First Revision, 2009,Submission no: JSA-D-09-00092 2. Zhipeng Zeng, Reza Sedaghat, Anirban Sengupta, "A multi parametric optimized High level synthesis Design Flow for multi objective VLSI and SoC designs", Integration VLSljournal, Elsevier, 2009, Submission no: VLSI-D-09-00l20 (submitted) Refereed Conferences 3. Anirban Sengupta, Reza Sedaghat, Zhipeng Zeng, "A High Level Synthesis design flow with a novel approach for Efficient Design Space Exploration in case of multi parametric optimization objective", Microelectronics Reliability, Elsevier, In press, Corrected Proof, 2009, Submission no: MR-D-09-00308: 4. Anirban Sengupta, Reza Sedaghat, Zhipeng Zeng, "A High Level Synthesis Design Flow from ESL to RTL with multi-parametric optimization objective", IETE Journal of Research, 2009, Submission no: IETE JR_523_09 (submitted) 5. Zhipeng Zeng, Reza Sedaghat, Anirban Sengupta, "A Novel Framework of Optimizing Modular Computing Architecture for multi objective VLSI designs", IEEE 21 SI International Conference on Microelectronics (leM), 2009, Accepted for publication in the Conference Proceedings, In press, Article # 1569230822, To be presented on December 21, 2009.

71

6. Zhipeng Zeng, Reza Sedaghat, Anirban Sengupta, "A Framework for Fast Design Space Exploration using Fuzzy search for VLSI Computing Architectures", IEEE International Symposium on Circuits and Systems (ISCAS), 2009, submitted. 7. Anirban Sengupta, Reza Sedaghat, Zhipeng Zeng, "Hardware Efficient Design of speed optimized Power stringent Application Specific Processor", IEEE 21 st International Conference on Microelectronics (ICM), 2009, Accepted for publication in the Conference Proceedings, In press, Article # 1569230826, To be presented on December 22, 2009. 8. Summit Sehgal, Reza Sedaghat, Anirban Sengupta, Zhipeng Zeng, "Multi Parametric Optimized Architectural Synthesis of an Application Specific Processor", IEEE 14th International CSI Computer Conference, 2009, Accepted for publication in the conference proceedings (in press), Article id: 13. 9. Anirban Sengupta, Reza Sedaghat, Zhipeng Zeng, "Rapid Design Space Exploration for multi parametric optimization of VLSI designs", IEEE International Symposium on Circuits and Systems (ISCAS), 2009, submitted.

72

References
[1]

P.Coussy, A. Morawiec, (Eds.) "High-Level Synthesis From Algorithm to Digital Circuit" ISBN 978-1-4020-8587-1 (Print) 978-1-4020-8588-8 (Online) page 15

[2]

S. Mohanty, V. K. Prasanna, S. Neema, and J. Davis, "Rapid Design Space Exploration Of Heterogeneous Embedded Systems Using Symbolic Search And Multi-Granular Simulation". In Proceedings Of The Joint Conference On Languages, Compilers And Tools For Embedded Systems: Software And Compilers For Embedded Systems. 2002. pp.18-27

[3] L. Kirischian, V. Geurkov, V. Kirischian, and I. Terterian, 'Multi-parametric optimisation of the modular computer architecture', Int. J.Technology, Policy and Management, 2006, VoL 6, No.3, pp.327-346. [4] I. Das, "A preference ordering among various Pareto optimal alternatives". Structural and Multidisciplinary Optimization, 18( 1):30-35, Aug. 1999. [5) V. Krishnan, and S. Katkoori, "A Genetic Algorithm for the Design Space Exploration of Datapaths During High-Level Synthesis", IEEE Transactions on Evolutionary

Computation, vol. 10, no. 3, June 2006. [6] A. Giuseppe, C. Vincenzo, G. Alessandro, D. Nuovo, M. Palesi, and D. Patti, "Efficient design space exploration for application specific systems-on-a-chip", Journal of Systems Architecture 53 (2007) Pages: 733-750.

73

[7]

E. Torbey and 1. Knight, "High-level synthesis of digital circuits using genetic algorithms," in Proc. Int. Conf. Evol. Comput., May 1998, pp.224-229.

[8]

E. Torbey and J. Knight, "Performing scheduling and storage optimization simultaneously using genetic algorithms," in Proc. IEEE Midwest Symp. Circuits Systems, 1998, pp. 284287.

[9] 1. C. Gallagher, S. Vigraham, and

G~

Kramer,"A family of compact genetic algorithms for

intrinsic evolvable hardware," IEEE Trans. Evol. Comput., vol. 8, no. 2, pp. 1-126, Apr. 2004. [10] Zitzler, E., Laumanns, M., and L. Thiele, 2002. Spea2: "Improving The Strength Pareto Evolutionary Algorithm For Multiobjective Optimization". In Proceedings Of The Conference On Evolutionarymethods For Design, Optimisation, And ControL 19-26. [11] A. D. Pimentel, C. Erbas, and S. Polstra,. "A Systematic Approach To Exploring Embedded . System Architectures At Multiple Abstraction Levels". Ieee Trans. Comput. 2006, vol 55, no. 2, pp.99-112 [12] M. Kim, S. Banerjee, N. Dutt, and N. Venkatasubramanian. "Design space exploration of . real-time multi-media MPSoCs with heterogeneous scheduling policies", In Proceedings of the International Conference on Hardware/Software Codesign (CODES+ISSS). 2006, pp.16-21. [13] S. Mamagkakis, D. Atienza, C. Poucet, F. Catthoor, D. Soudris, and 1. M. Mendias. "Automated Exploration Of Pareto-Optimal Configuration~ In parameterized dynamic 74

memory allocation for embedded systems", In Proceedings of the Design, Automation and Test in Europe Conference (DATE). pp. 874-875, 2006. [14] T. Gupta, P. Sharma, M. Balakrishnan, S. Andmalik, "Processor evaluation in an embedded systems design environment'" In Proceedings of the 13th International Conference on VLSI Design. pp.98-103. 2000

[15] M. Lukasiewycz, M. GlaS, C. Haubelt, J. Teich, "Efficient symbolic multi-objective design
space exploration", Asia and South Pacific Design Automation Conference, Proceedings of the 2008 Asia and South Pacific Design Automation Conference, Pages 691-696,2008 (16] A. D. Pimentel, "The Artemis workbench for system-level performance evaluation of embedded systems", International Journal of Embedded Systems,VoI3, Num 3, Pages: 181 196,2008 [17] K. Sigdel, M. Thompson, A. D. Pimentel, and T. Stefanov, "System-Level Design Space Exploration of Dynamic Reconfigurable Architectures", Springer, Vol 5114, Pages: 279288,2008

[I8] C. Lee, S. Kim, and S. Ha, "A Systematic Design Space Exploration of MPSoC Based on
Synchronous Data Flow Specification", Journal of Signal Processing Systems, Springer, 2009 [19] C.T. Hwang, J.H. Lee, and Y.C. Hsu, "A Formal Approach to the Scheduling Problem in High Level Synthesis", IEEE Transactions on Computer-Aided Design, Vol. 10, no. 4, April 1991. 75

[20] R. Larson, R. P. Hostetler, B. H. Edwards, "Calculas with Analytic Geometry", Houghton Mifflin Company, Eighth Edition, 2006, Pages: 918-919 [21] L. Zadeh, "The concept of a linguistic variable and its application to approximate reasoning", information sciences, 1975, American Elsevier Publishing Company. [22] S. Salivahanan, A. Vallavaraj and C. Gnanapriya, "Digital Signal Processing", Tata McGraw-Hill Publishing Company Limited, pp. 439- 444. 2006. [23] P.G. Paulin and J. P. Knight, "Scheduling and Binding Algorithms for High-Level Synthesis, 26th conference on Design Automation, 1988, Pages: 1-6. [24] S.P. Mohanty, N. Ranganathan, E. Kougianos and P. Patra, "Low-Power High-Level Synthesis for Nanoscale CMOS Circuits", Chapter- High-Level Synthesis Fundamentals, Springer US, 2008 [25] G. D. Micheli, "Synthesis and Optimization of Digital Systems", McGraw-Hill Inc., pp580, 1994 [26] I. Ahmad, M.K. Dhodhi, C.Y.R. Chen, "Integrated scheduling, allocation and module selection for design-space exploration in high-level synthesis", lEE Proceedings, Computer and Digital Techniques, Vol. 142, Issue. I, January 1995, Pages: 65-71 [27] ISE 9.2i Quick Start Tutorial,· Xilinx IS,f3 9.2i , Software Manuals and http://www.xilinx.comlsupportlsw_manuals/xilinx92/downloadl [28] www.xilinx.comlitp/xilinx92Ibooks/manuals.pdf [29] http://www.cbl.ncsu.edulbenchmarks/. 76 Help,

[30J R. Jain, P.R. Panda, "An efficient pipelined VLSI architecture for lifting-based 2d-discrete wavelet transfonn". In Proceedings of the International Symposium on Circuits and Systems (IS CAS), pp. 1377- 1380 (2007) [31] A. Antola, F. Ferrandi, V. Piuri, and M. Sami, "Semiconcurrent error detection in data paths", IEEE Transactions on Computers vol 50, (5), 2001. pp. 449-465. [32] A. Antola" V. Piuri, M. Sami, UA low-redundancy approach to semi-concurrent error detection in datapaths," In Proceedings of the Design Automation and Test in Europe, 1998. pp. 266- 272 [33] Express: High-Level Synthesis Benchmarks. http://express.ece.ucsb.edulbenchmarkl [34] http://www.xilinx.comJpublications/xcellonline/xcelC54/xc_ssinterface54.htm

.( L)

,Q

77

